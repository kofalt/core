/gears:
  get:
    summary: List all gears
    operationId: get_all_gears
    x-fw-pagination: true
    tags:
    - gears
    parameters:
      - name: all_versions
        in: query
        type: boolean
        description: return all versions of each gear
    responses:
      '200':
        description: 'Returns a list of gears installed on the system'
        schema:
          $ref: schemas/output/gear-list.json
        examples:
          response:
            $ref: examples/output/gear-list.json

/gears/prepare-add:
  post:
    summary: Prepare a gear upload
    operationId: prepare_add_gear
    tags:
    - gears
    responses:
      '200':
        description: 'Returns a gear ticket ID'
        schema:
            type: object

/gears/ticket/{GearTicketId}:
  get:
    summary: Retrieve a specific gear ticket
    operationId: get_gear_ticket
    parameters:
      - name: GearTicketId
        in: path
        required: true
        type: string
        description: The ID of the the gear ticket to retrieve
    tags:
    - gears
    responses:
      '200':
        description: 'Returns a gear ticket'
        schema:
            type: object

/gears/my-tickets:
  get:
    summary: Retrieve all gear tickets for the current user
    operationId: get_my_gear_tickets
    parameters:
      - name: gear_names_only
        in: query
        type: boolean
        required: false
        description: If set, returns a string array of ticket IDs instead of the tickets themselves.
    tags:
    - gears
    responses:
      '200':
        description: 'Returns a list of gear tickets'
        schema:
            type: object

/gears/save:
  post:
    summary: Report the result of a gear upload and save the ticket
    operationId: save_gear
    parameters:
      - name: ticket
        in: query
        type: boolean
        required: true
        description: The ticket ID to save
    tags:
    - gears
    responses:
      '200':
        description: 'Returns the new gear ID'
        schema:
            type: object

# TODO: Can we make the parameter here consistent, or split
# this into two separate APIs?
/gears/{GearIdOrName}:
  get:
    summary: Retrieve details about a specific gear
    operationId: get_gear
    tags:
    - gears
    parameters:
      - name: GearIdOrName
        in: path
        type: string
        required: true
        description: Id of the gear to interact with
    responses:
      '200':
        description: 'Details about a single gear'
        schema:
          $ref: schemas/output/gear.json
        examples:
          response:
            $ref: examples/output/gear.json
  post:
    summary: Create or update a gear.
    description: |
      If no existing gear is found, one will be created
      Otherwise, the specified gear will be updated
    operationId: add_gear
    parameters:
      - name: GearIdOrName
        in: path
        type: string
        required: true
        description: Name of the gear to interact with
      - name: body
        in: body
        required: true
        schema:
          $ref: schemas/input/gear.json
    tags:
    - gears
    responses:
      '200':
        description: 'The gear was created or updated successfully'
        schema:
          $ref: schemas/output/collection-new.json
  delete:
    summary: Delete a gear (not recommended)
    operationId: delete_gear
    tags:
    - gears
    parameters:
      - name: GearIdOrName
        in: path
        type: string
        required: true
        description: Id of the gear to interact with
    responses:
      '200':
        description: Gear was deleted

/gears/{GearId}/invocation:
    parameters:
      - name: GearId
        in: path
        type: string
        required: true
        description: Id of the gear to interact with
    get:
      summary: Get a schema for invoking a gear.
      operationId: get_gear_invocation
      tags:
      - gears
      responses:
        '200':
          description: The gear invocation schema.
          schema:
            type: object

/gears/{GearId}/context/{ContainerType}/{ContainerId}:
    parameters:
      - name: GearId
        in: path
        type: string
        required: true
        description: Id of the gear to interact with
      - name: ContainerType
        in: path
        type: string
        required: true
        description: Type of the container to interact with
      - name: ContainerId
        in: path
        type: string
        required: true
        description: Id of the container to interact with
    get:
      summary: Get context values for the given gear and container.
      description: |
        Ref: https://github.com/flywheel-io/gears/tree/master/spec#contextual-values
      operationId: get_gear_context
      tags:
      - gears
      responses:
        '200':
          description: The gear context values.
          schema:
            $ref: schemas/output/gear-context.json


