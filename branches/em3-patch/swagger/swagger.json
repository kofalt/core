{
  "swagger": "2.0",
  "info": {
    "version": "em3-patch/64cfdae",
    "title": "Flywheel"
  },
  "host": "dev.flywheel.io",
  "basePath": "/api",
  "schemes": [
    "https"
  ],
  "produces": [
    "application/json"
  ],
  "consumes": [
    "application/json"
  ],
  "tags": [
    {
      "name": "users",
      "description": "User operations"
    },
    {
      "name": "groups",
      "description": "Group operations"
    },
    {
      "name": "projects",
      "description": "Project operations"
    },
    {
      "name": "sessions",
      "description": "Session operations"
    },
    {
      "name": "acquisitions",
      "description": "Acquisition operations"
    },
    {
      "name": "analyses",
      "description": "Analysis operations"
    },
    {
      "name": "collections",
      "description": "Collection operations"
    },
    {
      "name": "files",
      "description": "File upload/download operations"
    },
    {
      "name": "devices",
      "description": "Device operations"
    },
    {
      "name": "modalities",
      "description": "Modality operations"
    },
    {
      "name": "gears",
      "description": "Gear operations"
    },
    {
      "name": "rules",
      "description": "Gear rule configuration"
    },
    {
      "name": "jobs",
      "description": "Job operations"
    },
    {
      "name": "reports",
      "description": "Site-wide reports"
    },
    {
      "name": "batch",
      "description": "Batch job operations"
    },
    {
      "name": "default"
    }
  ],
  "paths": {
    "/login": {
      "post": {
        "summary": "Login",
        "description": "Scitran Authentication",
        "operationId": "login",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/auth-login-output"
                }
              ],
              "example": {
                "token": "MjeuawZcctfRdCOmx_C6oYXK4sLHd2Dhc_oZpkXPPkxHizhNgwFWcrrKGA49BEnK"
              }
            }
          }
        }
      }
    },
    "/logout": {
      "post": {
        "summary": "Log Out",
        "description": "Remove authtokens for user",
        "operationId": "logout",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/auth-logout-output"
                }
              ],
              "example": {
                "tokens_removed": 1
              }
            }
          }
        }
      }
    },
    "/download": {
      "post": {
        "summary": "Create a download ticket",
        "description": "Use filters in the payload to exclude/include files.\nTo pass a single filter, each of its conditions should be satisfied.\nIf a file pass at least one filter, it is included in the targets.\n",
        "operationId": "create_download_ticket",
        "tags": [
          "files"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/download-ticket-with-summary"
                }
              ],
              "example": {
                "ticket": "579e97738120be2ada087feb",
                "file_cnt": 3,
                "size": 64523904
              }
            }
          }
        },
        "parameters": [
          {
            "name": "prefix",
            "in": "query",
            "type": "string",
            "description": "A string to customize the name of the download\nin the format <prefix>_<timestamp>.tar.\nDefaults to \"scitran\".\n"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Download files with tag 'incomplete' OR type 'dicom'",
            "schema": {
              "example": {
                "optional": true,
                "nodes": [
                  {
                    "level": "project",
                    "_id": "57abe1589e512c513d42cb83"
                  }
                ],
                "filters": [
                  {
                    "tags": {
                      "+": [
                        "incomplete"
                      ]
                    },
                    "types": {
                      "+": [
                        "dicom"
                      ]
                    }
                  }
                ]
              },
              "title": "Download",
              "type": "object",
              "properties": {
                "optional": {
                  "type": "boolean"
                },
                "nodes": {
                  "type": "array",
                  "minItems": 1,
                  "items": {
                    "$ref": "#/definitions/download-node"
                  }
                },
                "filters": {
                  "type": "array",
                  "minItems": 1,
                  "items": {
                    "$ref": "#/definitions/download-filter"
                  }
                }
              },
              "required": [
                "optional",
                "nodes"
              ],
              "additionalProperties": false,
              "description": "Specifies a set of files to download"
            }
          }
        ]
      },
      "get": {
        "summary": "Download files listed in the given ticket.",
        "description": "You can use POST to create a download ticket\nThe files listed in the ticket are put into a tar archive\n",
        "operationId": "download_ticket",
        "tags": [
          "files"
        ],
        "parameters": [
          {
            "name": "ticket",
            "in": "query",
            "type": "string",
            "required": true,
            "description": "ID of the download ticket"
          }
        ],
        "produces": [
          "application/octet-stream"
        ],
        "x-sdk-download-file-param": "dest_file",
        "responses": {
          "200": {
            "description": "The requested tarball download as a binary stream"
          },
          "400": {
            "description": "Ticket not for this source IP"
          },
          "404": {
            "description": "No such ticket"
          }
        }
      }
    },
    "/upload/label": {
      "post": {
        "summary": "Multipart form upload with N file fields, each with their desired filename.",
        "description": "For technical reasons, no form field names can be repeated. Instead, use (file1, file2) and so forth.\nA non-file form field called \"metadata\" is also required, which must be a string containing JSON.\nSee api/schemas/input/labelupload.json for the format of this metadata.\n",
        "operationId": "upload_by_label",
        "tags": [
          "files"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "example": [
                {
                  "origin": {
                    "type": "job",
                    "id": "58063f24e5dc5b001657a87f"
                  },
                  "_id": "50708f69-7549-4331-bac0-b4789e5c9ca1",
                  "mimetype": "application/octet-stream",
                  "hash": "v0-sha384-12188e00a26650b2baa3f0195337dcf504f4362bb2136eef0cdbefb57159356b1355a0402fca0ab5ab081f21c305e5c2",
                  "name": "cortical_surface_right_hemisphere.obj",
                  "tags": [],
                  "classification": {},
                  "modified": "2016-10-18T15:26:35.701000+00:00",
                  "modality": null,
                  "size": 21804112,
                  "type": "None",
                  "info": {}
                },
                {
                  "origin": {
                    "type": "job",
                    "id": "58065fa7e5dc5b001457a882"
                  },
                  "_id": "50708f69-7549-4331-bac0-b4779e5c9ca1",
                  "mimetype": "application/octet-stream",
                  "hash": "v0-sha384-12188e00a26650b2baa3f0195337dcf504f4362bb2136eef0cdbefb57159356b1355a0402fca0ab5ab081f21c305e5c2",
                  "name": "cortical_surface_right_hemisphere.obj",
                  "tags": [],
                  "classification": {},
                  "modified": "2016-10-18T17:45:17.776000+00:00",
                  "modality": null,
                  "info": {},
                  "type": "None",
                  "size": 21804112
                }
              ]
            }
          },
          "402": {
            "description": "Uploads must be from an authorized drone"
          }
        },
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "formData",
            "type": "string"
          }
        ]
      }
    },
    "/upload/reaper": {
      "post": {
        "summary": "Bottom-up UID matching of Multipart form upload with N file fields, each with their desired filename.",
        "description": "Upload data, allowing users to move sessions during scans without causing new data to be\ncreated in referenced project/group.\n\n\n### Evaluation Order:\n\n* If a matching acquisition UID is found anywhere on the system, the related files will be placed under that acquisition.\n* **OR** If a matching session UID is found, a new acquistion is created with the specified UID under that Session UID.\n* **OR** If a matching group ID and project label are found, a new session and acquisition will be created within that project\n* **OR** If a matching group ID is found, a new project and session and acquisition will be created within that group.\n* **OR** A new session and acquisition will be created within a special \"Unknown\" group and project, which is only visible to system administrators.\n",
        "operationId": "upload_by_reaper",
        "tags": [
          "files"
        ],
        "responses": {
          "200": {
            "description": "Files uploaded successfully",
            "schema": {
              "type": "array",
              "items": {
                "allOf": [
                  {
                    "$ref": "#/definitions/file-output"
                  }
                ]
              }
            },
            "examples": {
              "application/json": [
                {
                  "origin": {
                    "type": "job",
                    "id": "58063f24e5dc5b001657a87f"
                  },
                  "_id": "50708f69-7549-4331-bac0-b4789e5c9ca1",
                  "mimetype": "application/octet-stream",
                  "hash": "v0-sha384-12188e00a26650b2baa3f0195337dcf504f4362bb2136eef0cdbefb57159356b1355a0402fca0ab5ab081f21c305e5c2",
                  "name": "cortical_surface_right_hemisphere.obj",
                  "tags": [],
                  "classification": {},
                  "modified": "2016-10-18T15:26:35.701000+00:00",
                  "modality": null,
                  "size": 21804112,
                  "type": "None",
                  "info": {}
                },
                {
                  "origin": {
                    "type": "job",
                    "id": "58065fa7e5dc5b001457a882"
                  },
                  "_id": "50708f69-7549-4331-bac0-b4779e5c9ca1",
                  "mimetype": "application/octet-stream",
                  "hash": "v0-sha384-12188e00a26650b2baa3f0195337dcf504f4362bb2136eef0cdbefb57159356b1355a0402fca0ab5ab081f21c305e5c2",
                  "name": "cortical_surface_right_hemisphere.obj",
                  "tags": [],
                  "classification": {},
                  "modified": "2016-10-18T17:45:17.776000+00:00",
                  "modality": null,
                  "info": {},
                  "type": "None",
                  "size": 21804112
                }
              ]
            }
          },
          "402": {
            "description": "Uploads must be from an authorized drone"
          }
        },
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "formData",
            "type": "string"
          }
        ]
      }
    },
    "/upload/uid": {
      "post": {
        "summary": "Multipart form upload with N file fields, each with their desired filename.",
        "description": "Same behavior as /api/upload/label,\n except the metadata field must be uid format\n See api/schemas/input/uidupload.json for the format of this metadata.\n",
        "operationId": "upload_by_uid",
        "tags": [
          "files"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "example": [
                {
                  "origin": {
                    "type": "job",
                    "id": "58063f24e5dc5b001657a87f"
                  },
                  "_id": "50708f69-7549-4331-bac0-b4789e5c9ca1",
                  "mimetype": "application/octet-stream",
                  "hash": "v0-sha384-12188e00a26650b2baa3f0195337dcf504f4362bb2136eef0cdbefb57159356b1355a0402fca0ab5ab081f21c305e5c2",
                  "name": "cortical_surface_right_hemisphere.obj",
                  "tags": [],
                  "classification": {},
                  "modified": "2016-10-18T15:26:35.701000+00:00",
                  "modality": null,
                  "size": 21804112,
                  "type": "None",
                  "info": {}
                },
                {
                  "origin": {
                    "type": "job",
                    "id": "58065fa7e5dc5b001457a882"
                  },
                  "_id": "50708f69-7549-4331-bac0-b4779e5c9ca1",
                  "mimetype": "application/octet-stream",
                  "hash": "v0-sha384-12188e00a26650b2baa3f0195337dcf504f4362bb2136eef0cdbefb57159356b1355a0402fca0ab5ab081f21c305e5c2",
                  "name": "cortical_surface_right_hemisphere.obj",
                  "tags": [],
                  "classification": {},
                  "modified": "2016-10-18T17:45:17.776000+00:00",
                  "modality": null,
                  "info": {},
                  "type": "None",
                  "size": 21804112
                }
              ]
            }
          },
          "402": {
            "description": "Uploads must be from an authorized drone"
          }
        },
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "formData",
            "type": "string"
          }
        ]
      }
    },
    "/upload/uid-match": {
      "post": {
        "summary": "Multipart form upload with N file fields, each with their desired filename.",
        "description": "Accepts uploads to an existing data hierarchy, matched via Session\nand Acquisition UID\nSee api/schemas/input/uidmatchupload.json for the format of this metadata.\n",
        "operationId": "upload_match_uid",
        "tags": [
          "files"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "example": [
                {
                  "origin": {
                    "type": "job",
                    "id": "58063f24e5dc5b001657a87f"
                  },
                  "_id": "50708f69-7549-4331-bac0-b4789e5c9ca1",
                  "mimetype": "application/octet-stream",
                  "hash": "v0-sha384-12188e00a26650b2baa3f0195337dcf504f4362bb2136eef0cdbefb57159356b1355a0402fca0ab5ab081f21c305e5c2",
                  "name": "cortical_surface_right_hemisphere.obj",
                  "tags": [],
                  "classification": {},
                  "modified": "2016-10-18T15:26:35.701000+00:00",
                  "modality": null,
                  "size": 21804112,
                  "type": "None",
                  "info": {}
                },
                {
                  "origin": {
                    "type": "job",
                    "id": "58065fa7e5dc5b001457a882"
                  },
                  "_id": "50708f69-7549-4331-bac0-b4779e5c9ca1",
                  "mimetype": "application/octet-stream",
                  "hash": "v0-sha384-12188e00a26650b2baa3f0195337dcf504f4362bb2136eef0cdbefb57159356b1355a0402fca0ab5ab081f21c305e5c2",
                  "name": "cortical_surface_right_hemisphere.obj",
                  "tags": [],
                  "classification": {},
                  "modified": "2016-10-18T17:45:17.776000+00:00",
                  "modality": null,
                  "info": {},
                  "type": "None",
                  "size": 21804112
                }
              ]
            }
          },
          "402": {
            "description": "Uploads must be from an authorized drone"
          },
          "404": {
            "description": "Session or Acquisition with uid does not exist"
          }
        },
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "formData",
            "type": "string"
          }
        ]
      }
    },
    "/clean-packfiles": {
      "post": {
        "summary": "Clean up expired upload tokens and invalid token directories.",
        "operationId": "clean_packfiles",
        "responses": {
          "200": {
            "description": "Expired and invalid tokens have been cleaned",
            "schema": {
              "example": {
                "tokens": 5,
                "directories": 3
              }
            }
          }
        }
      }
    },
    "/engine": {
      "post": {
        "summary": "Upload a list of file fields.",
        "description": "### Default behavior:\n >Uploads a list of file fields sent as file1, file2, etc to an existing\n  container and updates fields of the files, the container and it's\n  parents as specified in the metadata fileformfield using the\n  engine placer class\n\n### When ``level`` is ``analysis``:\n> Uploads a list of files to an existing analysis object, marking\n  all files as ``output=true`` using the job-based analyses placer\n  class.  See schemas/input/analysis.json\n",
        "operationId": "engine_upload",
        "responses": {
          "200": {
            "description": "A list of FileInfo objects",
            "schema": {
              "example": [
                {
                  "origin": {
                    "type": "job",
                    "id": "58063f24e5dc5b001657a87f"
                  },
                  "_id": "50708f69-7549-4331-bac0-b4789e5c9ca1",
                  "mimetype": "application/octet-stream",
                  "hash": "v0-sha384-12188e00a26650b2baa3f0195337dcf504f4362bb2136eef0cdbefb57159356b1355a0402fca0ab5ab081f21c305e5c2",
                  "name": "cortical_surface_right_hemisphere.obj",
                  "tags": [],
                  "classification": {},
                  "modified": "2016-10-18T15:26:35.701000+00:00",
                  "modality": null,
                  "size": 21804112,
                  "type": "None",
                  "info": {}
                },
                {
                  "origin": {
                    "type": "job",
                    "id": "58065fa7e5dc5b001457a882"
                  },
                  "_id": "50708f69-7549-4331-bac0-b4779e5c9ca1",
                  "mimetype": "application/octet-stream",
                  "hash": "v0-sha384-12188e00a26650b2baa3f0195337dcf504f4362bb2136eef0cdbefb57159356b1355a0402fca0ab5ab081f21c305e5c2",
                  "name": "cortical_surface_right_hemisphere.obj",
                  "tags": [],
                  "classification": {},
                  "modified": "2016-10-18T17:45:17.776000+00:00",
                  "modality": null,
                  "info": {},
                  "type": "None",
                  "size": 21804112
                }
              ]
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Object encoded as a JSON string.\nBy default JSON must match the specified enginemetadata.json schema\nIf ``level`` is ``analysis``, JSON must match AnalysisUploadMetadata schema\n",
            "schema": {
              "$ref": "#/definitions/enginemetadata-engine-upload-input"
            }
          },
          {
            "required": true,
            "description": "Which level to store files in",
            "enum": [
              "project",
              "session",
              "acquisition",
              "analysis"
            ],
            "type": "string",
            "in": "query",
            "name": "level"
          },
          {
            "required": true,
            "description": "The ID of the container to place files in",
            "type": "string",
            "in": "query",
            "name": "id"
          },
          {
            "description": "Required if ``level`` is ``analysis``",
            "type": "string",
            "in": "query",
            "name": "job",
            "required": true
          }
        ]
      }
    },
    "/config": {
      "get": {
        "summary": "Return public Scitran configuration information",
        "operationId": "get_config",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/config-output"
            },
            "examples": {
              "response": {
                "site": {
                  "central_url": "https://sdmc.scitran.io/api",
                  "ssl_cert": null,
                  "api_url": "https://10.240.0.2:443/api",
                  "registered": false,
                  "id": "local",
                  "name": "BaliDemo"
                },
                "modified": "2016-03-31T16:30:00.852000+00:00",
                "auth": {
                  "id_endpoint": "https://www.googleapis.com/plus/v1/people/me/openIdConnect",
                  "verify_endpoint": "https://www.googleapis.com/oauth2/v1/tokeninfo",
                  "client_id": "949263322061-6q4fqi0m4ihkp1v5n6v8q9bef4gd0f1k.apps.googleusercontent.com",
                  "auth_endpoint": "https://accounts.google.com/o/oauth2/auth"
                },
                "created": "2016-03-31T16:30:00.852000+00:00"
              }
            }
          }
        }
      }
    },
    "/config.js": {
      "get": {
        "summary": "Return public Scitran configuration information in javascript format.",
        "operationId": "get_config_js",
        "produces": [
          "text/html"
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/javascript": "config = {\n      \"auth\": {\n          \"auth_endpoint\": \"https://accounts.google.com/o/oauth2/auth\",\n          \"client_id\": \"949263322061-6q4fqi0m4ihkp1v5n6v8q9bef4gd0f1k.apps.googleusercontent.com\",\n          \"id_endpoint\": \"https://www.googleapis.com/plus/v1/people/me/openIdConnect\",\n          \"verify_endpoint\": \"https://www.googleapis.com/oauth2/v1/tokeninfo\"\n      },\n      \"created\": \"2016-03-31T16:30:00.852000+00:00\",\n      \"modified\": \"2016-03-31T16:30:00.852000+00:00\",\n      \"site\": {\n          \"api_url\": \"https://10.240.0.2:443/api\",\n          \"central_url\": \"https://sdmc.scitran.io/api\",\n          \"id\": \"local\",\n          \"name\": \"BaliDemo\",\n          \"registered\": false,\n          \"ssl_cert\": null\n      } \n"
            }
          }
        }
      }
    },
    "/version": {
      "get": {
        "summary": "Get server and database schema version info",
        "operationId": "get_version",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/version-output"
            },
            "examples": {
              "response": {
                "_id": "version",
                "database": 2
              }
            }
          }
        }
      }
    },
    "/users": {
      "get": {
        "summary": "Return a list of all users",
        "operationId": "get_all_users",
        "tags": [
          "users"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "allOf": [
                  {
                    "$ref": "#/definitions/user-output"
                  }
                ],
                "required": [
                  "_id",
                  "firstname",
                  "lastname",
                  "root",
                  "email",
                  "created",
                  "modified"
                ]
              },
              "example": {
                "0": {
                  "_id": "jane.doe@gmail.com",
                  "firstname": "Jane",
                  "lastname": "Doe",
                  "email": "jane.doe@gmail.com",
                  "root": true,
                  "created": "2016-09-02T22:58:18.624000+00:00",
                  "modified": "2016-09-02T22:58:18.624000+00:00"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Add a new user",
        "operationId": "add_user",
        "tags": [
          "users"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/user-input"
                }
              ],
              "required": [
                "_id",
                "firstname",
                "lastname"
              ],
              "example": {
                "_id": "jane.doe@gmail.com",
                "firstname": "Jane",
                "lastname": "Doe",
                "email": "jane.doe@gmail.com",
                "root": false
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The user was created sucessfully",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/common-object-created"
                }
              ],
              "example": {
                "_id": "jane.doe@gmail.com"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400:invalid-body-json"
          }
        }
      }
    },
    "/users/self": {
      "get": {
        "summary": "Get information about the current user",
        "operationId": "get_current_user",
        "tags": [
          "users"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/user-output-api-key"
                }
              ]
            },
            "examples": {
              "response": {
                "_id": "jane.doe@gmail.com",
                "firstname": "Jane",
                "lastname": "Doe",
                "email": "jane.doe@gmail.com",
                "root": false,
                "created": "2016-09-02T22:58:18.624000+00:00",
                "modified": "2016-09-02T22:58:18.624000+00:00"
              }
            }
          }
        }
      }
    },
    "/users/self/avatar": {
      "get": {
        "summary": "Get the avatar of the current user",
        "operationId": "get_current_user_avatar",
        "tags": [
          "users"
        ],
        "responses": {
          "307": {
            "description": "Redirects to the image file of the current user's avatar\n"
          }
        }
      }
    },
    "/users/{UserId}": {
      "parameters": [
        {
          "in": "path",
          "type": "string",
          "name": "UserId",
          "required": true
        }
      ],
      "get": {
        "summary": "Get information about the specified user",
        "operationId": "get_user",
        "tags": [
          "users"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/user-output"
                }
              ],
              "required": [
                "_id",
                "firstname",
                "lastname",
                "root",
                "email",
                "created",
                "modified"
              ]
            },
            "examples": {
              "response": {
                "_id": "jane.doe@gmail.com",
                "firstname": "Jane",
                "lastname": "Doe",
                "email": "jane.doe@gmail.com",
                "root": false,
                "created": "2016-09-02T22:58:18.624000+00:00",
                "modified": "2016-09-02T22:58:18.624000+00:00"
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update the specified user",
        "operationId": "modify_user",
        "tags": [
          "users"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "title": "User",
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/user-input"
                }
              ],
              "example": {
                "firstname": "Jane",
                "lastname": "Smith",
                "email": "jane.smith@gmail.com"
              }
            },
            "description": "Accepts an object matching the User type except all fields are optional\n"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the number of users modified",
            "schema": {
              "$ref": "#/definitions/common-modified-count"
            },
            "examples": {
              "response": {
                "modified": 1
              }
            }
          },
          "400": {
            "$ref": "#/responses/400:invalid-body-json"
          }
        }
      },
      "delete": {
        "summary": "Delete a user",
        "operationId": "delete_user",
        "tags": [
          "users"
        ],
        "responses": {
          "200": {
            "description": "User was deleted",
            "schema": {
              "$ref": "#/definitions/common-deleted-count"
            },
            "examples": {
              "response": {
                "deleted": 3
              }
            }
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/users/{UserId}/groups": {
      "parameters": [
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "UserId"
        }
      ],
      "get": {
        "summary": "List all groups the specified user is a member of",
        "operationId": "get_user_groups",
        "tags": [
          "users"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/group-output-list"
                }
              ]
            },
            "examples": {
              "response": [
                {
                  "label": "Test Group",
                  "permissions": [
                    {
                      "access": "admin",
                      "_id": "group_admin@fakeuser.com"
                    },
                    {
                      "access": "rw",
                      "_id": "group_member_read-write@fakeuser.com"
                    },
                    {
                      "access": "ro",
                      "_id": "group_member_read-only@fakeuser.com"
                    }
                  ],
                  "created": "2016-08-19T11:41:15.360000+00:00",
                  "modified": "2016-08-19T11:41:15.360000+00:00",
                  "_id": "test_group"
                }
              ]
            }
          }
        }
      }
    },
    "/users/{UserId}/avatar": {
      "parameters": [
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "UserId"
        }
      ],
      "get": {
        "summary": "Get the avatar of the specified user",
        "operationId": "get_user_avatar",
        "tags": [
          "users"
        ],
        "responses": {
          "307": {
            "description": "Redirects to the image file of the specified user's avatar\n"
          }
        }
      }
    },
    "/users/{UserId}/acquisitions": {
      "parameters": [
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "UserId"
        }
      ],
      "get": {
        "summary": "Get all acquisitions that belong to the given user.",
        "operationId": "get_user_acquisitions",
        "tags": [
          "users"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/definitions/acquisition-output"
                  }
                ],
                "required": [
                  "_id",
                  "public",
                  "label",
                  "session",
                  "created",
                  "modified",
                  "permissions"
                ]
              }
            },
            "examples": {
              "response": [
                {
                  "files": [
                    {
                      "origin": {
                        "method": "importer",
                        "type": "device",
                        "id": "importer_Admin_Import",
                        "name": "Admin Import"
                      },
                      "_id": "50708f69-7549-4331-bac0-b4779e5c9ca1",
                      "mimetype": "application/zip",
                      "classification": {},
                      "hash": "v0-sha384-dd3c97bfe0ad1fcba75ae6718c6e81038c59af4f447f5db194d52732efa4f955b28455db02eb64cad3e4e55f11e3679f",
                      "name": "4784_1_1_localizer_dicom.zip",
                      "tags": [],
                      "created": "2016-09-21T14:56:09.943000+00:00",
                      "modified": "2016-09-21T14:56:09.943000+00:00",
                      "modality": null,
                      "info": {},
                      "type": "dicom",
                      "size": 989933
                    }
                  ],
                  "created": "2016-09-21T14:56:10.026000+00:00",
                  "timestamp": "2016-09-21T19:24:45.539570+00:00",
                  "modified": "2016-09-21T14:56:10.026000+00:00",
                  "label": "4784_1_1_localizer",
                  "session": "57e29f8afab726000f7ec6b1",
                  "collections": [
                    "57e2a026675ca0000f0eeb0c"
                  ],
                  "_id": "57e29f8afab726000f7ec6b2",
                  "public": false,
                  "permissions": [
                    {
                      "access": "admin",
                      "_id": "coltonlw@flywheel.io"
                    }
                  ]
                },
                {
                  "files": [
                    {
                      "origin": {
                        "method": "importer",
                        "type": "device",
                        "id": "importer_Admin_Import",
                        "name": "Admin Import"
                      },
                      "_id": "50708f69-7549-4331-bac0-b4779e5c9ca1",
                      "mimetype": "application/zip",
                      "classification": {},
                      "hash": "v0-sha384-ca055fb36845db86e4278cf6e185f8674d11a96f4b29af27e401fc495cc82ef6b53a5729c3757713064649dc71c8c725",
                      "name": "4784_3_1_t1_dicom.zip",
                      "tags": [],
                      "created": "2016-09-21T14:56:11.224000+00:00",
                      "modified": "2016-09-21T14:56:11.224000+00:00",
                      "modality": null,
                      "info": {},
                      "type": "dicom",
                      "size": 2921881
                    }
                  ],
                  "created": "2016-09-21T14:56:11.452000+00:00",
                  "timestamp": "2016-09-21T19:24:45.539580+00:00",
                  "modified": "2016-09-21T14:56:11.452000+00:00",
                  "label": "4784_3_1_t1",
                  "session": "57e29f8afab726000f7ec6b1",
                  "collections": [
                    "57e2a026675ca0000f0eeb0c"
                  ],
                  "_id": "57e29f8bfab726000e7ec6b0",
                  "public": false,
                  "permissions": [
                    {
                      "access": "admin",
                      "_id": "coltonlw@flywheel.io"
                    }
                  ]
                },
                {
                  "files": [
                    {
                      "origin": {
                        "method": "importer",
                        "type": "device",
                        "id": "importer_Admin_Import",
                        "name": "Admin Import"
                      },
                      "_id": "50708f69-7549-4331-bac0-b4779e5c9ca1",
                      "mimetype": "application/zip",
                      "classification": {},
                      "hash": "v0-sha384-537e42b1dd8f1feef9844fbfb4f60461361e71cafa7055556097e9d0b9f7fac68c8f234ed126af9412bd43a548948847",
                      "name": "4784_5_1_fmri_dicom.zip",
                      "tags": [],
                      "created": "2016-09-21T14:56:13.580000+00:00",
                      "modified": "2016-09-21T14:56:13.580000+00:00",
                      "modality": null,
                      "info": {},
                      "type": "dicom",
                      "size": 4525137
                    }
                  ],
                  "created": "2016-09-21T14:56:13.886000+00:00",
                  "timestamp": "2016-09-21T19:24:45.539582+00:00",
                  "modified": "2016-09-21T14:56:13.886000+00:00",
                  "label": "4784_5_1_fmri",
                  "session": "57e29f8afab726000f7ec6b1",
                  "collections": [
                    "57e2a026675ca0000f0eeb0c"
                  ],
                  "_id": "57e29f8dfab726000e7ec6b3",
                  "public": false,
                  "permissions": [
                    {
                      "access": "admin",
                      "_id": "coltonlw@flywheel.io"
                    }
                  ]
                }
              ]
            }
          }
        }
      }
    },
    "/users/{UserId}/collections": {
      "parameters": [
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "UserId"
        }
      ],
      "get": {
        "summary": "Get all collections that belong to the given user.",
        "operationId": "get_user_collections",
        "tags": [
          "users"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "allOf": [
                  {
                    "$ref": "#/definitions/collection-output"
                  }
                ],
                "required": [
                  "_id",
                  "label",
                  "created",
                  "modified",
                  "permissions"
                ]
              }
            },
            "examples": {
              "response": [
                {
                  "created": "2016-08-30T17:22:05.299000+00:00",
                  "curator": "user@test.com",
                  "label": "test",
                  "modified": "2016-08-30T17:22:05.299000+00:00",
                  "_id": "57c5c0bd9e512c606dd3df09",
                  "permissions": [
                    {
                      "access": "admin",
                      "_id": "user@test.com"
                    }
                  ]
                }
              ]
            }
          }
        }
      }
    },
    "/users/{UserId}/projects": {
      "parameters": [
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "UserId"
        }
      ],
      "get": {
        "summary": "Get all projects that belong to the given user.",
        "operationId": "get_user_projects",
        "tags": [
          "users"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/definitions/project-output"
                  }
                ],
                "required": [
                  "_id",
                  "label",
                  "group",
                  "created",
                  "modified",
                  "permissions"
                ]
              }
            },
            "examples": {
              "response": [
                {
                  "group": "scitran",
                  "created": "2016-09-22T21:51:53.151000+00:00",
                  "modified": "2016-09-22T21:51:53.151000+00:00",
                  "label": "Neuroscience",
                  "_id": "57e452791cff88b85f9f9c97",
                  "public": false,
                  "permissions": [
                    {
                      "access": "admin",
                      "_id": "coltonlw@flywheel.io"
                    }
                  ]
                },
                {
                  "group": "scitran",
                  "created": "2016-09-22T21:52:27.576000+00:00",
                  "modified": "2016-09-22T21:52:27.576000+00:00",
                  "label": "Psychology",
                  "_id": "57e4529b1cff88b85f9f9c98",
                  "public": false,
                  "permissions": [
                    {
                      "access": "admin",
                      "_id": "coltonlw@flywheel.io"
                    }
                  ]
                },
                {
                  "group": "scitran",
                  "created": "2016-09-22T21:52:52.539000+00:00",
                  "modified": "2016-09-22T21:52:52.539000+00:00",
                  "label": "Testdata",
                  "_id": "57e452b41cff88b85f9f9c99",
                  "public": false,
                  "permissions": [
                    {
                      "access": "admin",
                      "_id": "coltonlw@flywheel.io"
                    }
                  ]
                },
                {
                  "group": "test-group",
                  "created": "2016-09-22T21:54:47.925000+00:00",
                  "modified": "2016-09-22T21:54:47.925000+00:00",
                  "label": "test-project",
                  "description": "Test Project",
                  "_id": "57e45327466d8e000e33a859",
                  "public": false,
                  "permissions": [
                    {
                      "access": "admin",
                      "_id": "coltonlw@flywheel.io"
                    }
                  ]
                },
                {
                  "group": "scitran",
                  "created": "2016-09-29T18:53:06.199000+00:00",
                  "modified": "2016-09-29T18:53:06.199000+00:00",
                  "label": "test2",
                  "description": "Test Project Two",
                  "_id": "57ed6312466d8e01c91ee427",
                  "permissions": [
                    {
                      "access": "admin",
                      "_id": "coltonlw@flywheel.io"
                    }
                  ]
                }
              ]
            }
          }
        }
      }
    },
    "/users/{UserId}/sessions": {
      "parameters": [
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "UserId"
        }
      ],
      "get": {
        "summary": "Get all sessions that belong to the given user.",
        "operationId": "get_user_sessions",
        "tags": [
          "users"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "allOf": [
                  {
                    "$ref": "#/definitions/session-output"
                  }
                ],
                "required": [
                  "_id",
                  "label",
                  "project",
                  "created",
                  "modified",
                  "permissions",
                  "public",
                  "group",
                  "subject"
                ]
              }
            },
            "examples": {
              "response": [
                {
                  "group": "scitran",
                  "created": "2016-09-19T17:13:48.164000+00:00",
                  "subject": {
                    "code": "ex4784",
                    "_id": "57e01cccb1dc04000fb83f02"
                  },
                  "modified": "2016-09-19T17:13:48.164000+00:00",
                  "label": "control_1",
                  "project": "57e01cccf6b5d5edbcb4e1cf",
                  "_id": "57e01cccb1dc04000fb83f03",
                  "public": false,
                  "permissions": [
                    {
                      "access": "admin",
                      "_id": "coltonlw@flywheel.io"
                    }
                  ]
                },
                {
                  "group": "scitran",
                  "created": "2016-09-19T17:13:54.873000+00:00",
                  "subject": {
                    "code": "ex6879",
                    "_id": "57e01cd2b1dc04000eb83f05"
                  },
                  "modified": "2016-09-19T17:13:54.873000+00:00",
                  "label": "control_2",
                  "project": "57e01cccf6b5d5edbcb4e1cf",
                  "_id": "57e01cd2b1dc04000eb83f06",
                  "public": false,
                  "permissions": [
                    {
                      "access": "admin",
                      "_id": "coltonlw@flywheel.io"
                    }
                  ]
                },
                {
                  "group": "scitran",
                  "created": "2016-09-19T17:14:02.228000+00:00",
                  "subject": {
                    "code": "ex8403",
                    "_id": "57e01cdab1dc04000eb83f10"
                  },
                  "modified": "2016-09-19T17:14:02.228000+00:00",
                  "label": "patient_1",
                  "project": "57e01cccf6b5d5edbcb4e1cf",
                  "_id": "57e01cdab1dc04000eb83f11",
                  "public": false,
                  "permissions": [
                    {
                      "access": "admin",
                      "_id": "coltonlw@flywheel.io"
                    }
                  ]
                }
              ]
            }
          }
        }
      }
    },
    "/jobs/add": {
      "post": {
        "summary": "Add a job",
        "operationId": "add_job",
        "tags": [
          "jobs"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/job-input"
                }
              ],
              "example": {
                "gear_id": "aex",
                "inputs": {
                  "dicom": {
                    "type": "acquisition",
                    "id": "573c9e6a844eac7fc01747cd",
                    "name": "1_1_dicom.zip"
                  }
                },
                "config": {
                  "two-digit multiple of ten": 20
                },
                "destination": {
                  "type": "acquisition",
                  "id": "573c9e6a844eac7fc01747cd"
                },
                "tags": [
                  "ad-hoc"
                ]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/common-object-created"
            },
            "examples": {
              "response": {
                "_id": "573cb66b135d87002660597c"
              }
            }
          }
        }
      }
    },
    "/jobs/next": {
      "get": {
        "summary": "Get the next job in the queue",
        "description": "Used by the engine.",
        "operationId": "get_next_job",
        "tags": [
          "jobs"
        ],
        "parameters": [
          {
            "name": "tags",
            "in": "query",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/job-output"
                }
              ]
            },
            "examples": {
              "response": {
                "inputs": {
                  "dicom": {
                    "type": "acquisition",
                    "id": "57ac7394c700190017123fb7",
                    "name": "8403_4_1_t1_dicom.zip"
                  }
                },
                "attempt": 1,
                "gear_id": "dcm_convert",
                "tags": [
                  "ad-hoc",
                  "dcm_convert"
                ],
                "destination": {
                  "type": "acquisition",
                  "id": "573c9e6a844eac7fc01747cd"
                },
                "modified": "2016-08-11T13:02:09.055000+00:00",
                "created": "2016-08-11T13:02:09.055000+00:00",
                "state": "pending",
                "id": "57ac77515e325c0018cd17cf",
                "config": {
                  "speed": 3
                }
              }
            }
          }
        }
      }
    },
    "/jobs/stats": {
      "get": {
        "summary": "Get stats about all current jobs",
        "operationId": "get_jobs_stats",
        "tags": [
          "jobs"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "example": {
                "by-state": {
                  "pending": 1,
                  "running": 3,
                  "failed": 0,
                  "complete": 17
                },
                "by-tag": [
                  {
                    "tags": [
                      "tag1"
                    ],
                    "count": 4
                  }
                ],
                "permafailed": 0
              }
            }
          }
        }
      }
    },
    "/jobs/reap": {
      "post": {
        "summary": "Reap stale jobs",
        "operationId": "reap_jobs",
        "tags": [
          "jobs"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "example": {
                "orphaned": 3
              }
            }
          }
        }
      }
    },
    "/jobs/{JobId}": {
      "parameters": [
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "JobId"
        }
      ],
      "get": {
        "summary": "Get job details",
        "operationId": "get_job",
        "tags": [
          "jobs"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/job-output"
                }
              ]
            },
            "examples": {
              "response": {
                "inputs": {
                  "dicom": {
                    "type": "acquisition",
                    "id": "57ac7394c700190017123fb7",
                    "name": "8403_4_1_t1_dicom.zip"
                  }
                },
                "attempt": 1,
                "gear_id": "dcm_convert",
                "tags": [
                  "ad-hoc",
                  "dcm_convert"
                ],
                "destination": {
                  "type": "acquisition",
                  "id": "573c9e6a844eac7fc01747cd"
                },
                "modified": "2016-08-11T13:02:09.055000+00:00",
                "created": "2016-08-11T13:02:09.055000+00:00",
                "state": "pending",
                "id": "57ac77515e325c0018cd17cf",
                "config": {
                  "speed": 3
                }
              }
            }
          },
          "404": {
            "description": "JobId not found"
          }
        }
      },
      "put": {
        "summary": "Update a job.",
        "description": "Updates timestamp.\nEnforces a valid state machine transition, if any.\nRejects any change to a job that is not currently in 'pending' or 'running' state.\nAccepts the same body as /api/jobs/add , except all fields are optional.\n",
        "operationId": "modify_job",
        "tags": [
          "jobs"
        ],
        "responses": {
          "200": {
            "description": "Job was updated.  No value is returned"
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "example": {
                "tags": [
                  "spectroscopy"
                ]
              }
            }
          }
        ]
      }
    },
    "/jobs/{JobId}/retry": {
      "parameters": [
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "JobId"
        }
      ],
      "post": {
        "summary": "Retry a job.",
        "description": "The job must have a state of 'failed', and must not have already been retried.\nThe failed jobs config is copied to a new job.\nThe ID of the new job is returned\n",
        "operationId": "retry_job",
        "tags": [
          "jobs"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "example": {
                "_id": "57a35c118120be0e8d1f3f5f"
              }
            }
          }
        }
      }
    },
    "/jobs/{JobId}/config.json": {
      "parameters": [
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "JobId"
        }
      ],
      "get": {
        "summary": "Get a job's config",
        "operationId": "get_job_config",
        "tags": [
          "jobs"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "example": {
                "speed": 5
              }
            }
          }
        }
      }
    },
    "/jobs/{JobId}/logs": {
      "parameters": [
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "JobId"
        }
      ],
      "get": {
        "summary": "Get job logs",
        "operationId": "get_job_logs",
        "tags": [
          "jobs"
        ],
        "responses": {
          "200": {
            "description": "The current job log",
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/job-log"
                }
              ],
              "example": {
                "_id": "57ac7394c700190017123fb8",
                "logs": [
                  {
                    "fd": 1,
                    "msg": "Hello World!"
                  }
                ]
              }
            }
          }
        }
      },
      "post": {
        "summary": "Add logs to a job.",
        "operationId": "add_job_logs",
        "tags": [
          "jobs"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/job-log-statement"
              },
              "example": [
                {
                  "fd": 1,
                  "msg": "Hello World!"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Logs were added. No value is returned."
          }
        }
      }
    },
    "/jobs/{JobId}/accept-failed-output": {
      "parameters": [
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "JobId"
        }
      ],
      "post": {
        "summary": "Accept failed job output.",
        "description": "Remove the 'from_failed_job' flag from the files.\nCreate any automatic jobs for the accepted files.\n",
        "operationId": "accept_failed_output",
        "tags": [
          "jobs"
        ],
        "responses": {
          "200": {
            "description": "Failed output is accepted and created any automatic jobs."
          },
          "400": {
            "description": "Can only accept failed output of a job that failed."
          }
        }
      }
    },
    "/jobs/{JobId}/prepare-complete": {
      "parameters": [
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "JobId"
        }
      ],
      "post": {
        "summary": "Create a ticket with the job id and its status.",
        "operationId": "prepare_compete",
        "tags": [
          "jobs"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "example": {
                "success": true
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a ticket",
            "schema": {
              "example": {
                "ticket": "579e97738120be2ada087feb"
              }
            }
          }
        }
      }
    },
    "/gears": {
      "get": {
        "summary": "List all gears",
        "operationId": "get_all_gears",
        "tags": [
          "gears"
        ],
        "responses": {
          "200": {
            "description": "Returns a list of gears installed on the system",
            "schema": {
              "type": "array",
              "items": {
                "allOf": [
                  {
                    "$ref": "#/definitions/gear-doc"
                  }
                ]
              }
            },
            "examples": {
              "response": [
                {
                  "category": "converter",
                  "gear": {
                    "inputs": {
                      "audio": {
                        "base": "file",
                        "description": "Any audio file. Plain speech suggested!"
                      }
                    },
                    "maintainer": "Nathaniel Kofalt",
                    "description": "Detects the speech content of an audio file, using the machine-learning DeepSpeech library by Mozilla.",
                    "license": "Other",
                    "author": "Nathaniel Kofalt",
                    "url": "",
                    "label": "Speech Recognition",
                    "source": "https://github.com/mozilla/DeepSpeech",
                    "version": "1",
                    "custom": {
                      "gear-builder": {
                        "image": "gear-builder-kdfqapbezk-20171219165918",
                        "container": "c15189b625a0ea450cafbb24ef0df03c26cc8cf151181976ec4289801e191032"
                      }
                    },
                    "config": {},
                    "name": "speech-recognition"
                  },
                  "created": "2017-12-20T00:09:50.381000+00:00",
                  "exchange": {
                    "git-commit": "local",
                    "rootfs-hash": "sha384:e01d925f90b097b554be0f802ef6ebb9f07000d7a6a2a0c3a25dac26893d4ac2414381e2c8e60f4b58b27c7fe8e56099",
                    "rootfs-url": "/api/gears/temp/5a39aa4e07a393001b663910"
                  },
                  "modified": "2017-12-20T00:09:50.381000+00:00",
                  "_id": "5a39aa4e07a393001b663910"
                }
              ]
            }
          }
        }
      }
    },
    "/gears/{GearIdOrName}": {
      "get": {
        "summary": "Retrieve details about a specific gear",
        "operationId": "get_gear",
        "tags": [
          "gears"
        ],
        "parameters": [
          {
            "name": "GearIdOrName",
            "in": "path",
            "type": "string",
            "required": true,
            "description": "Id of the gear to interact with"
          }
        ],
        "responses": {
          "200": {
            "description": "Details about a single gear",
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/gear-doc"
                }
              ]
            },
            "examples": {
              "response": {
                "category": "converter",
                "gear": {
                  "inputs": {
                    "audio": {
                      "base": "file",
                      "description": "Any audio file. Plain speech suggested!"
                    }
                  },
                  "maintainer": "Nathaniel Kofalt",
                  "description": "Detects the speech content of an audio file, using the machine-learning DeepSpeech library by Mozilla.",
                  "license": "Other",
                  "author": "Nathaniel Kofalt",
                  "url": "",
                  "label": "Speech Recognition",
                  "source": "https://github.com/mozilla/DeepSpeech",
                  "version": "1",
                  "custom": {
                    "gear-builder": {
                      "image": "gear-builder-kdfqapbezk-20171219165918",
                      "container": "c15189b625a0ea450cafbb24ef0df03c26cc8cf151181976ec4289801e191032"
                    }
                  },
                  "config": {},
                  "name": "speech-recognition"
                },
                "created": "2017-12-20T00:09:50.381000+00:00",
                "exchange": {
                  "git-commit": "local",
                  "rootfs-hash": "sha384:e01d925f90b097b554be0f802ef6ebb9f07000d7a6a2a0c3a25dac26893d4ac2414381e2c8e60f4b58b27c7fe8e56099",
                  "rootfs-url": "/api/gears/temp/5a39aa4e07a393001b663910"
                },
                "modified": "2017-12-20T00:09:50.381000+00:00",
                "_id": "5a39aa4e07a393001b663910"
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create or update a gear.",
        "description": "If no existing gear is found, one will be created\nOtherwise, the specified gear will be updated\n",
        "operationId": "add_gear",
        "parameters": [
          {
            "name": "GearIdOrName",
            "in": "path",
            "type": "string",
            "required": true,
            "description": "Name of the gear to interact with"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "title": "Analysis",
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/gear-doc"
                }
              ],
              "example": {
                "category": "converter",
                "gear": {
                  "inputs": {
                    "audio": {
                      "base": "file",
                      "description": "Any audio file. Plain speech suggested!"
                    }
                  },
                  "maintainer": "Nathaniel Kofalt",
                  "description": "Detects the speech content of an audio file, using the machine-learning DeepSpeech library by Mozilla.",
                  "license": "Other",
                  "author": "Nathaniel Kofalt",
                  "url": "",
                  "label": "Speech Recognition",
                  "source": "https://github.com/mozilla/DeepSpeech",
                  "version": "1",
                  "custom": {
                    "gear-builder": {
                      "image": "gear-builder-kdfqapbezk-20171219165918",
                      "container": "c15189b625a0ea450cafbb24ef0df03c26cc8cf151181976ec4289801e191032"
                    }
                  },
                  "config": {},
                  "name": "speech-recognition"
                },
                "exchange": {
                  "git-commit": "local",
                  "rootfs-hash": "sha384:e01d925f90b097b554be0f802ef6ebb9f07000d7a6a2a0c3a25dac26893d4ac2414381e2c8e60f4b58b27c7fe8e56099",
                  "rootfs-url": "/api/gears/temp/5a39aa4e07a393001b663910"
                }
              }
            }
          }
        ],
        "tags": [
          "gears"
        ],
        "responses": {
          "200": {
            "description": "The gear was created or updated successfully",
            "schema": {
              "$ref": "#/definitions/collection-new-output"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a gear (not recommended)",
        "operationId": "delete_gear",
        "tags": [
          "gears"
        ],
        "parameters": [
          {
            "name": "GearIdOrName",
            "in": "path",
            "type": "string",
            "required": true,
            "description": "Id of the gear to interact with"
          }
        ],
        "responses": {
          "200": {
            "description": "Gear was deleted"
          }
        }
      }
    },
    "/gears/{GearId}/invocation": {
      "parameters": [
        {
          "name": "GearId",
          "in": "path",
          "type": "string",
          "required": true,
          "description": "Id of the gear to interact with"
        }
      ],
      "get": {
        "summary": "Get a schema for invoking a gear.",
        "operationId": "get_gear_invocation",
        "tags": [
          "gears"
        ],
        "responses": {
          "200": {
            "description": "The gear invocation schema.",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/gears/{GearId}/context/{ContainerType}/{ContainerId}": {
      "parameters": [
        {
          "name": "GearId",
          "in": "path",
          "type": "string",
          "required": true,
          "description": "Id of the gear to interact with"
        },
        {
          "name": "ContainerType",
          "in": "path",
          "type": "string",
          "required": true,
          "description": "Type of the container to interact with"
        },
        {
          "name": "ContainerId",
          "in": "path",
          "type": "string",
          "required": true,
          "description": "Id of the container to interact with"
        }
      ],
      "get": {
        "summary": "Get context values for the given gear and container.",
        "description": "Ref: https://github.com/flywheel-io/gears/tree/master/spec#contextual-values\n",
        "operationId": "get_gear_context",
        "tags": [
          "gears"
        ],
        "responses": {
          "200": {
            "description": "The gear context values.",
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/gear-context-lookup"
                }
              ],
              "example": {
                "X": {
                  "found": true,
                  "container_type": "project",
                  "label": "Project Bob",
                  "id": "58063f24e5dc5b001657a93c",
                  "value": "some super important value"
                },
                "Y": {
                  "found": false
                }
              }
            }
          }
        }
      }
    },
    "/devices": {
      "get": {
        "summary": "List all devices.",
        "description": "Requires login.",
        "operationId": "get_all_devices",
        "tags": [
          "devices"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/device-output"
              }
            },
            "examples": {
              "response": [
                {
                  "_id": "000000000000000000000000",
                  "type": "bootstrapper",
                  "name": "Bootstrapper",
                  "errors": null,
                  "interval": 500,
                  "last_seen": "2016-11-28T18:54:11.880000+00:00"
                },
                {
                  "_id": "000000000000000000000001",
                  "type": "gear-register",
                  "name": "flywheel-utility",
                  "errors": null,
                  "interval": 700,
                  "last_seen": "2016-11-29T18:51:39.836000+00:00"
                },
                {
                  "_id": "000000000000000000000002",
                  "type": "importer",
                  "name": "admin import",
                  "errors": null,
                  "last_seen": "2016-11-28T18:57:27.104000+00:00"
                },
                {
                  "_id": "000000000000000000000003",
                  "type": "cron",
                  "name": "Cron",
                  "errors": null,
                  "last_seen": "2016-11-28T23:17:01.261000+00:00"
                },
                {
                  "_id": "000000000000000000000004",
                  "type": "test_type",
                  "name": "example_drone",
                  "info": {
                    "basic": "info"
                  },
                  "errors": [
                    "An Error"
                  ],
                  "interval": 400,
                  "last_seen": "2016-11-28T23:14:06.004000+00:00"
                }
              ]
            }
          }
        }
      },
      "post": {
        "summary": "Create a new device.",
        "description": "Will create a new device record together with an api key.\nRequest must be an admin request.\n",
        "operationId": "create_device",
        "tags": [
          "devices"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "example": {
                "modified": "1"
              }
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/device-input"
                }
              ],
              "example": {
                "type": "reaper",
                "label": "UI-friendly Reaper Name"
              }
            }
          }
        ]
      }
    },
    "/devices/self": {
      "put": {
        "summary": "Modify a device's type, name, interval, info or set errors.",
        "description": "Will modify the device record of the device making the request.\nType may only be set once if not already specified at creation.\nRequest must be a drone request.\n",
        "operationId": "update_device",
        "tags": [
          "devices"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/device-output"
                }
              ]
            },
            "examples": {
              "response": {
                "_id": "000000000000000000000000",
                "type": "reaper",
                "name": "FolderReaper_tmp",
                "info": {
                  "basic": "info"
                },
                "errors": [
                  "An Error"
                ],
                "interval": 400,
                "last_seen": "2016-11-28T23:14:06.004000+00:00"
              }
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/device-update"
                }
              ],
              "example": {
                "info": {
                  "basic": "info"
                },
                "errors": [
                  "An Error"
                ],
                "interval": 400
              }
            }
          }
        ]
      }
    },
    "/devices/status": {
      "get": {
        "summary": "Get status for all known devices.",
        "description": "ok - missing - error - unknown",
        "operationId": "get_all_devices_status",
        "tags": [
          "devices"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/device-status"
                }
              ]
            },
            "examples": {
              "response": {
                "bootstrapper_Bootstrapper": {
                  "status": "ok",
                  "last_seen": "2016-11-28T18:54:11.880000+00:00"
                },
                "test_method_example_drone": {
                  "status": "error",
                  "errors": [
                    "An Error"
                  ],
                  "last_seen": "2016-11-28T23:14:06.004000+00:00"
                },
                "gear-register_flywheel-utility": {
                  "status": "ok",
                  "last_seen": "2016-11-29T18:51:39.836000+00:00"
                },
                "cron_Cron": {
                  "status": "ok",
                  "last_seen": "2016-11-28T23:17:01.261000+00:00"
                },
                "importer_admin_import": {
                  "status": "unknown",
                  "last_seen": "2016-11-28T18:57:27.104000+00:00"
                }
              }
            }
          }
        }
      }
    },
    "/devices/{DeviceId}": {
      "parameters": [
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "DeviceId"
        }
      ],
      "get": {
        "summary": "Get device details",
        "operationId": "get_device",
        "tags": [
          "devices"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/device-output"
                }
              ]
            },
            "examples": {
              "response": {
                "_id": "000000000000000000000000",
                "type": "reaper",
                "name": "FolderReaper_tmp",
                "info": {
                  "basic": "info"
                },
                "errors": [
                  "An Error"
                ],
                "interval": 400,
                "last_seen": "2016-11-28T23:14:06.004000+00:00"
              }
            }
          },
          "404": {
            "description": "DeviceId not found"
          }
        }
      }
    },
    "/modalities": {
      "get": {
        "summary": "List all modalities.",
        "description": "Requires login.",
        "operationId": "get_all_modalities",
        "tags": [
          "modalities"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/modality"
              },
              "example": [
                {
                  "_id": "MR",
                  "classification": {
                    "Intent": [
                      "Functional",
                      "Diffusion"
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "post": {
        "summary": "Create a new modality.",
        "operationId": "add_modality",
        "tags": [
          "modalities"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "title": "Modality",
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/modality"
                }
              ],
              "required": [
                "classification"
              ],
              "example": {
                "_id": "MR",
                "classification": {
                  "Intent": [
                    "Functional",
                    "Diffusion"
                  ]
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/container-new-output"
            }
          },
          "400": {
            "$ref": "#/responses/400:invalid-body-json"
          }
        }
      }
    },
    "/modalities/{ModalityId}": {
      "parameters": [
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "ModalityId"
        }
      ],
      "get": {
        "summary": "Get a modality's classification specification",
        "operationId": "get_modality",
        "tags": [
          "modalities"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/modality"
                }
              ],
              "example": {
                "_id": "MR",
                "classification": {
                  "Intent": [
                    "Functional",
                    "Diffusion"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "ModalityId not found"
          }
        }
      },
      "put": {
        "summary": "Replace modality",
        "operationId": "replace_modality",
        "tags": [
          "modalities"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "title": "Modality",
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/modality"
                }
              ],
              "required": [
                "classification"
              ],
              "example": {
                "_id": "MR",
                "classification": {
                  "Intent": [
                    "Functional",
                    "Diffusion"
                  ]
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "400": {
            "$ref": "#/responses/400:invalid-body-json"
          },
          "404": {
            "description": "ModalityId not found"
          }
        }
      },
      "delete": {
        "summary": "Delete a modality",
        "operationId": "delete_modality",
        "tags": [
          "modalities"
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "404": {
            "description": "ModalityId not found"
          }
        }
      }
    },
    "/groups": {
      "get": {
        "summary": "List all groups",
        "operationId": "get_all_groups",
        "tags": [
          "groups"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/group-output-list"
                }
              ]
            },
            "examples": {
              "response": [
                {
                  "label": "Test Group",
                  "permissions": [
                    {
                      "access": "admin",
                      "_id": "group_admin@fakeuser.com"
                    },
                    {
                      "access": "rw",
                      "_id": "group_member_read-write@fakeuser.com"
                    },
                    {
                      "access": "ro",
                      "_id": "group_member_read-only@fakeuser.com"
                    }
                  ],
                  "created": "2016-08-19T11:41:15.360000+00:00",
                  "modified": "2016-08-19T11:41:15.360000+00:00",
                  "_id": "test_group"
                }
              ]
            }
          }
        }
      },
      "post": {
        "summary": "Add a group",
        "operationId": "add_group",
        "tags": [
          "groups"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/group-input"
                }
              ],
              "required": [
                "_id"
              ],
              "example": {
                "label": "Example Group",
                "_id": "example_group"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/group-new-output"
            }
          },
          "400": {
            "$ref": "#/responses/400:invalid-body-json"
          }
        }
      }
    },
    "/groups/{GroupId}": {
      "parameters": [
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "GroupId"
        }
      ],
      "get": {
        "summary": "Get group info",
        "operationId": "get_group",
        "tags": [
          "groups"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/group-output"
                }
              ],
              "required": [
                "permissions",
                "created",
                "modified",
                "_id"
              ]
            },
            "examples": {
              "response": {
                "label": "Test Group",
                "permissions": [
                  {
                    "access": "admin",
                    "_id": "group_admin@fakeuser.com"
                  },
                  {
                    "access": "rw",
                    "_id": "group_member_read-write@fakeuser.com"
                  },
                  {
                    "access": "ro",
                    "_id": "group_member_read-only@fakeuser.com"
                  }
                ],
                "created": "2016-08-19T11:41:15.360000+00:00",
                "modified": "2016-08-19T11:41:15.360000+00:00",
                "_id": "test_group"
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update group",
        "operationId": "modify_group",
        "tags": [
          "groups"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/group-input"
                }
              ],
              "example": {
                "label": "New group label"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "$ref": "#/responses/400:invalid-body-json"
          }
        }
      },
      "delete": {
        "summary": "Delete a group",
        "operationId": "delete_group",
        "tags": [
          "groups"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200:deleted-with-count"
          }
        }
      }
    },
    "/groups/{GroupId}/projects": {
      "parameters": [
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "GroupId"
        }
      ],
      "get": {
        "summary": "Get all projects in a group",
        "operationId": "get_group_projects",
        "tags": [
          "groups"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/definitions/project-output"
                  }
                ],
                "required": [
                  "_id",
                  "label",
                  "group",
                  "created",
                  "modified",
                  "permissions"
                ]
              }
            },
            "examples": {
              "response": [
                {
                  "group": "scitran",
                  "created": "2016-09-22T21:51:53.151000+00:00",
                  "modified": "2016-09-22T21:51:53.151000+00:00",
                  "label": "Neuroscience",
                  "_id": "57e452791cff88b85f9f9c97",
                  "public": false,
                  "permissions": [
                    {
                      "access": "admin",
                      "_id": "coltonlw@flywheel.io"
                    }
                  ]
                },
                {
                  "group": "scitran",
                  "created": "2016-09-22T21:52:27.576000+00:00",
                  "modified": "2016-09-22T21:52:27.576000+00:00",
                  "label": "Psychology",
                  "_id": "57e4529b1cff88b85f9f9c98",
                  "public": false,
                  "permissions": [
                    {
                      "access": "admin",
                      "_id": "coltonlw@flywheel.io"
                    }
                  ]
                },
                {
                  "group": "scitran",
                  "created": "2016-09-22T21:52:52.539000+00:00",
                  "modified": "2016-09-22T21:52:52.539000+00:00",
                  "label": "Testdata",
                  "_id": "57e452b41cff88b85f9f9c99",
                  "public": false,
                  "permissions": [
                    {
                      "access": "admin",
                      "_id": "coltonlw@flywheel.io"
                    }
                  ]
                },
                {
                  "group": "test-group",
                  "created": "2016-09-22T21:54:47.925000+00:00",
                  "modified": "2016-09-22T21:54:47.925000+00:00",
                  "label": "test-project",
                  "description": "Test Project",
                  "_id": "57e45327466d8e000e33a859",
                  "public": false,
                  "permissions": [
                    {
                      "access": "admin",
                      "_id": "coltonlw@flywheel.io"
                    }
                  ]
                },
                {
                  "group": "scitran",
                  "created": "2016-09-29T18:53:06.199000+00:00",
                  "modified": "2016-09-29T18:53:06.199000+00:00",
                  "label": "test2",
                  "description": "Test Project Two",
                  "_id": "57ed6312466d8e01c91ee427",
                  "permissions": [
                    {
                      "access": "admin",
                      "_id": "coltonlw@flywheel.io"
                    }
                  ]
                }
              ]
            }
          }
        }
      }
    },
    "/groups/{GroupId}/permissions": {
      "parameters": [
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "GroupId"
        }
      ],
      "post": {
        "summary": "Add a permission",
        "operationId": "add_group_permission",
        "tags": [
          "groups"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/permission"
                }
              ],
              "required": [
                "_id",
                "access"
              ],
              "example": {
                "_id": "coltonlw@flywheel.io",
                "access": "admin"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200:modified-with-count"
          },
          "400": {
            "$ref": "#/responses/400:invalid-body-json"
          }
        }
      }
    },
    "/groups/{GroupId}/permissions/{UserId}": {
      "parameters": [
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "GroupId"
        },
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "UserId"
        }
      ],
      "get": {
        "summary": "List a user's permissions for this group.",
        "operationId": "get_group_user_permission",
        "tags": [
          "groups"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/permission-output-default-required"
                }
              ]
            },
            "examples": {
              "response": {
                "access": "admin",
                "_id": "coltonlw@flywheel.io"
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update a user's permission for this group.",
        "operationId": "modify_group_user_permission",
        "tags": [
          "groups"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/permission"
                }
              ],
              "required": [
                "_id",
                "access"
              ],
              "example": {
                "_id": "coltonlw@flywheel.io",
                "access": "admin"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200:modified-with-count"
          },
          "400": {
            "$ref": "#/responses/400:invalid-body-json"
          }
        }
      },
      "delete": {
        "summary": "Delete a permission",
        "operationId": "delete_group_user_permission",
        "tags": [
          "groups"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200:modified-with-count"
          }
        }
      }
    },
    "/groups/{GroupId}/tags": {
      "parameters": [
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "GroupId"
        }
      ],
      "post": {
        "summary": "Add a tag to group.",
        "description": "Progates changes to projects, sessions and acquisitions",
        "operationId": "add_group_tag",
        "tags": [
          "groups"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/tag"
                }
              ],
              "example": {
                "value": "example-tag"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200:modified-with-count"
          },
          "400": {
            "$ref": "#/responses/400:invalid-body-json"
          }
        }
      }
    },
    "/groups/{GroupId}/tags/{TagValue}": {
      "parameters": [
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "GroupId"
        },
        {
          "required": true,
          "description": "The tag to interact with",
          "type": "string",
          "in": "path",
          "name": "TagValue"
        }
      ],
      "get": {
        "summary": "Get the value of a tag, by name.",
        "operationId": "get_group_tag",
        "tags": [
          "groups"
        ],
        "responses": {
          "200": {
            "description": "Returns a single tag by name",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/tag"
                }
              ]
            },
            "examples": {
              "response": {
                "value": "example-tag"
              }
            }
          }
        }
      },
      "put": {
        "summary": "Rename a tag.",
        "operationId": "rename_group_tag",
        "tags": [
          "groups"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/tag"
                }
              ],
              "example": {
                "value": "example-tag"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200:modified-with-count"
          },
          "400": {
            "$ref": "#/responses/400:invalid-body-json"
          }
        }
      },
      "delete": {
        "summary": "Delete a tag",
        "operationId": "delete_group_tag",
        "tags": [
          "groups"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200:modified-with-count"
          }
        }
      }
    },
    "/collections": {
      "get": {
        "summary": "List all collections.",
        "operationId": "get_all_collections",
        "tags": [
          "collections"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "allOf": [
                  {
                    "$ref": "#/definitions/collection-output"
                  }
                ],
                "required": [
                  "_id",
                  "label",
                  "created",
                  "modified",
                  "permissions"
                ]
              }
            },
            "examples": {
              "response": [
                {
                  "created": "2016-08-30T17:22:05.299000+00:00",
                  "curator": "user@test.com",
                  "label": "test",
                  "modified": "2016-08-30T17:22:05.299000+00:00",
                  "_id": "57c5c0bd9e512c606dd3df09",
                  "permissions": [
                    {
                      "access": "admin",
                      "_id": "user@test.com"
                    }
                  ]
                }
              ]
            }
          }
        }
      },
      "post": {
        "summary": "Create a collection",
        "operationId": "add_collection",
        "tags": [
          "collections"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "title": "Collection",
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/collection-input"
                }
              ],
              "required": [
                "label"
              ],
              "example": {
                "label": "control-group",
                "description": "Control group collection"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/collection-new-output"
            },
            "examples": {
              "response": {
                "_id": "57bb486a9e512c41c8b7fdd5"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400:invalid-body-json"
          }
        }
      }
    },
    "/collections/curators": {
      "get": {
        "summary": "List all curators of collections",
        "operationId": "get_all_collections_curators",
        "tags": [
          "collections"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "properties": {
                  "firstname": {
                    "maxLength": 64,
                    "minLength": 1,
                    "title": "First Name",
                    "type": "string",
                    "description": "First name"
                  },
                  "lastname": {
                    "maxLength": 64,
                    "minLength": 1,
                    "title": "Last Name",
                    "type": "string",
                    "description": "Last name"
                  },
                  "_id": {
                    "type": "string",
                    "format": "email",
                    "description": "Database ID of a user"
                  }
                }
              }
            },
            "examples": {
              "response": [
                {
                  "lastname": "LW",
                  "_id": "coltonlw@flywheel.io",
                  "firstname": "Colton"
                }
              ]
            }
          }
        }
      }
    },
    "/collections/{CollectionId}": {
      "parameters": [
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "CollectionId"
        }
      ],
      "get": {
        "summary": "Retrieve a single collection",
        "operationId": "get_collection",
        "tags": [
          "collections"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/collection-output"
                }
              ],
              "required": [
                "_id",
                "label",
                "created",
                "modified",
                "permissions"
              ]
            },
            "examples": {
              "response": {
                "created": "2016-08-30T17:22:05.299000+00:00",
                "curator": "user@test.com",
                "label": "test",
                "description": "Test collection",
                "modified": "2016-08-30T17:22:05.299000+00:00",
                "_id": "57c5c0bd9e512c606dd3df09",
                "permissions": [
                  {
                    "access": "admin",
                    "_id": "user@test.com"
                  }
                ]
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update a collection and its contents",
        "operationId": "modify_collection",
        "tags": [
          "collections"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "title": "Collection",
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/collection-input-with-contents"
                }
              ],
              "example": {
                "contents": {
                  "operation": "add",
                  "nodes": [
                    {
                      "level": "session",
                      "_id": "57dc50b0931cefd8ac2a371e"
                    }
                  ]
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Collection updated"
          },
          "400": {
            "$ref": "#/responses/400:invalid-body-json"
          }
        }
      },
      "delete": {
        "summary": "Delete a collection",
        "operationId": "delete_collection",
        "tags": [
          "collections"
        ],
        "responses": {
          "200": {
            "description": "Collection was deleted"
          }
        }
      }
    },
    "/collections/{CollectionId}/info": {
      "parameters": [
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "CollectionId"
        }
      ],
      "post": {
        "summary": "Update or replace info for a collection.",
        "operationId": "modify_collection_info",
        "x-sdk-modify-info": true,
        "tags": [
          "collections"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/info-update-input"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The info was updated successfully"
          }
        }
      }
    },
    "/collections/{CollectionId}/sessions": {
      "parameters": [
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "CollectionId"
        }
      ],
      "get": {
        "summary": "List sessions in a collection",
        "operationId": "get_collection_sessions",
        "tags": [
          "collections"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "allOf": [
                  {
                    "$ref": "#/definitions/session-output"
                  }
                ],
                "required": [
                  "_id",
                  "label",
                  "project",
                  "created",
                  "modified",
                  "permissions",
                  "public",
                  "group",
                  "subject"
                ]
              }
            },
            "examples": {
              "response": [
                {
                  "group": "scitran",
                  "created": "2016-09-19T17:13:48.164000+00:00",
                  "subject": {
                    "code": "ex4784",
                    "_id": "57e01cccb1dc04000fb83f02"
                  },
                  "modified": "2016-09-19T17:13:48.164000+00:00",
                  "label": "control_1",
                  "project": "57e01cccf6b5d5edbcb4e1cf",
                  "_id": "57e01cccb1dc04000fb83f03",
                  "public": false,
                  "permissions": [
                    {
                      "access": "admin",
                      "_id": "coltonlw@flywheel.io"
                    }
                  ]
                },
                {
                  "group": "scitran",
                  "created": "2016-09-19T17:13:54.873000+00:00",
                  "subject": {
                    "code": "ex6879",
                    "_id": "57e01cd2b1dc04000eb83f05"
                  },
                  "modified": "2016-09-19T17:13:54.873000+00:00",
                  "label": "control_2",
                  "project": "57e01cccf6b5d5edbcb4e1cf",
                  "_id": "57e01cd2b1dc04000eb83f06",
                  "public": false,
                  "permissions": [
                    {
                      "access": "admin",
                      "_id": "coltonlw@flywheel.io"
                    }
                  ]
                },
                {
                  "group": "scitran",
                  "created": "2016-09-19T17:14:02.228000+00:00",
                  "subject": {
                    "code": "ex8403",
                    "_id": "57e01cdab1dc04000eb83f10"
                  },
                  "modified": "2016-09-19T17:14:02.228000+00:00",
                  "label": "patient_1",
                  "project": "57e01cccf6b5d5edbcb4e1cf",
                  "_id": "57e01cdab1dc04000eb83f11",
                  "public": false,
                  "permissions": [
                    {
                      "access": "admin",
                      "_id": "coltonlw@flywheel.io"
                    }
                  ]
                }
              ]
            }
          }
        }
      }
    },
    "/collections/{CollectionId}/acquisitions": {
      "parameters": [
        {
          "name": "CollectionId",
          "in": "path",
          "type": "string",
          "required": true
        },
        {
          "name": "session",
          "in": "query",
          "type": "string",
          "description": "The id of a session, to which the acquisitions returned will be restricted"
        }
      ],
      "get": {
        "summary": "List acquisitions in a collection",
        "operationId": "get_collection_acquisitions",
        "tags": [
          "collections"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/definitions/acquisition-output"
                  }
                ],
                "required": [
                  "_id",
                  "public",
                  "label",
                  "session",
                  "created",
                  "modified",
                  "permissions"
                ]
              }
            },
            "examples": {
              "response": [
                {
                  "files": [
                    {
                      "origin": {
                        "method": "importer",
                        "type": "device",
                        "id": "importer_Admin_Import",
                        "name": "Admin Import"
                      },
                      "_id": "50708f69-7549-4331-bac0-b4779e5c9ca1",
                      "mimetype": "application/zip",
                      "classification": {},
                      "hash": "v0-sha384-dd3c97bfe0ad1fcba75ae6718c6e81038c59af4f447f5db194d52732efa4f955b28455db02eb64cad3e4e55f11e3679f",
                      "name": "4784_1_1_localizer_dicom.zip",
                      "tags": [],
                      "created": "2016-09-21T14:56:09.943000+00:00",
                      "modified": "2016-09-21T14:56:09.943000+00:00",
                      "modality": null,
                      "info": {},
                      "type": "dicom",
                      "size": 989933
                    }
                  ],
                  "created": "2016-09-21T14:56:10.026000+00:00",
                  "timestamp": "2016-09-21T19:24:45.539570+00:00",
                  "modified": "2016-09-21T14:56:10.026000+00:00",
                  "label": "4784_1_1_localizer",
                  "session": "57e29f8afab726000f7ec6b1",
                  "collections": [
                    "57e2a026675ca0000f0eeb0c"
                  ],
                  "_id": "57e29f8afab726000f7ec6b2",
                  "public": false,
                  "permissions": [
                    {
                      "access": "admin",
                      "_id": "coltonlw@flywheel.io"
                    }
                  ]
                },
                {
                  "files": [
                    {
                      "origin": {
                        "method": "importer",
                        "type": "device",
                        "id": "importer_Admin_Import",
                        "name": "Admin Import"
                      },
                      "_id": "50708f69-7549-4331-bac0-b4779e5c9ca1",
                      "mimetype": "application/zip",
                      "classification": {},
                      "hash": "v0-sha384-ca055fb36845db86e4278cf6e185f8674d11a96f4b29af27e401fc495cc82ef6b53a5729c3757713064649dc71c8c725",
                      "name": "4784_3_1_t1_dicom.zip",
                      "tags": [],
                      "created": "2016-09-21T14:56:11.224000+00:00",
                      "modified": "2016-09-21T14:56:11.224000+00:00",
                      "modality": null,
                      "info": {},
                      "type": "dicom",
                      "size": 2921881
                    }
                  ],
                  "created": "2016-09-21T14:56:11.452000+00:00",
                  "timestamp": "2016-09-21T19:24:45.539580+00:00",
                  "modified": "2016-09-21T14:56:11.452000+00:00",
                  "label": "4784_3_1_t1",
                  "session": "57e29f8afab726000f7ec6b1",
                  "collections": [
                    "57e2a026675ca0000f0eeb0c"
                  ],
                  "_id": "57e29f8bfab726000e7ec6b0",
                  "public": false,
                  "permissions": [
                    {
                      "access": "admin",
                      "_id": "coltonlw@flywheel.io"
                    }
                  ]
                },
                {
                  "files": [
                    {
                      "origin": {
                        "method": "importer",
                        "type": "device",
                        "id": "importer_Admin_Import",
                        "name": "Admin Import"
                      },
                      "_id": "50708f69-7549-4331-bac0-b4779e5c9ca1",
                      "mimetype": "application/zip",
                      "classification": {},
                      "hash": "v0-sha384-537e42b1dd8f1feef9844fbfb4f60461361e71cafa7055556097e9d0b9f7fac68c8f234ed126af9412bd43a548948847",
                      "name": "4784_5_1_fmri_dicom.zip",
                      "tags": [],
                      "created": "2016-09-21T14:56:13.580000+00:00",
                      "modified": "2016-09-21T14:56:13.580000+00:00",
                      "modality": null,
                      "info": {},
                      "type": "dicom",
                      "size": 4525137
                    }
                  ],
                  "created": "2016-09-21T14:56:13.886000+00:00",
                  "timestamp": "2016-09-21T19:24:45.539582+00:00",
                  "modified": "2016-09-21T14:56:13.886000+00:00",
                  "label": "4784_5_1_fmri",
                  "session": "57e29f8afab726000f7ec6b1",
                  "collections": [
                    "57e2a026675ca0000f0eeb0c"
                  ],
                  "_id": "57e29f8dfab726000e7ec6b3",
                  "public": false,
                  "permissions": [
                    {
                      "access": "admin",
                      "_id": "coltonlw@flywheel.io"
                    }
                  ]
                }
              ]
            }
          }
        }
      }
    },
    "/collections/{CollectionId}/tags": {
      "parameters": [
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "CollectionId"
        }
      ],
      "post": {
        "summary": "Add a tag to collection.",
        "description": "Progates changes to projects, sessions and acquisitions",
        "operationId": "add_collection_tag",
        "tags": [
          "collections"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/tag"
                }
              ],
              "example": {
                "value": "example-tag"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200:modified-with-count"
          },
          "400": {
            "$ref": "#/responses/400:invalid-body-json"
          }
        }
      }
    },
    "/collections/{CollectionId}/tags/{TagValue}": {
      "parameters": [
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "CollectionId"
        },
        {
          "required": true,
          "description": "The tag to interact with",
          "type": "string",
          "in": "path",
          "name": "TagValue"
        }
      ],
      "get": {
        "summary": "Get the value of a tag, by name.",
        "operationId": "get_collection_tag",
        "tags": [
          "collections"
        ],
        "responses": {
          "200": {
            "description": "Returns a single tag by name",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/tag"
                }
              ]
            },
            "examples": {
              "response": {
                "value": "example-tag"
              }
            }
          }
        }
      },
      "put": {
        "summary": "Rename a tag.",
        "operationId": "rename_collection_tag",
        "tags": [
          "collections"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/tag"
                }
              ],
              "example": {
                "value": "example-tag"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200:modified-with-count"
          },
          "400": {
            "$ref": "#/responses/400:invalid-body-json"
          }
        }
      },
      "delete": {
        "summary": "Delete a tag",
        "operationId": "delete_collection_tag",
        "tags": [
          "collections"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200:modified-with-count"
          }
        }
      }
    },
    "/collections/{CollectionId}/files": {
      "parameters": [
        {
          "name": "CollectionId",
          "in": "path",
          "type": "string",
          "required": true
        }
      ],
      "post": {
        "summary": "Upload a file to collection.",
        "operationId": "upload_file_to_collection",
        "tags": [
          "collections"
        ],
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "file",
            "in": "formData",
            "type": "file",
            "required": true,
            "description": "The file to upload"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/collections/{CollectionId}/files/{FileName}": {
      "parameters": [
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "CollectionId"
        },
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "FileName"
        }
      ],
      "get": {
        "summary": "Download a file.",
        "description": "Files can be downloaded directly from this endpoint with a valid \"Authorization\" header or via a ticket id.\n\nTo generate a ticket:\n  - Make a request with an empty \"ticket\" parameter and a valid \"Authorization\" header. The server will respond with a generated ticket id.\n  - Make another request with the received ticket id in the \"ticket\" parameter. A valid \"Authorization\" header is no longer required.\n\nWhen \"view\" is true, [RFC7233](https://tools.ietf.org/html/rfc7233) range request headers are supported.\n",
        "operationId": "download_file_from_collection",
        "tags": [
          "collections"
        ],
        "produces": [
          "application/json",
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "ticket",
            "in": "query",
            "type": "string",
            "description": "The generated ticket id for the download, or present but empty to generate a ticket id"
          },
          {
            "name": "view",
            "in": "query",
            "type": "boolean",
            "default": false,
            "description": "If true, the proper \"Content-Type\" header based on the file's mimetype is set on response\nIf false, the \"Content-Type\" header is set to \"application/octet-stream\"\n"
          },
          {
            "name": "info",
            "in": "query",
            "type": "boolean",
            "default": false,
            "description": "If the file is a zipfile, return a json response of zipfile member information"
          },
          {
            "name": "member",
            "in": "query",
            "type": "string",
            "description": "The filename of a zipfile member to download rather than the entire file"
          }
        ],
        "x-sdk-download-ticket": "get_collection_download_ticket",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/download-ticket"
            },
            "examples": {
              "response": {
                "ticket": "1e975e3d-21e9-41f4-bb97-261f03d35ba1"
              }
            }
          }
        }
      },
      "post": {
        "summary": "Replace a file",
        "operationId": "replace_collection_file",
        "tags": [
          "collections"
        ],
        "responses": {
          "default": {
            "description": ""
          }
        }
      },
      "delete": {
        "summary": "Delete a file",
        "description": "A user with read-write or higher permissions on the container may delete files\nthat were uploaded by users or were the output of jobs. (Specifically, files\nwhose `origin.type` is either `job` or `user`.)\n<br/>\nA user with admin permissions on the container may delete any file.\n",
        "operationId": "delete_collection_file",
        "tags": [
          "collections"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200:modified-with-count"
          }
        }
      },
      "put": {
        "summary": "Modify a file's attributes",
        "description": "Note: If modifying a file's modality, the current classification will be cleared (except for items in the \"Custom\" list)\n",
        "operationId": "modify_collection_file",
        "tags": [
          "collections"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/file-update"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200:modified-with-count-and-jobs"
          }
        }
      }
    },
    "/collections/{CollectionId}/permissions": {
      "parameters": [
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "CollectionId"
        }
      ],
      "post": {
        "summary": "Add a permission",
        "operationId": "add_collection_permission",
        "tags": [
          "collections"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/permission"
                }
              ],
              "required": [
                "_id",
                "access"
              ],
              "example": {
                "_id": "coltonlw@flywheel.io",
                "access": "admin"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200:modified-with-count"
          },
          "400": {
            "$ref": "#/responses/400:invalid-body-json"
          }
        }
      }
    },
    "/collections/{CollectionId}/permissions/{UserId}": {
      "parameters": [
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "CollectionId"
        },
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "UserId"
        }
      ],
      "get": {
        "summary": "List a user's permissions for this collection.",
        "operationId": "get_collection_user_permission",
        "tags": [
          "collections"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/permission-output-default-required"
                }
              ]
            },
            "examples": {
              "response": {
                "access": "admin",
                "_id": "coltonlw@flywheel.io"
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update a user's permission for this collection.",
        "operationId": "modify_collection_user_permission",
        "tags": [
          "collections"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/permission"
                }
              ],
              "required": [
                "_id",
                "access"
              ],
              "example": {
                "_id": "coltonlw@flywheel.io",
                "access": "admin"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200:modified-with-count"
          },
          "400": {
            "$ref": "#/responses/400:invalid-body-json"
          }
        }
      },
      "delete": {
        "summary": "Delete a permission",
        "operationId": "delete_collection_user_permission",
        "tags": [
          "collections"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200:modified-with-count"
          }
        }
      }
    },
    "/collections/{CollectionId}/files/{FileName}/info": {
      "parameters": [
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "CollectionId"
        },
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "FileName"
        }
      ],
      "get": {
        "summary": "Get info for a particular file.",
        "operationId": "get_collection_file_info",
        "tags": [
          "collections"
        ],
        "responses": {
          "200": {
            "description": "The file object, including info",
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/file-output"
                }
              ],
              "example": {
                "origin": {
                  "type": "job",
                  "id": "58063f24e5dc5b001657a87f"
                },
                "mimetype": "application/octet-stream",
                "hash": "v0-sha384-12188e00a26650b2baa3f0195337dcf504f4362bb2136eef0cdbefb57159356b1355a0402fca0ab5ab081f21c305e5c2",
                "name": "cortical_surface_right_hemisphere.obj",
                "tags": [],
                "classification": {},
                "modified": "2016-10-18T15:26:35.701000+00:00",
                "modality": null,
                "size": 21804112,
                "type": "None",
                "info": {}
              }
            }
          }
        }
      },
      "post": {
        "summary": "Update info for a particular file.",
        "operationId": "modify_collection_file_info",
        "x-sdk-modify-info": true,
        "tags": [
          "collections"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/info-update-input"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200:modified-with-count"
          }
        }
      }
    },
    "/collections/{CollectionId}/files/{FileName}/classification": {
      "parameters": [
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "CollectionId"
        },
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "FileName"
        }
      ],
      "post": {
        "summary": "Update classification for a particular file.",
        "description": "If replacing a file's classification, the modality can optionally be modified as well.",
        "operationId": "modify_collection_file_classification",
        "x-sdk-modify-classification": true,
        "tags": [
          "collections"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/classification-update-input"
                }
              ],
              "example": {
                "modality": "MR",
                "replace": {
                  "Intent": [
                    "Functional"
                  ],
                  "Measurement": [
                    "T2*"
                  ],
                  "Custom": [
                    "Custom Value"
                  ]
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200:modified-with-count-and-jobs"
          }
        }
      }
    },
    "/collections/{CollectionId}/notes": {
      "parameters": [
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "CollectionId"
        }
      ],
      "post": {
        "summary": "Add a note to collection.",
        "operationId": "add_collection_note",
        "tags": [
          "collections"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/note-input"
                }
              ],
              "required": [
                "text"
              ],
              "example": {
                "text": "Scitran core!"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200:modified-with-count"
          },
          "400": {
            "$ref": "#/responses/400:invalid-body-json"
          }
        }
      }
    },
    "/collections/{CollectionId}/notes/{NoteId}": {
      "parameters": [
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "CollectionId"
        },
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "NoteId"
        }
      ],
      "get": {
        "summary": "Get a note on collection.",
        "operationId": "get_collection_note",
        "tags": [
          "collections"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/note-output"
                }
              ]
            },
            "examples": {
              "response": {
                "_id": "580925ce9e512c57dc8a103b",
                "text": "some text",
                "created": "2016-10-21T17:19:40.899000+00:00",
                "modified": "2016-10-21T17:19:40.899000+00:00",
                "user": "coltonlw@flywheel.io"
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update a note on collection.",
        "operationId": "modify_collection_note",
        "tags": [
          "collections"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/note-input"
                }
              ],
              "required": [
                "text"
              ],
              "example": {
                "text": "Scitran core!"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200:modified-with-count"
          },
          "400": {
            "$ref": "#/responses/400:invalid-body-json"
          }
        }
      },
      "delete": {
        "summary": "Remove a note from collection",
        "operationId": "delete_collection_note",
        "tags": [
          "collections"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200:modified-with-count"
          }
        }
      }
    },
    "/collections/{CollectionId}/analyses": {
      "parameters": [
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "CollectionId"
        }
      ],
      "get": {
        "summary": "Get analyses for collection.",
        "description": "Returns analyses that directly belong to this resource.",
        "operationId": "get_collection_analyses",
        "tags": [
          "collections"
        ],
        "responses": {
          "200": {
            "description": "The list of analyses",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/analysis-list-entry"
              },
              "example": [
                {
                  "files": [
                    {
                      "origin": {
                        "type": "job",
                        "id": "58063f24e5dc5b001657a87f"
                      },
                      "mimetype": "application/octet-stream",
                      "hash": "v0-sha384-12188e00a26650b2baa3f0195337dcf504f4362bb2136eef0cdbefb57159356b1355a0402fca0ab5ab081f21c305e5c2",
                      "name": "cortical_surface_right_hemisphere.obj",
                      "tags": [],
                      "classification": {},
                      "modified": "2016-10-18T15:26:35.701000+00:00",
                      "modality": null,
                      "size": 21804112,
                      "type": "None",
                      "info": {}
                    }
                  ],
                  "created": "2016-10-18T17:45:11.778000+00:00",
                  "modified": "2016-10-18T17:45:11.778000+00:00",
                  "label": "cortex-demo 10/18/2016 13:45:5",
                  "job": "58065fa7e5dc5b001457a882",
                  "user": "canakgun@flywheel.io",
                  "_id": "58065fa7e5dc5b001457a881"
                }
              ]
            }
          }
        }
      },
      "post": {
        "summary": "Create an analysis and upload files.",
        "description": "When query param \"job\" is \"true\", send JSON to create\nan analysis and job.  Otherwise, multipart/form-data\nto upload files and create an analysis.\n",
        "operationId": "add_collection_analysis",
        "tags": [
          "collections"
        ],
        "consumes": [
          "application/json",
          "multipart/form-data"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "title": "Analysis",
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/analysis-input-any"
                }
              ],
              "required": [
                "label"
              ]
            }
          },
          {
            "name": "job",
            "in": "query",
            "type": "boolean",
            "description": "Return job as an object instead of an id",
            "x-sdk-default": "true"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the id of the analysis that was created.",
            "schema": {
              "$ref": "#/definitions/container-new-output"
            }
          }
        }
      }
    },
    "/collections/{CollectionId}/analyses/{AnalysisId}": {
      "parameters": [
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "CollectionId"
        },
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "AnalysisId"
        }
      ],
      "get": {
        "summary": "Get an analysis.",
        "operationId": "get_collection_analysis",
        "tags": [
          "collections"
        ],
        "parameters": [
          {
            "name": "inflate_job",
            "in": "query",
            "type": "boolean",
            "description": "Return job as an object instead of an id",
            "x-sdk-default": "true"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/analysis-output"
                }
              ]
            },
            "examples": {
              "response": {
                "inputs": [
                  {
                    "origin": {
                      "type": "job",
                      "id": "58063f24e5dc5b001657a87f"
                    },
                    "_id": "50708f69-7549-4331-bac0-b4779e5c9ca1",
                    "mimetype": "application/octet-stream",
                    "hash": "v0-sha384-12188e00a26650b2baa3f0195337dcf504f4362bb2136eef0cdbefb57159356b1355a0402fca0ab5ab081f21c305e5c2",
                    "name": "cortical_surface_right_hemisphere.obj",
                    "tags": [],
                    "classification": {},
                    "modified": "2016-10-18T15:26:35.701000+00:00",
                    "modality": null,
                    "size": 21804112,
                    "type": "None",
                    "info": {}
                  }
                ],
                "files": [
                  {
                    "origin": {
                      "type": "job",
                      "id": "58065fa7e5dc5b001457a882"
                    },
                    "_id": "50708f69-7549-4331-bac0-b4779e5c9ca1",
                    "mimetype": "application/octet-stream",
                    "hash": "v0-sha384-12188e00a26650b2baa3f0195337dcf504f4362bb2136eef0cdbefb57159356b1355a0402fca0ab5ab081f21c305e5c2",
                    "name": "cortical_surface_right_hemisphere.obj",
                    "tags": [],
                    "classification": {},
                    "modified": "2016-10-18T17:45:17.776000+00:00",
                    "modality": null,
                    "info": {},
                    "type": "None",
                    "size": 21804112
                  }
                ],
                "created": "2016-10-18T17:45:11.778000+00:00",
                "modified": "2016-10-18T17:45:11.778000+00:00",
                "label": "cortex-demo 10/18/2016 13:45:5",
                "job": {
                  "inputs": {
                    "anatomy": {
                      "type": "analysis",
                      "id": "58063f24e5dc5b001657a87e",
                      "name": "cortical_surface_right_hemisphere.obj"
                    }
                  },
                  "attempt": 1,
                  "tags": [
                    "ad-hoc",
                    "cortex-demo",
                    "analysis"
                  ],
                  "destination": {
                    "type": "analysis",
                    "id": "58065fa7e5dc5b001457a881"
                  },
                  "request": {
                    "inputs": [
                      {
                        "location": "/",
                        "type": "http",
                        "uri": "https://storage.googleapis.com/flywheel/gears/v1/scitran/cortex-demo/cortex-demo_manifest-labels_20160725T031837.331720Z.tar.gz",
                        "vu": "vu0:sha384:ssx5VWyFg7r8IBoOIphq7GaB_CymInQ1NxTV2WTDzglJLJ1-ktEbjLIHVABRzesV"
                      },
                      {
                        "type": "scitran",
                        "uri": "/jobs/58065fa7e5dc5b001457a882/config.json",
                        "location": "/flywheel/v0"
                      },
                      {
                        "type": "scitran",
                        "uri": "/sessions/58063e7ed213ed776045b320/analyses/58063f24e5dc5b001657a87e/files/cortical_surface_right_hemisphere.obj",
                        "location": "/flywheel/v0/input/anatomy"
                      }
                    ],
                    "target": {
                      "command": [
                        "bash",
                        "-c",
                        "rm -rf output; mkdir -p output; ./run; echo \"Exit was $?\""
                      ],
                      "env": {
                        "PATH": "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
                      },
                      "dir": "/flywheel/v0"
                    },
                    "outputs": [
                      {
                        "type": "scitran",
                        "uri": "/engine?level=analysis&id=58065fa7e5dc5b001457a881&job=58065fa7e5dc5b001457a882",
                        "location": "/flywheel/v0/output"
                      }
                    ]
                  },
                  "modified": "2016-10-18T17:45:21.344000+00:00",
                  "created": "2016-10-18T17:45:11.816000+00:00",
                  "state": "complete",
                  "config": {},
                  "id": "58065fa7e5dc5b001457a882",
                  "gear_id": "58065fa7e5dc5b001457a882"
                },
                "_id": "58065fa7e5dc5b001457a881"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete an anaylsis",
        "operationId": "delete_collection_analysis",
        "tags": [
          "collections"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200:deleted-with-count"
          }
        }
      }
    },
    "/collections/{CollectionId}/analyses/{AnalysisId}/inputs": {
      "parameters": [
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "CollectionId"
        },
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "AnalysisId"
        }
      ],
      "get": {
        "summary": "Download analysis inputs.",
        "description": "If \"ticket\" query param is included and not empty, download inputs.\nIf \"ticket\" query param is included and empty, create a ticket for all inputs in the anlaysis\nIf no \"ticket\" query param is included, server error 500\n",
        "operationId": "download_collection_analysis_inputs",
        "tags": [
          "collections"
        ],
        "produces": [
          "application/json",
          "application/octet-stream"
        ],
        "parameters": [
          {
            "description": "ticket id of the inputs to download",
            "type": "string",
            "in": "query",
            "name": "ticket"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/analysis-files-create-ticket-output"
            },
            "examples": {
              "response": {
                "ticket": "57f2af23-a94c-426d-8521-11b2e8782020",
                "filename": "exampledicom.zip",
                "file_cnt": 1,
                "size": 4525137
              }
            }
          }
        }
      }
    },
    "/collections/{CollectionId}/analyses/{AnalysisId}/inputs/{Filename}": {
      "parameters": [
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "CollectionId"
        },
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "AnalysisId"
        },
        {
          "required": true,
          "type": "string",
          "in": "path",
          "description": "regex to select inputs for download",
          "name": "Filename"
        }
      ],
      "get": {
        "summary": "Download anaylsis inputs with filter.",
        "description": "If \"ticket\" query param is included and not empty, download inputs.\nIf \"ticket\" query param is included and empty, create a ticket for matching inputs in the anlaysis.\nIf no \"ticket\" query param is included, inputs will be downloaded directly.\n",
        "operationId": "download_input_from_collection_analysis",
        "tags": [
          "collections"
        ],
        "produces": [
          "application/json",
          "application/octet-stream"
        ],
        "parameters": [
          {
            "description": "ticket id of the inputs to download",
            "type": "string",
            "in": "query",
            "name": "ticket"
          }
        ],
        "x-sdk-download-ticket": "get_collection_analysis_input_download_ticket",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/analysis-files-create-ticket-output"
            },
            "examples": {
              "response": {
                "ticket": "57f2af23-a94c-426d-8521-11b2e8782020",
                "filename": "exampledicom.zip",
                "file_cnt": 1,
                "size": 4525137
              }
            }
          }
        }
      }
    },
    "/collections/{CollectionId}/analyses/{AnalysisId}/files": {
      "parameters": [
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "CollectionId"
        },
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "AnalysisId"
        }
      ],
      "get": {
        "summary": "Download analysis outputs.",
        "description": "If \"ticket\" query param is included and not empty, download outputs.\nIf \"ticket\" query param is included and empty, create a ticket for all outputs in the anlaysis\nIf no \"ticket\" query param is included, server error 500\n",
        "operationId": "download_collection_analysis_outputs",
        "tags": [
          "collections"
        ],
        "produces": [
          "application/json",
          "application/octet-stream"
        ],
        "parameters": [
          {
            "description": "ticket id of the outputs to download",
            "type": "string",
            "in": "query",
            "name": "ticket"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/analysis-files-create-ticket-output"
            },
            "examples": {
              "response": {
                "ticket": "57f2af23-a94c-426d-8521-11b2e8782020",
                "filename": "exampledicom.zip",
                "file_cnt": 1,
                "size": 4525137
              }
            }
          }
        }
      },
      "post": {
        "summary": "Upload an output file to analysis.",
        "operationId": "upload_output_to_collection_analysis",
        "tags": [
          "collections"
        ],
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "file",
            "in": "formData",
            "type": "file",
            "required": true,
            "description": "The file to upload"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/collections/{CollectionId}/analyses/{AnalysisId}/files/{Filename}": {
      "parameters": [
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "CollectionId"
        },
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "AnalysisId"
        },
        {
          "required": true,
          "type": "string",
          "in": "path",
          "description": "regex to select outputs for download",
          "name": "Filename"
        }
      ],
      "get": {
        "summary": "Download anaylsis outputs with filter.",
        "description": "If \"ticket\" query param is included and not empty, download outputs.\nIf \"ticket\" query param is included and empty, create a ticket for matching outputs in the anlaysis.\nIf no \"ticket\" query param is included, outputs will be downloaded directly.\n",
        "operationId": "download_output_from_collection_analysis",
        "tags": [
          "collections"
        ],
        "produces": [
          "application/json",
          "application/octet-stream"
        ],
        "parameters": [
          {
            "description": "ticket id of the outputs to download",
            "type": "string",
            "in": "query",
            "name": "ticket"
          }
        ],
        "x-sdk-download-ticket": "get_collection_analysis_output_download_ticket",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/analysis-files-create-ticket-output"
            },
            "examples": {
              "response": {
                "ticket": "57f2af23-a94c-426d-8521-11b2e8782020",
                "filename": "exampledicom.zip",
                "file_cnt": 1,
                "size": 4525137
              }
            }
          }
        }
      }
    },
    "/collections/{CollectionId}/analyses/{AnalysisId}/notes": {
      "parameters": [
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "CollectionId"
        },
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "AnalysisId"
        }
      ],
      "post": {
        "summary": "Add a note to collection analysis.",
        "operationId": "add_collection_analysis_note",
        "tags": [
          "collections"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/note-input"
                }
              ],
              "required": [
                "text"
              ],
              "example": {
                "text": "Scitran core!"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200:modified-with-count"
          },
          "400": {
            "$ref": "#/responses/400:invalid-body-json"
          }
        }
      }
    },
    "/collections/{CollectionId}/analyses/{AnalysisId}/notes/{NoteId}": {
      "parameters": [
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "CollectionId"
        },
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "AnalysisId"
        },
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "NoteId"
        }
      ],
      "delete": {
        "summary": "Remove a note from collection analysis.",
        "operationId": "delete_collection_analysis_note",
        "tags": [
          "collections"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200:modified-with-count"
          }
        }
      }
    },
    "/sessions": {
      "get": {
        "summary": "Get a list of sessions",
        "operationId": "get_all_sessions",
        "tags": [
          "sessions"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "allOf": [
                  {
                    "$ref": "#/definitions/session-output"
                  }
                ],
                "required": [
                  "_id",
                  "label",
                  "project",
                  "created",
                  "modified",
                  "permissions",
                  "public",
                  "group",
                  "subject"
                ]
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new session",
        "operationId": "add_session",
        "tags": [
          "sessions"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "title": "Session",
              "allOf": [
                {
                  "$ref": "#/definitions/session-input"
                }
              ],
              "required": [
                "label",
                "project"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/container-new-output"
            }
          },
          "400": {
            "$ref": "#/responses/400:invalid-body-json"
          }
        }
      }
    },
    "/sessions/{SessionId}": {
      "parameters": [
        {
          "in": "path",
          "type": "string",
          "name": "SessionId",
          "required": true
        }
      ],
      "get": {
        "summary": "Get a single session",
        "operationId": "get_session",
        "tags": [
          "sessions"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/session-output"
                }
              ],
              "required": [
                "_id",
                "label",
                "project",
                "created",
                "modified",
                "permissions",
                "public",
                "group",
                "subject"
              ]
            }
          }
        }
      },
      "put": {
        "summary": "Update a session",
        "operationId": "modify_session",
        "tags": [
          "sessions"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "title": "Session",
              "allOf": [
                {
                  "$ref": "#/definitions/session-input"
                }
              ],
              "required": [
                "label",
                "project"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200:modified-with-count"
          },
          "400": {
            "$ref": "#/responses/400:invalid-body-json"
          }
        }
      },
      "delete": {
        "summary": "Delete a session",
        "operationId": "delete_session",
        "description": "Read-write project permissions are required to delete a session. </br>Admin project permissions are required if the session or it's acquisitions contain data uploaded by sources other than users and jobs.",
        "tags": [
          "sessions"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200:deleted-with-count"
          }
        }
      }
    },
    "/sessions/{SessionId}/info": {
      "parameters": [
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "SessionId"
        }
      ],
      "post": {
        "summary": "Update or replace info for a session.",
        "operationId": "modify_session_info",
        "x-sdk-modify-info": true,
        "tags": [
          "sessions"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/info-update-input"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The info was updated successfully"
          }
        }
      }
    },
    "/sessions/{SessionId}/jobs": {
      "parameters": [
        {
          "in": "path",
          "type": "string",
          "name": "SessionId",
          "required": true
        }
      ],
      "get": {
        "summary": "Return any jobs that use inputs from this session",
        "operationId": "get_session_jobs",
        "tags": [
          "sessions"
        ],
        "parameters": [
          {
            "in": "query",
            "type": "string",
            "name": "states",
            "description": "filter results by job state"
          },
          {
            "in": "query",
            "type": "string",
            "name": "tags",
            "description": "filter results by job tags"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/session-jobs-output"
            }
          }
        }
      }
    },
    "/sessions/{SessionId}/tags": {
      "parameters": [
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "SessionId"
        }
      ],
      "post": {
        "summary": "Add a tag to session.",
        "description": "Progates changes to projects, sessions and acquisitions",
        "operationId": "add_session_tag",
        "tags": [
          "sessions"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/tag"
                }
              ],
              "example": {
                "value": "example-tag"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200:modified-with-count"
          },
          "400": {
            "$ref": "#/responses/400:invalid-body-json"
          }
        }
      }
    },
    "/sessions/{SessionId}/tags/{TagValue}": {
      "parameters": [
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "SessionId"
        },
        {
          "required": true,
          "description": "The tag to interact with",
          "type": "string",
          "in": "path",
          "name": "TagValue"
        }
      ],
      "get": {
        "summary": "Get the value of a tag, by name.",
        "operationId": "get_session_tag",
        "tags": [
          "sessions"
        ],
        "responses": {
          "200": {
            "description": "Returns a single tag by name",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/tag"
                }
              ]
            },
            "examples": {
              "response": {
                "value": "example-tag"
              }
            }
          }
        }
      },
      "put": {
        "summary": "Rename a tag.",
        "operationId": "rename_session_tag",
        "tags": [
          "sessions"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/tag"
                }
              ],
              "example": {
                "value": "example-tag"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200:modified-with-count"
          },
          "400": {
            "$ref": "#/responses/400:invalid-body-json"
          }
        }
      },
      "delete": {
        "summary": "Delete a tag",
        "operationId": "delete_session_tag",
        "tags": [
          "sessions"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200:modified-with-count"
          }
        }
      }
    },
    "/sessions/{SessionId}/files": {
      "parameters": [
        {
          "name": "SessionId",
          "in": "path",
          "type": "string",
          "required": true
        }
      ],
      "post": {
        "summary": "Upload a file to session.",
        "operationId": "upload_file_to_session",
        "tags": [
          "sessions"
        ],
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "file",
            "in": "formData",
            "type": "file",
            "required": true,
            "description": "The file to upload"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/sessions/{SessionId}/files/{FileName}": {
      "parameters": [
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "SessionId"
        },
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "FileName"
        }
      ],
      "get": {
        "summary": "Download a file.",
        "description": "Files can be downloaded directly from this endpoint with a valid \"Authorization\" header or via a ticket id.\n\nTo generate a ticket:\n  - Make a request with an empty \"ticket\" parameter and a valid \"Authorization\" header. The server will respond with a generated ticket id.\n  - Make another request with the received ticket id in the \"ticket\" parameter. A valid \"Authorization\" header is no longer required.\n\nWhen \"view\" is true, [RFC7233](https://tools.ietf.org/html/rfc7233) range request headers are supported.\n",
        "operationId": "download_file_from_session",
        "tags": [
          "sessions"
        ],
        "produces": [
          "application/json",
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "ticket",
            "in": "query",
            "type": "string",
            "description": "The generated ticket id for the download, or present but empty to generate a ticket id"
          },
          {
            "name": "view",
            "in": "query",
            "type": "boolean",
            "default": false,
            "description": "If true, the proper \"Content-Type\" header based on the file's mimetype is set on response\nIf false, the \"Content-Type\" header is set to \"application/octet-stream\"\n"
          },
          {
            "name": "info",
            "in": "query",
            "type": "boolean",
            "default": false,
            "description": "If the file is a zipfile, return a json response of zipfile member information"
          },
          {
            "name": "member",
            "in": "query",
            "type": "string",
            "description": "The filename of a zipfile member to download rather than the entire file"
          }
        ],
        "x-sdk-download-ticket": "get_session_download_ticket",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/download-ticket"
            },
            "examples": {
              "response": {
                "ticket": "1e975e3d-21e9-41f4-bb97-261f03d35ba1"
              }
            }
          }
        }
      },
      "post": {
        "summary": "Replace a file",
        "operationId": "replace_session_file",
        "tags": [
          "sessions"
        ],
        "responses": {
          "default": {
            "description": ""
          }
        }
      },
      "delete": {
        "summary": "Delete a file",
        "description": "A user with read-write or higher permissions on the container may delete files\nthat were uploaded by users or were the output of jobs. (Specifically, files\nwhose `origin.type` is either `job` or `user`.)\n<br/>\nA user with admin permissions on the container may delete any file.\n",
        "operationId": "delete_session_file",
        "tags": [
          "sessions"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200:modified-with-count"
          }
        }
      },
      "put": {
        "summary": "Modify a file's attributes",
        "description": "Note: If modifying a file's modality, the current classification will be cleared (except for items in the \"Custom\" list)\n",
        "operationId": "modify_session_file",
        "tags": [
          "sessions"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/file-update"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200:modified-with-count-and-jobs"
          }
        }
      }
    },
    "/sessions/{SessionId}/files/{FileName}/info": {
      "parameters": [
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "SessionId"
        },
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "FileName"
        }
      ],
      "get": {
        "summary": "Get info for a particular file.",
        "operationId": "get_session_file_info",
        "tags": [
          "sessions"
        ],
        "responses": {
          "200": {
            "description": "The file object, including info",
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/file-output"
                }
              ],
              "example": {
                "origin": {
                  "type": "job",
                  "id": "58063f24e5dc5b001657a87f"
                },
                "mimetype": "application/octet-stream",
                "hash": "v0-sha384-12188e00a26650b2baa3f0195337dcf504f4362bb2136eef0cdbefb57159356b1355a0402fca0ab5ab081f21c305e5c2",
                "name": "cortical_surface_right_hemisphere.obj",
                "tags": [],
                "classification": {},
                "modified": "2016-10-18T15:26:35.701000+00:00",
                "modality": null,
                "size": 21804112,
                "type": "None",
                "info": {}
              }
            }
          }
        }
      },
      "post": {
        "summary": "Update info for a particular file.",
        "operationId": "modify_session_file_info",
        "x-sdk-modify-info": true,
        "tags": [
          "sessions"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/info-update-input"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200:modified-with-count"
          }
        }
      }
    },
    "/sessions/{SessionId}/files/{FileName}/classification": {
      "parameters": [
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "SessionId"
        },
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "FileName"
        }
      ],
      "post": {
        "summary": "Update classification for a particular file.",
        "description": "If replacing a file's classification, the modality can optionally be modified as well.",
        "operationId": "modify_session_file_classification",
        "x-sdk-modify-classification": true,
        "tags": [
          "sessions"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/classification-update-input"
                }
              ],
              "example": {
                "modality": "MR",
                "replace": {
                  "Intent": [
                    "Functional"
                  ],
                  "Measurement": [
                    "T2*"
                  ],
                  "Custom": [
                    "Custom Value"
                  ]
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200:modified-with-count-and-jobs"
          }
        }
      }
    },
    "/sessions/{SessionId}/notes": {
      "parameters": [
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "SessionId"
        }
      ],
      "post": {
        "summary": "Add a note to session.",
        "operationId": "add_session_note",
        "tags": [
          "sessions"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/note-input"
                }
              ],
              "required": [
                "text"
              ],
              "example": {
                "text": "Scitran core!"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200:modified-with-count"
          },
          "400": {
            "$ref": "#/responses/400:invalid-body-json"
          }
        }
      }
    },
    "/sessions/{SessionId}/notes/{NoteId}": {
      "parameters": [
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "SessionId"
        },
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "NoteId"
        }
      ],
      "get": {
        "summary": "Get a note on session.",
        "operationId": "get_session_note",
        "tags": [
          "sessions"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/note-output"
                }
              ]
            },
            "examples": {
              "response": {
                "_id": "580925ce9e512c57dc8a103b",
                "text": "some text",
                "created": "2016-10-21T17:19:40.899000+00:00",
                "modified": "2016-10-21T17:19:40.899000+00:00",
                "user": "coltonlw@flywheel.io"
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update a note on session.",
        "operationId": "modify_session_note",
        "tags": [
          "sessions"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/note-input"
                }
              ],
              "required": [
                "text"
              ],
              "example": {
                "text": "Scitran core!"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200:modified-with-count"
          },
          "400": {
            "$ref": "#/responses/400:invalid-body-json"
          }
        }
      },
      "delete": {
        "summary": "Remove a note from session",
        "operationId": "delete_session_note",
        "tags": [
          "sessions"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200:modified-with-count"
          }
        }
      }
    },
    "/sessions/{SessionId}/acquisitions": {
      "parameters": [
        {
          "in": "path",
          "type": "string",
          "name": "SessionId",
          "required": true
        }
      ],
      "get": {
        "summary": "List acquisitions in a session",
        "operationId": "get_session_acquisitions",
        "tags": [
          "sessions"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/definitions/acquisition-output"
                  }
                ],
                "required": [
                  "_id",
                  "public",
                  "label",
                  "session",
                  "created",
                  "modified",
                  "permissions"
                ]
              }
            }
          }
        }
      }
    },
    "/sessions/{SessionId}/analyses": {
      "parameters": [
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "SessionId"
        }
      ],
      "get": {
        "summary": "Get analyses for session.",
        "description": "Returns analyses that directly belong to this resource.",
        "operationId": "get_session_analyses",
        "tags": [
          "sessions"
        ],
        "responses": {
          "200": {
            "description": "The list of analyses",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/analysis-list-entry"
              },
              "example": [
                {
                  "files": [
                    {
                      "origin": {
                        "type": "job",
                        "id": "58063f24e5dc5b001657a87f"
                      },
                      "mimetype": "application/octet-stream",
                      "hash": "v0-sha384-12188e00a26650b2baa3f0195337dcf504f4362bb2136eef0cdbefb57159356b1355a0402fca0ab5ab081f21c305e5c2",
                      "name": "cortical_surface_right_hemisphere.obj",
                      "tags": [],
                      "classification": {},
                      "modified": "2016-10-18T15:26:35.701000+00:00",
                      "modality": null,
                      "size": 21804112,
                      "type": "None",
                      "info": {}
                    }
                  ],
                  "created": "2016-10-18T17:45:11.778000+00:00",
                  "modified": "2016-10-18T17:45:11.778000+00:00",
                  "label": "cortex-demo 10/18/2016 13:45:5",
                  "job": "58065fa7e5dc5b001457a882",
                  "user": "canakgun@flywheel.io",
                  "_id": "58065fa7e5dc5b001457a881"
                }
              ]
            }
          }
        }
      },
      "post": {
        "summary": "Create an analysis and upload files.",
        "description": "When query param \"job\" is \"true\", send JSON to create\nan analysis and job.  Otherwise, multipart/form-data\nto upload files and create an analysis.\n",
        "operationId": "add_session_analysis",
        "tags": [
          "sessions"
        ],
        "consumes": [
          "application/json",
          "multipart/form-data"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "title": "Analysis",
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/analysis-input-any"
                }
              ],
              "required": [
                "label"
              ]
            }
          },
          {
            "name": "job",
            "in": "query",
            "type": "boolean",
            "description": "Return job as an object instead of an id",
            "x-sdk-default": "true"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the id of the analysis that was created.",
            "schema": {
              "$ref": "#/definitions/container-new-output"
            }
          }
        }
      }
    },
    "/sessions/{SessionId}/analyses/{AnalysisId}": {
      "parameters": [
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "SessionId"
        },
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "AnalysisId"
        }
      ],
      "get": {
        "summary": "Get an analysis.",
        "operationId": "get_session_analysis",
        "tags": [
          "sessions"
        ],
        "parameters": [
          {
            "name": "inflate_job",
            "in": "query",
            "type": "boolean",
            "description": "Return job as an object instead of an id",
            "x-sdk-default": "true"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/analysis-output"
                }
              ]
            },
            "examples": {
              "response": {
                "inputs": [
                  {
                    "origin": {
                      "type": "job",
                      "id": "58063f24e5dc5b001657a87f"
                    },
                    "_id": "50708f69-7549-4331-bac0-b4779e5c9ca1",
                    "mimetype": "application/octet-stream",
                    "hash": "v0-sha384-12188e00a26650b2baa3f0195337dcf504f4362bb2136eef0cdbefb57159356b1355a0402fca0ab5ab081f21c305e5c2",
                    "name": "cortical_surface_right_hemisphere.obj",
                    "tags": [],
                    "classification": {},
                    "modified": "2016-10-18T15:26:35.701000+00:00",
                    "modality": null,
                    "size": 21804112,
                    "type": "None",
                    "info": {}
                  }
                ],
                "files": [
                  {
                    "origin": {
                      "type": "job",
                      "id": "58065fa7e5dc5b001457a882"
                    },
                    "_id": "50708f69-7549-4331-bac0-b4779e5c9ca1",
                    "mimetype": "application/octet-stream",
                    "hash": "v0-sha384-12188e00a26650b2baa3f0195337dcf504f4362bb2136eef0cdbefb57159356b1355a0402fca0ab5ab081f21c305e5c2",
                    "name": "cortical_surface_right_hemisphere.obj",
                    "tags": [],
                    "classification": {},
                    "modified": "2016-10-18T17:45:17.776000+00:00",
                    "modality": null,
                    "info": {},
                    "type": "None",
                    "size": 21804112
                  }
                ],
                "created": "2016-10-18T17:45:11.778000+00:00",
                "modified": "2016-10-18T17:45:11.778000+00:00",
                "label": "cortex-demo 10/18/2016 13:45:5",
                "job": {
                  "inputs": {
                    "anatomy": {
                      "type": "analysis",
                      "id": "58063f24e5dc5b001657a87e",
                      "name": "cortical_surface_right_hemisphere.obj"
                    }
                  },
                  "attempt": 1,
                  "tags": [
                    "ad-hoc",
                    "cortex-demo",
                    "analysis"
                  ],
                  "destination": {
                    "type": "analysis",
                    "id": "58065fa7e5dc5b001457a881"
                  },
                  "request": {
                    "inputs": [
                      {
                        "location": "/",
                        "type": "http",
                        "uri": "https://storage.googleapis.com/flywheel/gears/v1/scitran/cortex-demo/cortex-demo_manifest-labels_20160725T031837.331720Z.tar.gz",
                        "vu": "vu0:sha384:ssx5VWyFg7r8IBoOIphq7GaB_CymInQ1NxTV2WTDzglJLJ1-ktEbjLIHVABRzesV"
                      },
                      {
                        "type": "scitran",
                        "uri": "/jobs/58065fa7e5dc5b001457a882/config.json",
                        "location": "/flywheel/v0"
                      },
                      {
                        "type": "scitran",
                        "uri": "/sessions/58063e7ed213ed776045b320/analyses/58063f24e5dc5b001657a87e/files/cortical_surface_right_hemisphere.obj",
                        "location": "/flywheel/v0/input/anatomy"
                      }
                    ],
                    "target": {
                      "command": [
                        "bash",
                        "-c",
                        "rm -rf output; mkdir -p output; ./run; echo \"Exit was $?\""
                      ],
                      "env": {
                        "PATH": "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
                      },
                      "dir": "/flywheel/v0"
                    },
                    "outputs": [
                      {
                        "type": "scitran",
                        "uri": "/engine?level=analysis&id=58065fa7e5dc5b001457a881&job=58065fa7e5dc5b001457a882",
                        "location": "/flywheel/v0/output"
                      }
                    ]
                  },
                  "modified": "2016-10-18T17:45:21.344000+00:00",
                  "created": "2016-10-18T17:45:11.816000+00:00",
                  "state": "complete",
                  "config": {},
                  "id": "58065fa7e5dc5b001457a882",
                  "gear_id": "58065fa7e5dc5b001457a882"
                },
                "_id": "58065fa7e5dc5b001457a881"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete an anaylsis",
        "operationId": "delete_session_analysis",
        "tags": [
          "sessions"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200:deleted-with-count"
          }
        }
      }
    },
    "/sessions/{SessionId}/analyses/{AnalysisId}/inputs": {
      "parameters": [
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "SessionId"
        },
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "AnalysisId"
        }
      ],
      "get": {
        "summary": "Download analysis inputs.",
        "description": "If \"ticket\" query param is included and not empty, download inputs.\nIf \"ticket\" query param is included and empty, create a ticket for all inputs in the anlaysis\nIf no \"ticket\" query param is included, server error 500\n",
        "operationId": "download_session_analysis_inputs",
        "tags": [
          "sessions"
        ],
        "produces": [
          "application/json",
          "application/octet-stream"
        ],
        "parameters": [
          {
            "description": "ticket id of the inputs to download",
            "type": "string",
            "in": "query",
            "name": "ticket"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/analysis-files-create-ticket-output"
            },
            "examples": {
              "response": {
                "ticket": "57f2af23-a94c-426d-8521-11b2e8782020",
                "filename": "exampledicom.zip",
                "file_cnt": 1,
                "size": 4525137
              }
            }
          }
        }
      }
    },
    "/sessions/{SessionId}/analyses/{AnalysisId}/inputs/{Filename}": {
      "parameters": [
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "SessionId"
        },
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "AnalysisId"
        },
        {
          "required": true,
          "type": "string",
          "in": "path",
          "description": "regex to select inputs for download",
          "name": "Filename"
        }
      ],
      "get": {
        "summary": "Download anaylsis inputs with filter.",
        "description": "If \"ticket\" query param is included and not empty, download inputs.\nIf \"ticket\" query param is included and empty, create a ticket for matching inputs in the anlaysis.\nIf no \"ticket\" query param is included, inputs will be downloaded directly.\n",
        "operationId": "download_input_from_session_analysis",
        "tags": [
          "sessions"
        ],
        "produces": [
          "application/json",
          "application/octet-stream"
        ],
        "parameters": [
          {
            "description": "ticket id of the inputs to download",
            "type": "string",
            "in": "query",
            "name": "ticket"
          }
        ],
        "x-sdk-download-ticket": "get_session_analysis_input_download_ticket",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/analysis-files-create-ticket-output"
            },
            "examples": {
              "response": {
                "ticket": "57f2af23-a94c-426d-8521-11b2e8782020",
                "filename": "exampledicom.zip",
                "file_cnt": 1,
                "size": 4525137
              }
            }
          }
        }
      }
    },
    "/sessions/{SessionId}/analyses/{AnalysisId}/files": {
      "parameters": [
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "SessionId"
        },
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "AnalysisId"
        }
      ],
      "get": {
        "summary": "Download analysis outputs.",
        "description": "If \"ticket\" query param is included and not empty, download outputs.\nIf \"ticket\" query param is included and empty, create a ticket for all outputs in the anlaysis\nIf no \"ticket\" query param is included, server error 500\n",
        "operationId": "download_session_analysis_outputs",
        "tags": [
          "sessions"
        ],
        "produces": [
          "application/json",
          "application/octet-stream"
        ],
        "parameters": [
          {
            "description": "ticket id of the outputs to download",
            "type": "string",
            "in": "query",
            "name": "ticket"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/analysis-files-create-ticket-output"
            },
            "examples": {
              "response": {
                "ticket": "57f2af23-a94c-426d-8521-11b2e8782020",
                "filename": "exampledicom.zip",
                "file_cnt": 1,
                "size": 4525137
              }
            }
          }
        }
      },
      "post": {
        "summary": "Upload an output file to analysis.",
        "operationId": "upload_output_to_session_analysis",
        "tags": [
          "sessions"
        ],
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "file",
            "in": "formData",
            "type": "file",
            "required": true,
            "description": "The file to upload"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/sessions/{SessionId}/analyses/{AnalysisId}/files/{Filename}": {
      "parameters": [
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "SessionId"
        },
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "AnalysisId"
        },
        {
          "required": true,
          "type": "string",
          "in": "path",
          "description": "regex to select outputs for download",
          "name": "Filename"
        }
      ],
      "get": {
        "summary": "Download anaylsis outputs with filter.",
        "description": "If \"ticket\" query param is included and not empty, download outputs.\nIf \"ticket\" query param is included and empty, create a ticket for matching outputs in the anlaysis.\nIf no \"ticket\" query param is included, outputs will be downloaded directly.\n",
        "operationId": "download_output_from_session_analysis",
        "tags": [
          "sessions"
        ],
        "produces": [
          "application/json",
          "application/octet-stream"
        ],
        "parameters": [
          {
            "description": "ticket id of the outputs to download",
            "type": "string",
            "in": "query",
            "name": "ticket"
          }
        ],
        "x-sdk-download-ticket": "get_session_analysis_output_download_ticket",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/analysis-files-create-ticket-output"
            },
            "examples": {
              "response": {
                "ticket": "57f2af23-a94c-426d-8521-11b2e8782020",
                "filename": "exampledicom.zip",
                "file_cnt": 1,
                "size": 4525137
              }
            }
          }
        }
      }
    },
    "/sessions/{SessionId}/analyses/{AnalysisId}/notes": {
      "parameters": [
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "SessionId"
        },
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "AnalysisId"
        }
      ],
      "post": {
        "summary": "Add a note to session analysis.",
        "operationId": "add_session_analysis_note",
        "tags": [
          "sessions"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/note-input"
                }
              ],
              "required": [
                "text"
              ],
              "example": {
                "text": "Scitran core!"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200:modified-with-count"
          },
          "400": {
            "$ref": "#/responses/400:invalid-body-json"
          }
        }
      }
    },
    "/sessions/{SessionId}/analyses/{AnalysisId}/notes/{NoteId}": {
      "parameters": [
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "SessionId"
        },
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "AnalysisId"
        },
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "NoteId"
        }
      ],
      "delete": {
        "summary": "Remove a note from session analysis.",
        "operationId": "delete_session_analysis_note",
        "tags": [
          "sessions"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200:modified-with-count"
          }
        }
      }
    },
    "/acquisitions": {
      "get": {
        "summary": "Get a list of acquisitions",
        "operationId": "get_all_acquisitions",
        "tags": [
          "acquisitions"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/definitions/acquisition-output"
                  }
                ],
                "required": [
                  "_id",
                  "public",
                  "label",
                  "session",
                  "created",
                  "modified",
                  "permissions"
                ]
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new acquisition",
        "operationId": "add_acquisition",
        "tags": [
          "acquisitions"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "title": "Acquisition",
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/acquisition-input"
                }
              ],
              "required": [
                "label",
                "session"
              ],
              "example": {
                "label": "example-acquisition",
                "session": "57e45328466d8e000e33a85b",
                "public": false
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/container-new-output"
            }
          },
          "400": {
            "$ref": "#/responses/400:invalid-body-json"
          }
        }
      }
    },
    "/acquisitions/{AcquisitionId}": {
      "parameters": [
        {
          "in": "path",
          "type": "string",
          "name": "AcquisitionId",
          "required": true
        }
      ],
      "get": {
        "summary": "Get a single acquisition",
        "operationId": "get_acquisition",
        "tags": [
          "acquisitions"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/acquisition-output"
                }
              ],
              "required": [
                "_id",
                "public",
                "label",
                "session",
                "created",
                "modified",
                "permissions"
              ]
            }
          }
        }
      },
      "put": {
        "summary": "Update a acquisition",
        "operationId": "modify_acquisition",
        "tags": [
          "acquisitions"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "title": "Acquisition",
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/acquisition-input"
                }
              ],
              "example": {
                "label": "example-acquisition-new-label"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200:modified-with-count"
          },
          "400": {
            "$ref": "#/responses/400:invalid-body-json"
          }
        }
      },
      "delete": {
        "summary": "Delete a acquisition",
        "operationId": "delete_acquisition",
        "description": "Read-write project permissions are required to delete an acquisition. </br>Admin project permissions are required if the acquisition contains data uploaded by sources other than users and jobs.",
        "tags": [
          "acquisitions"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200:deleted-with-count"
          }
        }
      }
    },
    "/acquisitions/{AcquisitionId}/info": {
      "parameters": [
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "AcquisitionId"
        }
      ],
      "post": {
        "summary": "Update or replace info for a acquisition.",
        "operationId": "modify_acquisition_info",
        "x-sdk-modify-info": true,
        "tags": [
          "acquisitions"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/info-update-input"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The info was updated successfully"
          }
        }
      }
    },
    "/acquisitions/{AcquisitionId}/tags": {
      "parameters": [
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "AcquisitionId"
        }
      ],
      "post": {
        "summary": "Add a tag to acquisition.",
        "description": "Progates changes to projects, sessions and acquisitions",
        "operationId": "add_acquisition_tag",
        "tags": [
          "acquisitions"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/tag"
                }
              ],
              "example": {
                "value": "example-tag"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200:modified-with-count"
          },
          "400": {
            "$ref": "#/responses/400:invalid-body-json"
          }
        }
      }
    },
    "/acquisitions/{AcquisitionId}/tags/{TagValue}": {
      "parameters": [
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "AcquisitionId"
        },
        {
          "required": true,
          "description": "The tag to interact with",
          "type": "string",
          "in": "path",
          "name": "TagValue"
        }
      ],
      "get": {
        "summary": "Get the value of a tag, by name.",
        "operationId": "get_acquisition_tag",
        "tags": [
          "acquisitions"
        ],
        "responses": {
          "200": {
            "description": "Returns a single tag by name",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/tag"
                }
              ]
            },
            "examples": {
              "response": {
                "value": "example-tag"
              }
            }
          }
        }
      },
      "put": {
        "summary": "Rename a tag.",
        "operationId": "rename_acquisition_tag",
        "tags": [
          "acquisitions"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/tag"
                }
              ],
              "example": {
                "value": "example-tag"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200:modified-with-count"
          },
          "400": {
            "$ref": "#/responses/400:invalid-body-json"
          }
        }
      },
      "delete": {
        "summary": "Delete a tag",
        "operationId": "delete_acquisition_tag",
        "tags": [
          "acquisitions"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200:modified-with-count"
          }
        }
      }
    },
    "/acquisitions/{AcquisitionId}/files": {
      "parameters": [
        {
          "name": "AcquisitionId",
          "in": "path",
          "type": "string",
          "required": true
        }
      ],
      "post": {
        "summary": "Upload a file to acquisition.",
        "operationId": "upload_file_to_acquisition",
        "tags": [
          "acquisitions"
        ],
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "file",
            "in": "formData",
            "type": "file",
            "required": true,
            "description": "The file to upload"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/acquisitions/{AcquisitionId}/files/{FileName}": {
      "parameters": [
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "AcquisitionId"
        },
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "FileName"
        }
      ],
      "get": {
        "summary": "Download a file.",
        "description": "Files can be downloaded directly from this endpoint with a valid \"Authorization\" header or via a ticket id.\n\nTo generate a ticket:\n  - Make a request with an empty \"ticket\" parameter and a valid \"Authorization\" header. The server will respond with a generated ticket id.\n  - Make another request with the received ticket id in the \"ticket\" parameter. A valid \"Authorization\" header is no longer required.\n\nWhen \"view\" is true, [RFC7233](https://tools.ietf.org/html/rfc7233) range request headers are supported.\n",
        "operationId": "download_file_from_acquisition",
        "tags": [
          "acquisitions"
        ],
        "produces": [
          "application/json",
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "ticket",
            "in": "query",
            "type": "string",
            "description": "The generated ticket id for the download, or present but empty to generate a ticket id"
          },
          {
            "name": "view",
            "in": "query",
            "type": "boolean",
            "default": false,
            "description": "If true, the proper \"Content-Type\" header based on the file's mimetype is set on response\nIf false, the \"Content-Type\" header is set to \"application/octet-stream\"\n"
          },
          {
            "name": "info",
            "in": "query",
            "type": "boolean",
            "default": false,
            "description": "If the file is a zipfile, return a json response of zipfile member information"
          },
          {
            "name": "member",
            "in": "query",
            "type": "string",
            "description": "The filename of a zipfile member to download rather than the entire file"
          }
        ],
        "x-sdk-download-ticket": "get_acquisition_download_ticket",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/download-ticket"
            },
            "examples": {
              "response": {
                "ticket": "1e975e3d-21e9-41f4-bb97-261f03d35ba1"
              }
            }
          }
        }
      },
      "post": {
        "summary": "Replace a file",
        "operationId": "replace_acquisition_file",
        "tags": [
          "acquisitions"
        ],
        "responses": {
          "default": {
            "description": ""
          }
        }
      },
      "delete": {
        "summary": "Delete a file",
        "description": "A user with read-write or higher permissions on the container may delete files\nthat were uploaded by users or were the output of jobs. (Specifically, files\nwhose `origin.type` is either `job` or `user`.)\n<br/>\nA user with admin permissions on the container may delete any file.\n",
        "operationId": "delete_acquisition_file",
        "tags": [
          "acquisitions"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200:modified-with-count"
          }
        }
      },
      "put": {
        "summary": "Modify a file's attributes",
        "description": "Note: If modifying a file's modality, the current classification will be cleared (except for items in the \"Custom\" list)\n",
        "operationId": "modify_acquisition_file",
        "tags": [
          "acquisitions"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/file-update"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200:modified-with-count-and-jobs"
          }
        }
      }
    },
    "/acquisitions/{AcquisitionId}/files/{FileName}/info": {
      "parameters": [
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "AcquisitionId"
        },
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "FileName"
        }
      ],
      "get": {
        "summary": "Get info for a particular file.",
        "operationId": "get_acquisition_file_info",
        "tags": [
          "acquisitions"
        ],
        "responses": {
          "200": {
            "description": "The file object, including info",
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/file-output"
                }
              ],
              "example": {
                "origin": {
                  "type": "job",
                  "id": "58063f24e5dc5b001657a87f"
                },
                "mimetype": "application/octet-stream",
                "hash": "v0-sha384-12188e00a26650b2baa3f0195337dcf504f4362bb2136eef0cdbefb57159356b1355a0402fca0ab5ab081f21c305e5c2",
                "name": "cortical_surface_right_hemisphere.obj",
                "tags": [],
                "classification": {},
                "modified": "2016-10-18T15:26:35.701000+00:00",
                "modality": null,
                "size": 21804112,
                "type": "None",
                "info": {}
              }
            }
          }
        }
      },
      "post": {
        "summary": "Update info for a particular file.",
        "operationId": "modify_acquisition_file_info",
        "x-sdk-modify-info": true,
        "tags": [
          "acquisitions"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/info-update-input"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200:modified-with-count"
          }
        }
      }
    },
    "/acquisitions/{AcquisitionId}/files/{FileName}/classification": {
      "parameters": [
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "AcquisitionId"
        },
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "FileName"
        }
      ],
      "post": {
        "summary": "Update classification for a particular file.",
        "description": "If replacing a file's classification, the modality can optionally be modified as well.",
        "operationId": "modify_acquisition_file_classification",
        "x-sdk-modify-classification": true,
        "tags": [
          "acquisitions"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/classification-update-input"
                }
              ],
              "example": {
                "modality": "MR",
                "replace": {
                  "Intent": [
                    "Functional"
                  ],
                  "Measurement": [
                    "T2*"
                  ],
                  "Custom": [
                    "Custom Value"
                  ]
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200:modified-with-count-and-jobs"
          }
        }
      }
    },
    "/acquisitions/{AcquisitionId}/notes": {
      "parameters": [
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "AcquisitionId"
        }
      ],
      "post": {
        "summary": "Add a note to acquisition.",
        "operationId": "add_acquisition_note",
        "tags": [
          "acquisitions"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/note-input"
                }
              ],
              "required": [
                "text"
              ],
              "example": {
                "text": "Scitran core!"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200:modified-with-count"
          },
          "400": {
            "$ref": "#/responses/400:invalid-body-json"
          }
        }
      }
    },
    "/acquisitions/{AcquisitionId}/notes/{NoteId}": {
      "parameters": [
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "AcquisitionId"
        },
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "NoteId"
        }
      ],
      "get": {
        "summary": "Get a note on acquisition.",
        "operationId": "get_acquisition_note",
        "tags": [
          "acquisitions"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/note-output"
                }
              ]
            },
            "examples": {
              "response": {
                "_id": "580925ce9e512c57dc8a103b",
                "text": "some text",
                "created": "2016-10-21T17:19:40.899000+00:00",
                "modified": "2016-10-21T17:19:40.899000+00:00",
                "user": "coltonlw@flywheel.io"
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update a note on acquisition.",
        "operationId": "modify_acquisition_note",
        "tags": [
          "acquisitions"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/note-input"
                }
              ],
              "required": [
                "text"
              ],
              "example": {
                "text": "Scitran core!"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200:modified-with-count"
          },
          "400": {
            "$ref": "#/responses/400:invalid-body-json"
          }
        }
      },
      "delete": {
        "summary": "Remove a note from acquisition",
        "operationId": "delete_acquisition_note",
        "tags": [
          "acquisitions"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200:modified-with-count"
          }
        }
      }
    },
    "/acquisitions/{AcquisitionId}/analyses": {
      "parameters": [
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "AcquisitionId"
        }
      ],
      "get": {
        "summary": "Get analyses for acquisition.",
        "description": "Returns analyses that directly belong to this resource.",
        "operationId": "get_acquisition_analyses",
        "tags": [
          "acquisitions"
        ],
        "responses": {
          "200": {
            "description": "The list of analyses",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/analysis-list-entry"
              },
              "example": [
                {
                  "files": [
                    {
                      "origin": {
                        "type": "job",
                        "id": "58063f24e5dc5b001657a87f"
                      },
                      "mimetype": "application/octet-stream",
                      "hash": "v0-sha384-12188e00a26650b2baa3f0195337dcf504f4362bb2136eef0cdbefb57159356b1355a0402fca0ab5ab081f21c305e5c2",
                      "name": "cortical_surface_right_hemisphere.obj",
                      "tags": [],
                      "classification": {},
                      "modified": "2016-10-18T15:26:35.701000+00:00",
                      "modality": null,
                      "size": 21804112,
                      "type": "None",
                      "info": {}
                    }
                  ],
                  "created": "2016-10-18T17:45:11.778000+00:00",
                  "modified": "2016-10-18T17:45:11.778000+00:00",
                  "label": "cortex-demo 10/18/2016 13:45:5",
                  "job": "58065fa7e5dc5b001457a882",
                  "user": "canakgun@flywheel.io",
                  "_id": "58065fa7e5dc5b001457a881"
                }
              ]
            }
          }
        }
      },
      "post": {
        "summary": "Create an analysis and upload files.",
        "description": "When query param \"job\" is \"true\", send JSON to create\nan analysis and job.  Otherwise, multipart/form-data\nto upload files and create an analysis.\n",
        "operationId": "add_acquisition_analysis",
        "tags": [
          "acquisitions"
        ],
        "consumes": [
          "application/json",
          "multipart/form-data"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "title": "Analysis",
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/analysis-input-any"
                }
              ],
              "required": [
                "label"
              ]
            }
          },
          {
            "name": "job",
            "in": "query",
            "type": "boolean",
            "description": "Return job as an object instead of an id",
            "x-sdk-default": "true"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the id of the analysis that was created.",
            "schema": {
              "$ref": "#/definitions/container-new-output"
            }
          }
        }
      }
    },
    "/acquisitions/{AcquisitionId}/analyses/{AnalysisId}": {
      "parameters": [
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "AcquisitionId"
        },
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "AnalysisId"
        }
      ],
      "get": {
        "summary": "Get an analysis.",
        "operationId": "get_acquisition_analysis",
        "tags": [
          "acquisitions"
        ],
        "parameters": [
          {
            "name": "inflate_job",
            "in": "query",
            "type": "boolean",
            "description": "Return job as an object instead of an id",
            "x-sdk-default": "true"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/analysis-output"
                }
              ]
            },
            "examples": {
              "response": {
                "inputs": [
                  {
                    "origin": {
                      "type": "job",
                      "id": "58063f24e5dc5b001657a87f"
                    },
                    "_id": "50708f69-7549-4331-bac0-b4779e5c9ca1",
                    "mimetype": "application/octet-stream",
                    "hash": "v0-sha384-12188e00a26650b2baa3f0195337dcf504f4362bb2136eef0cdbefb57159356b1355a0402fca0ab5ab081f21c305e5c2",
                    "name": "cortical_surface_right_hemisphere.obj",
                    "tags": [],
                    "classification": {},
                    "modified": "2016-10-18T15:26:35.701000+00:00",
                    "modality": null,
                    "size": 21804112,
                    "type": "None",
                    "info": {}
                  }
                ],
                "files": [
                  {
                    "origin": {
                      "type": "job",
                      "id": "58065fa7e5dc5b001457a882"
                    },
                    "_id": "50708f69-7549-4331-bac0-b4779e5c9ca1",
                    "mimetype": "application/octet-stream",
                    "hash": "v0-sha384-12188e00a26650b2baa3f0195337dcf504f4362bb2136eef0cdbefb57159356b1355a0402fca0ab5ab081f21c305e5c2",
                    "name": "cortical_surface_right_hemisphere.obj",
                    "tags": [],
                    "classification": {},
                    "modified": "2016-10-18T17:45:17.776000+00:00",
                    "modality": null,
                    "info": {},
                    "type": "None",
                    "size": 21804112
                  }
                ],
                "created": "2016-10-18T17:45:11.778000+00:00",
                "modified": "2016-10-18T17:45:11.778000+00:00",
                "label": "cortex-demo 10/18/2016 13:45:5",
                "job": {
                  "inputs": {
                    "anatomy": {
                      "type": "analysis",
                      "id": "58063f24e5dc5b001657a87e",
                      "name": "cortical_surface_right_hemisphere.obj"
                    }
                  },
                  "attempt": 1,
                  "tags": [
                    "ad-hoc",
                    "cortex-demo",
                    "analysis"
                  ],
                  "destination": {
                    "type": "analysis",
                    "id": "58065fa7e5dc5b001457a881"
                  },
                  "request": {
                    "inputs": [
                      {
                        "location": "/",
                        "type": "http",
                        "uri": "https://storage.googleapis.com/flywheel/gears/v1/scitran/cortex-demo/cortex-demo_manifest-labels_20160725T031837.331720Z.tar.gz",
                        "vu": "vu0:sha384:ssx5VWyFg7r8IBoOIphq7GaB_CymInQ1NxTV2WTDzglJLJ1-ktEbjLIHVABRzesV"
                      },
                      {
                        "type": "scitran",
                        "uri": "/jobs/58065fa7e5dc5b001457a882/config.json",
                        "location": "/flywheel/v0"
                      },
                      {
                        "type": "scitran",
                        "uri": "/sessions/58063e7ed213ed776045b320/analyses/58063f24e5dc5b001657a87e/files/cortical_surface_right_hemisphere.obj",
                        "location": "/flywheel/v0/input/anatomy"
                      }
                    ],
                    "target": {
                      "command": [
                        "bash",
                        "-c",
                        "rm -rf output; mkdir -p output; ./run; echo \"Exit was $?\""
                      ],
                      "env": {
                        "PATH": "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
                      },
                      "dir": "/flywheel/v0"
                    },
                    "outputs": [
                      {
                        "type": "scitran",
                        "uri": "/engine?level=analysis&id=58065fa7e5dc5b001457a881&job=58065fa7e5dc5b001457a882",
                        "location": "/flywheel/v0/output"
                      }
                    ]
                  },
                  "modified": "2016-10-18T17:45:21.344000+00:00",
                  "created": "2016-10-18T17:45:11.816000+00:00",
                  "state": "complete",
                  "config": {},
                  "id": "58065fa7e5dc5b001457a882",
                  "gear_id": "58065fa7e5dc5b001457a882"
                },
                "_id": "58065fa7e5dc5b001457a881"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete an anaylsis",
        "operationId": "delete_acquisition_analysis",
        "tags": [
          "acquisitions"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200:deleted-with-count"
          }
        }
      }
    },
    "/acquisitions/{AcquisitionId}/analyses/{AnalysisId}/inputs": {
      "parameters": [
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "AcquisitionId"
        },
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "AnalysisId"
        }
      ],
      "get": {
        "summary": "Download analysis inputs.",
        "description": "If \"ticket\" query param is included and not empty, download inputs.\nIf \"ticket\" query param is included and empty, create a ticket for all inputs in the anlaysis\nIf no \"ticket\" query param is included, server error 500\n",
        "operationId": "download_acquisition_analysis_inputs",
        "tags": [
          "acquisitions"
        ],
        "produces": [
          "application/json",
          "application/octet-stream"
        ],
        "parameters": [
          {
            "description": "ticket id of the inputs to download",
            "type": "string",
            "in": "query",
            "name": "ticket"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/analysis-files-create-ticket-output"
            },
            "examples": {
              "response": {
                "ticket": "57f2af23-a94c-426d-8521-11b2e8782020",
                "filename": "exampledicom.zip",
                "file_cnt": 1,
                "size": 4525137
              }
            }
          }
        }
      }
    },
    "/acquisitions/{AcquisitionId}/analyses/{AnalysisId}/inputs/{Filename}": {
      "parameters": [
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "AcquisitionId"
        },
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "AnalysisId"
        },
        {
          "required": true,
          "type": "string",
          "in": "path",
          "description": "regex to select inputs for download",
          "name": "Filename"
        }
      ],
      "get": {
        "summary": "Download anaylsis inputs with filter.",
        "description": "If \"ticket\" query param is included and not empty, download inputs.\nIf \"ticket\" query param is included and empty, create a ticket for matching inputs in the anlaysis.\nIf no \"ticket\" query param is included, inputs will be downloaded directly.\n",
        "operationId": "download_input_from_acquisition_analysis",
        "tags": [
          "acquisitions"
        ],
        "produces": [
          "application/json",
          "application/octet-stream"
        ],
        "parameters": [
          {
            "description": "ticket id of the inputs to download",
            "type": "string",
            "in": "query",
            "name": "ticket"
          }
        ],
        "x-sdk-download-ticket": "get_acquisition_analysis_input_download_ticket",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/analysis-files-create-ticket-output"
            },
            "examples": {
              "response": {
                "ticket": "57f2af23-a94c-426d-8521-11b2e8782020",
                "filename": "exampledicom.zip",
                "file_cnt": 1,
                "size": 4525137
              }
            }
          }
        }
      }
    },
    "/acquisitions/{AcquisitionId}/analyses/{AnalysisId}/files": {
      "parameters": [
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "AcquisitionId"
        },
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "AnalysisId"
        }
      ],
      "get": {
        "summary": "Download analysis outputs.",
        "description": "If \"ticket\" query param is included and not empty, download outputs.\nIf \"ticket\" query param is included and empty, create a ticket for all outputs in the anlaysis\nIf no \"ticket\" query param is included, server error 500\n",
        "operationId": "download_acquisition_analysis_outputs",
        "tags": [
          "acquisitions"
        ],
        "produces": [
          "application/json",
          "application/octet-stream"
        ],
        "parameters": [
          {
            "description": "ticket id of the outputs to download",
            "type": "string",
            "in": "query",
            "name": "ticket"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/analysis-files-create-ticket-output"
            },
            "examples": {
              "response": {
                "ticket": "57f2af23-a94c-426d-8521-11b2e8782020",
                "filename": "exampledicom.zip",
                "file_cnt": 1,
                "size": 4525137
              }
            }
          }
        }
      },
      "post": {
        "summary": "Upload an output file to analysis.",
        "operationId": "upload_output_to_acquisition_analysis",
        "tags": [
          "acquisitions"
        ],
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "file",
            "in": "formData",
            "type": "file",
            "required": true,
            "description": "The file to upload"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/acquisitions/{AcquisitionId}/analyses/{AnalysisId}/files/{Filename}": {
      "parameters": [
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "AcquisitionId"
        },
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "AnalysisId"
        },
        {
          "required": true,
          "type": "string",
          "in": "path",
          "description": "regex to select outputs for download",
          "name": "Filename"
        }
      ],
      "get": {
        "summary": "Download anaylsis outputs with filter.",
        "description": "If \"ticket\" query param is included and not empty, download outputs.\nIf \"ticket\" query param is included and empty, create a ticket for matching outputs in the anlaysis.\nIf no \"ticket\" query param is included, outputs will be downloaded directly.\n",
        "operationId": "download_output_from_acquisition_analysis",
        "tags": [
          "acquisitions"
        ],
        "produces": [
          "application/json",
          "application/octet-stream"
        ],
        "parameters": [
          {
            "description": "ticket id of the outputs to download",
            "type": "string",
            "in": "query",
            "name": "ticket"
          }
        ],
        "x-sdk-download-ticket": "get_acquisition_analysis_output_download_ticket",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/analysis-files-create-ticket-output"
            },
            "examples": {
              "response": {
                "ticket": "57f2af23-a94c-426d-8521-11b2e8782020",
                "filename": "exampledicom.zip",
                "file_cnt": 1,
                "size": 4525137
              }
            }
          }
        }
      }
    },
    "/acquisitions/{AcquisitionId}/analyses/{AnalysisId}/notes": {
      "parameters": [
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "AcquisitionId"
        },
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "AnalysisId"
        }
      ],
      "post": {
        "summary": "Add a note to acquisition analysis.",
        "operationId": "add_acquisition_analysis_note",
        "tags": [
          "acquisitions"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/note-input"
                }
              ],
              "required": [
                "text"
              ],
              "example": {
                "text": "Scitran core!"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200:modified-with-count"
          },
          "400": {
            "$ref": "#/responses/400:invalid-body-json"
          }
        }
      }
    },
    "/acquisitions/{AcquisitionId}/analyses/{AnalysisId}/notes/{NoteId}": {
      "parameters": [
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "AcquisitionId"
        },
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "AnalysisId"
        },
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "NoteId"
        }
      ],
      "delete": {
        "summary": "Remove a note from acquisition analysis.",
        "operationId": "delete_acquisition_analysis_note",
        "tags": [
          "acquisitions"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200:modified-with-count"
          }
        }
      }
    },
    "/projects": {
      "get": {
        "summary": "Get a list of projects",
        "operationId": "get_all_projects",
        "tags": [
          "projects"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/definitions/project-output"
                  }
                ],
                "required": [
                  "_id",
                  "label",
                  "group",
                  "created",
                  "modified",
                  "permissions"
                ]
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new project",
        "operationId": "add_project",
        "tags": [
          "projects"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "title": "Project",
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/project-input"
                }
              ],
              "required": [
                "label",
                "group"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/container-new-output"
            }
          },
          "400": {
            "$ref": "#/responses/400:invalid-body-json"
          }
        }
      }
    },
    "/projects/{ProjectId}": {
      "parameters": [
        {
          "in": "path",
          "type": "string",
          "name": "ProjectId",
          "required": true
        }
      ],
      "get": {
        "summary": "Get a single project",
        "operationId": "get_project",
        "tags": [
          "projects"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "title": "Project",
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/project-output"
                }
              ],
              "required": [
                "_id",
                "label",
                "group",
                "created",
                "modified",
                "permissions"
              ]
            }
          }
        }
      },
      "put": {
        "summary": "Update a project",
        "operationId": "modify_project",
        "tags": [
          "projects"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "title": "Project",
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/project-input"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200:modified-with-count"
          },
          "400": {
            "$ref": "#/responses/400:invalid-body-json"
          }
        }
      },
      "delete": {
        "summary": "Delete a project",
        "operationId": "delete_project",
        "description": "Only site admins and users with \"admin\" project permissions may delete a project",
        "tags": [
          "projects"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200:deleted-with-count"
          }
        }
      }
    },
    "/projects/{ProjectId}/info": {
      "parameters": [
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "ProjectId"
        }
      ],
      "post": {
        "summary": "Update or replace info for a project.",
        "operationId": "modify_project_info",
        "x-sdk-modify-info": true,
        "tags": [
          "projects"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/info-update-input"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The info was updated successfully"
          }
        }
      }
    },
    "/projects/groups": {
      "get": {
        "summary": "List all groups which have a project in them",
        "operationId": "get_all_projects_groups",
        "tags": [
          "projects"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/group-output-list"
                }
              ]
            }
          }
        }
      }
    },
    "/projects/{ProjectId}/sessions": {
      "parameters": [
        {
          "in": "path",
          "type": "string",
          "name": "ProjectId",
          "required": true
        }
      ],
      "get": {
        "summary": "List all sessions for the given project.",
        "operationId": "get_project_sessions",
        "tags": [
          "projects"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "allOf": [
                  {
                    "$ref": "#/definitions/session-output"
                  }
                ],
                "required": [
                  "_id",
                  "label",
                  "project",
                  "created",
                  "modified",
                  "permissions",
                  "public",
                  "group",
                  "subject"
                ]
              }
            }
          }
        }
      }
    },
    "/projects/{ProjectId}/acquisitions": {
      "parameters": [
        {
          "in": "path",
          "type": "string",
          "name": "ProjectId",
          "required": true
        }
      ],
      "get": {
        "summary": "List all acquisitions for the given project.",
        "operationId": "get_project_acquisitions",
        "tags": [
          "projects"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/definitions/acquisition-output"
                  }
                ],
                "required": [
                  "_id",
                  "public",
                  "label",
                  "session",
                  "created",
                  "modified",
                  "permissions"
                ]
              }
            }
          }
        }
      }
    },
    "/projects/{ProjectId}/rules": {
      "parameters": [
        {
          "in": "path",
          "type": "string",
          "name": "ProjectId",
          "required": true
        }
      ],
      "get": {
        "summary": "List all rules for a project.",
        "operationId": "get_project_rules",
        "tags": [
          "projects",
          "rules"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/rule-output"
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new rule for a project.",
        "operationId": "add_project_rule",
        "tags": [
          "projects",
          "rules"
        ],
        "responses": {
          "default": {
            "description": ""
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "title": "Rule",
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/rule-input"
                }
              ],
              "required": [
                "alg",
                "name",
                "any",
                "all",
                "not"
              ]
            }
          }
        ]
      }
    },
    "/projects/{ProjectId}/rules/{RuleId}": {
      "parameters": [
        {
          "in": "path",
          "type": "string",
          "name": "ProjectId",
          "required": true
        },
        {
          "in": "path",
          "type": "string",
          "name": "RuleId",
          "required": true
        }
      ],
      "get": {
        "summary": "Get a project rule.",
        "operationId": "get_project_rule",
        "tags": [
          "projects",
          "rules"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "title": "Rule",
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/rule-output"
                }
              ],
              "example": {
                "_id": "5a12f2923306be0016179f47",
                "name": "dcm2niix",
                "alg": "dcm2niix",
                "any": [],
                "all": [
                  {
                    "regex": true,
                    "type": "file.classification",
                    "value": "^(?!non-image).+$"
                  },
                  {
                    "type": "file.type",
                    "value": "nifti"
                  }
                ]
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update a rule on a project.",
        "operationId": "modify_project_rule",
        "tags": [
          "projects",
          "rules"
        ],
        "responses": {
          "default": {
            "description": ""
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "title": "Rule",
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/rule-input"
                }
              ]
            }
          }
        ]
      },
      "delete": {
        "summary": "Remove a project rule.",
        "operationId": "remove_project_rule",
        "tags": [
          "projects",
          "rules"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200:deleted-with-count"
          }
        }
      }
    },
    "/projects/{ProjectId}/template": {
      "parameters": [
        {
          "in": "path",
          "type": "string",
          "name": "ProjectId",
          "required": true
        }
      ],
      "post": {
        "summary": "Set the session template for a project.",
        "operationId": "set_project_template",
        "tags": [
          "projects"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/project-template"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200:modified-with-count"
          },
          "404": {
            "$ref": "#/responses/404:resource-not-found"
          }
        }
      },
      "delete": {
        "summary": "Remove the session template for a project.",
        "operationId": "remove_project_template",
        "tags": [
          "projects"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200:deleted-with-count"
          },
          "404": {
            "$ref": "#/responses/404:resource-not-found"
          }
        }
      }
    },
    "/projects/{ProjectId}/recalc": {
      "parameters": [
        {
          "in": "path",
          "type": "string",
          "name": "ProjectId",
          "required": true
        }
      ],
      "post": {
        "summary": "Recalculate if sessions in the project satisfy the template.",
        "description": "Returns list of modified session ids.",
        "operationId": "recalc_project",
        "tags": [
          "projects"
        ],
        "responses": {
          "200": {
            "description": "Project's sessions' compliance was recalculated.\nReturns list of session that were modified.\n",
            "schema": {
              "$ref": "#/definitions/session-template-recalc-output"
            }
          },
          "404": {
            "$ref": "#/responses/404:resource-not-found"
          }
        }
      }
    },
    "/projects/recalc": {
      "post": {
        "summary": "Recalculate all sessions against their project templates.",
        "description": "Iterates all projects that have a session template.\nRecalculate if projects' sessions satisfy the template.\nReturns list of modified session ids.\n",
        "operationId": "recalc_all_projects",
        "tags": [
          "projects"
        ],
        "responses": {
          "200": {
            "description": "Projects' sessions' compliance was recalculated.\nReturns list of session that were modified.\n",
            "schema": {
              "$ref": "#/definitions/session-template-recalc-output"
            }
          }
        }
      }
    },
    "/projects/{ProjectId}/tags": {
      "parameters": [
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "ProjectId"
        }
      ],
      "post": {
        "summary": "Add a tag to project.",
        "description": "Progates changes to projects, sessions and acquisitions",
        "operationId": "add_project_tag",
        "tags": [
          "projects"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/tag"
                }
              ],
              "example": {
                "value": "example-tag"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200:modified-with-count"
          },
          "400": {
            "$ref": "#/responses/400:invalid-body-json"
          }
        }
      }
    },
    "/projects/{ProjectId}/tags/{TagValue}": {
      "parameters": [
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "ProjectId"
        },
        {
          "required": true,
          "description": "The tag to interact with",
          "type": "string",
          "in": "path",
          "name": "TagValue"
        }
      ],
      "get": {
        "summary": "Get the value of a tag, by name.",
        "operationId": "get_project_tag",
        "tags": [
          "projects"
        ],
        "responses": {
          "200": {
            "description": "Returns a single tag by name",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/tag"
                }
              ]
            },
            "examples": {
              "response": {
                "value": "example-tag"
              }
            }
          }
        }
      },
      "put": {
        "summary": "Rename a tag.",
        "operationId": "rename_project_tag",
        "tags": [
          "projects"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/tag"
                }
              ],
              "example": {
                "value": "example-tag"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200:modified-with-count"
          },
          "400": {
            "$ref": "#/responses/400:invalid-body-json"
          }
        }
      },
      "delete": {
        "summary": "Delete a tag",
        "operationId": "delete_project_tag",
        "tags": [
          "projects"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200:modified-with-count"
          }
        }
      }
    },
    "/projects/{ProjectId}/packfile-start": {
      "parameters": [
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "ProjectId"
        }
      ],
      "post": {
        "summary": "Start a packfile upload to project",
        "operationId": "start_project_packfile_upload",
        "tags": [
          "projects"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/packfile-start"
            },
            "examples": {
              "response": {
                "token": "57fe88cc9e512c5d2b5dcb0b"
              }
            }
          }
        }
      }
    },
    "/projects/{ProjectId}/packfile": {
      "parameters": [
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "ProjectId"
        }
      ],
      "post": {
        "summary": "Add files to an in-progress packfile",
        "operationId": "project_packfile_upload",
        "tags": [
          "projects"
        ],
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "type": "string",
            "required": true
          },
          {
            "name": "file",
            "in": "formData",
            "type": "file",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "allOf": [
                  {
                    "$ref": "#/definitions/file-output"
                  }
                ]
              }
            },
            "examples": {
              "response": [
                {
                  "origin": {
                    "type": "job",
                    "id": "58063f24e5dc5b001657a87f"
                  },
                  "_id": "50708f69-7549-4331-bac0-b4789e5c9ca1",
                  "mimetype": "application/octet-stream",
                  "hash": "v0-sha384-12188e00a26650b2baa3f0195337dcf504f4362bb2136eef0cdbefb57159356b1355a0402fca0ab5ab081f21c305e5c2",
                  "name": "cortical_surface_right_hemisphere.obj",
                  "tags": [],
                  "classification": {},
                  "modified": "2016-10-18T15:26:35.701000+00:00",
                  "modality": null,
                  "size": 21804112,
                  "type": "None",
                  "info": {}
                },
                {
                  "origin": {
                    "type": "job",
                    "id": "58065fa7e5dc5b001457a882"
                  },
                  "_id": "50708f69-7549-4331-bac0-b4779e5c9ca1",
                  "mimetype": "application/octet-stream",
                  "hash": "v0-sha384-12188e00a26650b2baa3f0195337dcf504f4362bb2136eef0cdbefb57159356b1355a0402fca0ab5ab081f21c305e5c2",
                  "name": "cortical_surface_right_hemisphere.obj",
                  "tags": [],
                  "classification": {},
                  "modified": "2016-10-18T17:45:17.776000+00:00",
                  "modality": null,
                  "info": {},
                  "type": "None",
                  "size": 21804112
                }
              ]
            }
          }
        }
      }
    },
    "/projects/{ProjectId}/packfile-end": {
      "parameters": [
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "ProjectId"
        }
      ],
      "get": {
        "summary": "End a packfile upload",
        "operationId": "end_project_packfile_upload",
        "tags": [
          "projects"
        ],
        "produces": [
          "text/event-stream"
        ],
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "type": "string",
            "required": true
          },
          {
            "name": "metadata",
            "in": "query",
            "type": "string",
            "required": true,
            "description": "string-encoded metadata json object."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/projects/{ProjectId}/files": {
      "parameters": [
        {
          "name": "ProjectId",
          "in": "path",
          "type": "string",
          "required": true
        }
      ],
      "post": {
        "summary": "Upload a file to project.",
        "operationId": "upload_file_to_project",
        "tags": [
          "projects"
        ],
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "file",
            "in": "formData",
            "type": "file",
            "required": true,
            "description": "The file to upload"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/projects/{ProjectId}/files/{FileName}": {
      "parameters": [
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "ProjectId"
        },
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "FileName"
        }
      ],
      "get": {
        "summary": "Download a file.",
        "description": "Files can be downloaded directly from this endpoint with a valid \"Authorization\" header or via a ticket id.\n\nTo generate a ticket:\n  - Make a request with an empty \"ticket\" parameter and a valid \"Authorization\" header. The server will respond with a generated ticket id.\n  - Make another request with the received ticket id in the \"ticket\" parameter. A valid \"Authorization\" header is no longer required.\n\nWhen \"view\" is true, [RFC7233](https://tools.ietf.org/html/rfc7233) range request headers are supported.\n",
        "operationId": "download_file_from_project",
        "tags": [
          "projects"
        ],
        "produces": [
          "application/json",
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "ticket",
            "in": "query",
            "type": "string",
            "description": "The generated ticket id for the download, or present but empty to generate a ticket id"
          },
          {
            "name": "view",
            "in": "query",
            "type": "boolean",
            "default": false,
            "description": "If true, the proper \"Content-Type\" header based on the file's mimetype is set on response\nIf false, the \"Content-Type\" header is set to \"application/octet-stream\"\n"
          },
          {
            "name": "info",
            "in": "query",
            "type": "boolean",
            "default": false,
            "description": "If the file is a zipfile, return a json response of zipfile member information"
          },
          {
            "name": "member",
            "in": "query",
            "type": "string",
            "description": "The filename of a zipfile member to download rather than the entire file"
          }
        ],
        "x-sdk-download-ticket": "get_project_download_ticket",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/download-ticket"
            },
            "examples": {
              "response": {
                "ticket": "1e975e3d-21e9-41f4-bb97-261f03d35ba1"
              }
            }
          }
        }
      },
      "post": {
        "summary": "Replace a file",
        "operationId": "replace_project_file",
        "tags": [
          "projects"
        ],
        "responses": {
          "default": {
            "description": ""
          }
        }
      },
      "delete": {
        "summary": "Delete a file",
        "description": "A user with read-write or higher permissions on the container may delete files\nthat were uploaded by users or were the output of jobs. (Specifically, files\nwhose `origin.type` is either `job` or `user`.)\n<br/>\nA user with admin permissions on the container may delete any file.\n",
        "operationId": "delete_project_file",
        "tags": [
          "projects"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200:modified-with-count"
          }
        }
      },
      "put": {
        "summary": "Modify a file's attributes",
        "description": "Note: If modifying a file's modality, the current classification will be cleared (except for items in the \"Custom\" list)\n",
        "operationId": "modify_project_file",
        "tags": [
          "projects"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/file-update"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200:modified-with-count-and-jobs"
          }
        }
      }
    },
    "/projects/{ProjectId}/files/{FileName}/info": {
      "parameters": [
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "ProjectId"
        },
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "FileName"
        }
      ],
      "get": {
        "summary": "Get info for a particular file.",
        "operationId": "get_project_file_info",
        "tags": [
          "projects"
        ],
        "responses": {
          "200": {
            "description": "The file object, including info",
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/file-output"
                }
              ],
              "example": {
                "origin": {
                  "type": "job",
                  "id": "58063f24e5dc5b001657a87f"
                },
                "mimetype": "application/octet-stream",
                "hash": "v0-sha384-12188e00a26650b2baa3f0195337dcf504f4362bb2136eef0cdbefb57159356b1355a0402fca0ab5ab081f21c305e5c2",
                "name": "cortical_surface_right_hemisphere.obj",
                "tags": [],
                "classification": {},
                "modified": "2016-10-18T15:26:35.701000+00:00",
                "modality": null,
                "size": 21804112,
                "type": "None",
                "info": {}
              }
            }
          }
        }
      },
      "post": {
        "summary": "Update info for a particular file.",
        "operationId": "modify_project_file_info",
        "x-sdk-modify-info": true,
        "tags": [
          "projects"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/info-update-input"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200:modified-with-count"
          }
        }
      }
    },
    "/projects/{ProjectId}/files/{FileName}/classification": {
      "parameters": [
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "ProjectId"
        },
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "FileName"
        }
      ],
      "post": {
        "summary": "Update classification for a particular file.",
        "description": "If replacing a file's classification, the modality can optionally be modified as well.",
        "operationId": "modify_project_file_classification",
        "x-sdk-modify-classification": true,
        "tags": [
          "projects"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/classification-update-input"
                }
              ],
              "example": {
                "modality": "MR",
                "replace": {
                  "Intent": [
                    "Functional"
                  ],
                  "Measurement": [
                    "T2*"
                  ],
                  "Custom": [
                    "Custom Value"
                  ]
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200:modified-with-count-and-jobs"
          }
        }
      }
    },
    "/projects/{ProjectId}/permissions": {
      "parameters": [
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "ProjectId"
        }
      ],
      "post": {
        "summary": "Add a permission",
        "operationId": "add_project_permission",
        "tags": [
          "projects"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/permission"
                }
              ],
              "required": [
                "_id",
                "access"
              ],
              "example": {
                "_id": "coltonlw@flywheel.io",
                "access": "admin"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200:modified-with-count"
          },
          "400": {
            "$ref": "#/responses/400:invalid-body-json"
          }
        }
      }
    },
    "/projects/{ProjectId}/permissions/{UserId}": {
      "parameters": [
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "ProjectId"
        },
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "UserId"
        }
      ],
      "get": {
        "summary": "List a user's permissions for this project.",
        "operationId": "get_project_user_permission",
        "tags": [
          "projects"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/permission-output-default-required"
                }
              ]
            },
            "examples": {
              "response": {
                "access": "admin",
                "_id": "coltonlw@flywheel.io"
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update a user's permission for this project.",
        "operationId": "modify_project_user_permission",
        "tags": [
          "projects"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/permission"
                }
              ],
              "required": [
                "_id",
                "access"
              ],
              "example": {
                "_id": "coltonlw@flywheel.io",
                "access": "admin"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200:modified-with-count"
          },
          "400": {
            "$ref": "#/responses/400:invalid-body-json"
          }
        }
      },
      "delete": {
        "summary": "Delete a permission",
        "operationId": "delete_project_user_permission",
        "tags": [
          "projects"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200:modified-with-count"
          }
        }
      }
    },
    "/projects/{ProjectId}/notes": {
      "parameters": [
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "ProjectId"
        }
      ],
      "post": {
        "summary": "Add a note to project.",
        "operationId": "add_project_note",
        "tags": [
          "projects"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/note-input"
                }
              ],
              "required": [
                "text"
              ],
              "example": {
                "text": "Scitran core!"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200:modified-with-count"
          },
          "400": {
            "$ref": "#/responses/400:invalid-body-json"
          }
        }
      }
    },
    "/projects/{ProjectId}/notes/{NoteId}": {
      "parameters": [
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "ProjectId"
        },
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "NoteId"
        }
      ],
      "get": {
        "summary": "Get a note on project.",
        "operationId": "get_project_note",
        "tags": [
          "projects"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/note-output"
                }
              ]
            },
            "examples": {
              "response": {
                "_id": "580925ce9e512c57dc8a103b",
                "text": "some text",
                "created": "2016-10-21T17:19:40.899000+00:00",
                "modified": "2016-10-21T17:19:40.899000+00:00",
                "user": "coltonlw@flywheel.io"
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update a note on project.",
        "operationId": "modify_project_note",
        "tags": [
          "projects"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/note-input"
                }
              ],
              "required": [
                "text"
              ],
              "example": {
                "text": "Scitran core!"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200:modified-with-count"
          },
          "400": {
            "$ref": "#/responses/400:invalid-body-json"
          }
        }
      },
      "delete": {
        "summary": "Remove a note from project",
        "operationId": "delete_project_note",
        "tags": [
          "projects"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200:modified-with-count"
          }
        }
      }
    },
    "/projects/{ProjectId}/analyses": {
      "parameters": [
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "ProjectId"
        }
      ],
      "get": {
        "summary": "Get analyses for project.",
        "description": "Returns analyses that directly belong to this resource.",
        "operationId": "get_project_analyses",
        "tags": [
          "projects"
        ],
        "responses": {
          "200": {
            "description": "The list of analyses",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/analysis-list-entry"
              },
              "example": [
                {
                  "files": [
                    {
                      "origin": {
                        "type": "job",
                        "id": "58063f24e5dc5b001657a87f"
                      },
                      "mimetype": "application/octet-stream",
                      "hash": "v0-sha384-12188e00a26650b2baa3f0195337dcf504f4362bb2136eef0cdbefb57159356b1355a0402fca0ab5ab081f21c305e5c2",
                      "name": "cortical_surface_right_hemisphere.obj",
                      "tags": [],
                      "classification": {},
                      "modified": "2016-10-18T15:26:35.701000+00:00",
                      "modality": null,
                      "size": 21804112,
                      "type": "None",
                      "info": {}
                    }
                  ],
                  "created": "2016-10-18T17:45:11.778000+00:00",
                  "modified": "2016-10-18T17:45:11.778000+00:00",
                  "label": "cortex-demo 10/18/2016 13:45:5",
                  "job": "58065fa7e5dc5b001457a882",
                  "user": "canakgun@flywheel.io",
                  "_id": "58065fa7e5dc5b001457a881"
                }
              ]
            }
          }
        }
      },
      "post": {
        "summary": "Create an analysis and upload files.",
        "description": "When query param \"job\" is \"true\", send JSON to create\nan analysis and job.  Otherwise, multipart/form-data\nto upload files and create an analysis.\n",
        "operationId": "add_project_analysis",
        "tags": [
          "projects"
        ],
        "consumes": [
          "application/json",
          "multipart/form-data"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "title": "Analysis",
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/analysis-input-any"
                }
              ],
              "required": [
                "label"
              ]
            }
          },
          {
            "name": "job",
            "in": "query",
            "type": "boolean",
            "description": "Return job as an object instead of an id",
            "x-sdk-default": "true"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the id of the analysis that was created.",
            "schema": {
              "$ref": "#/definitions/container-new-output"
            }
          }
        }
      }
    },
    "/projects/{ProjectId}/analyses/{AnalysisId}": {
      "parameters": [
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "ProjectId"
        },
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "AnalysisId"
        }
      ],
      "get": {
        "summary": "Get an analysis.",
        "operationId": "get_project_analysis",
        "tags": [
          "projects"
        ],
        "parameters": [
          {
            "name": "inflate_job",
            "in": "query",
            "type": "boolean",
            "description": "Return job as an object instead of an id",
            "x-sdk-default": "true"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/analysis-output"
                }
              ]
            },
            "examples": {
              "response": {
                "inputs": [
                  {
                    "origin": {
                      "type": "job",
                      "id": "58063f24e5dc5b001657a87f"
                    },
                    "_id": "50708f69-7549-4331-bac0-b4779e5c9ca1",
                    "mimetype": "application/octet-stream",
                    "hash": "v0-sha384-12188e00a26650b2baa3f0195337dcf504f4362bb2136eef0cdbefb57159356b1355a0402fca0ab5ab081f21c305e5c2",
                    "name": "cortical_surface_right_hemisphere.obj",
                    "tags": [],
                    "classification": {},
                    "modified": "2016-10-18T15:26:35.701000+00:00",
                    "modality": null,
                    "size": 21804112,
                    "type": "None",
                    "info": {}
                  }
                ],
                "files": [
                  {
                    "origin": {
                      "type": "job",
                      "id": "58065fa7e5dc5b001457a882"
                    },
                    "_id": "50708f69-7549-4331-bac0-b4779e5c9ca1",
                    "mimetype": "application/octet-stream",
                    "hash": "v0-sha384-12188e00a26650b2baa3f0195337dcf504f4362bb2136eef0cdbefb57159356b1355a0402fca0ab5ab081f21c305e5c2",
                    "name": "cortical_surface_right_hemisphere.obj",
                    "tags": [],
                    "classification": {},
                    "modified": "2016-10-18T17:45:17.776000+00:00",
                    "modality": null,
                    "info": {},
                    "type": "None",
                    "size": 21804112
                  }
                ],
                "created": "2016-10-18T17:45:11.778000+00:00",
                "modified": "2016-10-18T17:45:11.778000+00:00",
                "label": "cortex-demo 10/18/2016 13:45:5",
                "job": {
                  "inputs": {
                    "anatomy": {
                      "type": "analysis",
                      "id": "58063f24e5dc5b001657a87e",
                      "name": "cortical_surface_right_hemisphere.obj"
                    }
                  },
                  "attempt": 1,
                  "tags": [
                    "ad-hoc",
                    "cortex-demo",
                    "analysis"
                  ],
                  "destination": {
                    "type": "analysis",
                    "id": "58065fa7e5dc5b001457a881"
                  },
                  "request": {
                    "inputs": [
                      {
                        "location": "/",
                        "type": "http",
                        "uri": "https://storage.googleapis.com/flywheel/gears/v1/scitran/cortex-demo/cortex-demo_manifest-labels_20160725T031837.331720Z.tar.gz",
                        "vu": "vu0:sha384:ssx5VWyFg7r8IBoOIphq7GaB_CymInQ1NxTV2WTDzglJLJ1-ktEbjLIHVABRzesV"
                      },
                      {
                        "type": "scitran",
                        "uri": "/jobs/58065fa7e5dc5b001457a882/config.json",
                        "location": "/flywheel/v0"
                      },
                      {
                        "type": "scitran",
                        "uri": "/sessions/58063e7ed213ed776045b320/analyses/58063f24e5dc5b001657a87e/files/cortical_surface_right_hemisphere.obj",
                        "location": "/flywheel/v0/input/anatomy"
                      }
                    ],
                    "target": {
                      "command": [
                        "bash",
                        "-c",
                        "rm -rf output; mkdir -p output; ./run; echo \"Exit was $?\""
                      ],
                      "env": {
                        "PATH": "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
                      },
                      "dir": "/flywheel/v0"
                    },
                    "outputs": [
                      {
                        "type": "scitran",
                        "uri": "/engine?level=analysis&id=58065fa7e5dc5b001457a881&job=58065fa7e5dc5b001457a882",
                        "location": "/flywheel/v0/output"
                      }
                    ]
                  },
                  "modified": "2016-10-18T17:45:21.344000+00:00",
                  "created": "2016-10-18T17:45:11.816000+00:00",
                  "state": "complete",
                  "config": {},
                  "id": "58065fa7e5dc5b001457a882",
                  "gear_id": "58065fa7e5dc5b001457a882"
                },
                "_id": "58065fa7e5dc5b001457a881"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete an anaylsis",
        "operationId": "delete_project_analysis",
        "tags": [
          "projects"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200:deleted-with-count"
          }
        }
      }
    },
    "/projects/{ProjectId}/analyses/{AnalysisId}/inputs": {
      "parameters": [
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "ProjectId"
        },
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "AnalysisId"
        }
      ],
      "get": {
        "summary": "Download analysis inputs.",
        "description": "If \"ticket\" query param is included and not empty, download inputs.\nIf \"ticket\" query param is included and empty, create a ticket for all inputs in the anlaysis\nIf no \"ticket\" query param is included, server error 500\n",
        "operationId": "download_project_analysis_inputs",
        "tags": [
          "projects"
        ],
        "produces": [
          "application/json",
          "application/octet-stream"
        ],
        "parameters": [
          {
            "description": "ticket id of the inputs to download",
            "type": "string",
            "in": "query",
            "name": "ticket"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/analysis-files-create-ticket-output"
            },
            "examples": {
              "response": {
                "ticket": "57f2af23-a94c-426d-8521-11b2e8782020",
                "filename": "exampledicom.zip",
                "file_cnt": 1,
                "size": 4525137
              }
            }
          }
        }
      }
    },
    "/projects/{ProjectId}/analyses/{AnalysisId}/inputs/{Filename}": {
      "parameters": [
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "ProjectId"
        },
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "AnalysisId"
        },
        {
          "required": true,
          "type": "string",
          "in": "path",
          "description": "regex to select inputs for download",
          "name": "Filename"
        }
      ],
      "get": {
        "summary": "Download anaylsis inputs with filter.",
        "description": "If \"ticket\" query param is included and not empty, download inputs.\nIf \"ticket\" query param is included and empty, create a ticket for matching inputs in the anlaysis.\nIf no \"ticket\" query param is included, inputs will be downloaded directly.\n",
        "operationId": "download_input_from_project_analysis",
        "tags": [
          "projects"
        ],
        "produces": [
          "application/json",
          "application/octet-stream"
        ],
        "parameters": [
          {
            "description": "ticket id of the inputs to download",
            "type": "string",
            "in": "query",
            "name": "ticket"
          }
        ],
        "x-sdk-download-ticket": "get_project_analysis_input_download_ticket",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/analysis-files-create-ticket-output"
            },
            "examples": {
              "response": {
                "ticket": "57f2af23-a94c-426d-8521-11b2e8782020",
                "filename": "exampledicom.zip",
                "file_cnt": 1,
                "size": 4525137
              }
            }
          }
        }
      }
    },
    "/projects/{ProjectId}/analyses/{AnalysisId}/files": {
      "parameters": [
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "ProjectId"
        },
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "AnalysisId"
        }
      ],
      "get": {
        "summary": "Download analysis outputs.",
        "description": "If \"ticket\" query param is included and not empty, download outputs.\nIf \"ticket\" query param is included and empty, create a ticket for all outputs in the anlaysis\nIf no \"ticket\" query param is included, server error 500\n",
        "operationId": "download_project_analysis_outputs",
        "tags": [
          "projects"
        ],
        "produces": [
          "application/json",
          "application/octet-stream"
        ],
        "parameters": [
          {
            "description": "ticket id of the outputs to download",
            "type": "string",
            "in": "query",
            "name": "ticket"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/analysis-files-create-ticket-output"
            },
            "examples": {
              "response": {
                "ticket": "57f2af23-a94c-426d-8521-11b2e8782020",
                "filename": "exampledicom.zip",
                "file_cnt": 1,
                "size": 4525137
              }
            }
          }
        }
      },
      "post": {
        "summary": "Upload an output file to analysis.",
        "operationId": "upload_output_to_project_analysis",
        "tags": [
          "projects"
        ],
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "file",
            "in": "formData",
            "type": "file",
            "required": true,
            "description": "The file to upload"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/projects/{ProjectId}/analyses/{AnalysisId}/files/{Filename}": {
      "parameters": [
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "ProjectId"
        },
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "AnalysisId"
        },
        {
          "required": true,
          "type": "string",
          "in": "path",
          "description": "regex to select outputs for download",
          "name": "Filename"
        }
      ],
      "get": {
        "summary": "Download anaylsis outputs with filter.",
        "description": "If \"ticket\" query param is included and not empty, download outputs.\nIf \"ticket\" query param is included and empty, create a ticket for matching outputs in the anlaysis.\nIf no \"ticket\" query param is included, outputs will be downloaded directly.\n",
        "operationId": "download_output_from_project_analysis",
        "tags": [
          "projects"
        ],
        "produces": [
          "application/json",
          "application/octet-stream"
        ],
        "parameters": [
          {
            "description": "ticket id of the outputs to download",
            "type": "string",
            "in": "query",
            "name": "ticket"
          }
        ],
        "x-sdk-download-ticket": "get_project_analysis_output_download_ticket",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/analysis-files-create-ticket-output"
            },
            "examples": {
              "response": {
                "ticket": "57f2af23-a94c-426d-8521-11b2e8782020",
                "filename": "exampledicom.zip",
                "file_cnt": 1,
                "size": 4525137
              }
            }
          }
        }
      }
    },
    "/projects/{ProjectId}/analyses/{AnalysisId}/notes": {
      "parameters": [
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "ProjectId"
        },
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "AnalysisId"
        }
      ],
      "post": {
        "summary": "Add a note to project analysis.",
        "operationId": "add_project_analysis_note",
        "tags": [
          "projects"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/note-input"
                }
              ],
              "required": [
                "text"
              ],
              "example": {
                "text": "Scitran core!"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200:modified-with-count"
          },
          "400": {
            "$ref": "#/responses/400:invalid-body-json"
          }
        }
      }
    },
    "/projects/{ProjectId}/analyses/{AnalysisId}/notes/{NoteId}": {
      "parameters": [
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "ProjectId"
        },
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "AnalysisId"
        },
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "NoteId"
        }
      ],
      "delete": {
        "summary": "Remove a note from project analysis.",
        "operationId": "delete_project_analysis_note",
        "tags": [
          "projects"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200:modified-with-count"
          }
        }
      }
    },
    "/report/site": {
      "get": {
        "operationId": "get_site_report",
        "tags": [
          "reports"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/report-site"
            }
          }
        }
      }
    },
    "/report/project": {
      "get": {
        "operationId": "get_project_report",
        "tags": [
          "reports"
        ],
        "parameters": [
          {
            "in": "query",
            "type": "string",
            "name": "projects",
            "description": "Specify multiple times to include projects in the report"
          },
          {
            "in": "query",
            "type": "string",
            "name": "start_date",
            "description": "Report start date"
          },
          {
            "in": "query",
            "type": "string",
            "name": "end_date",
            "description": "Report end date"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/report-project"
            }
          }
        }
      }
    },
    "/batch": {
      "get": {
        "summary": "Get a list of batch jobs the user has created.",
        "description": "Requires login.",
        "operationId": "get_all_batches",
        "tags": [
          "batch"
        ],
        "responses": {
          "200": {
            "description": "Returns a list of all known batch jobs for the user",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/batch"
              },
              "example": [
                {
                  "origin": {
                    "type": "user",
                    "id": "justinehlert@flywheel.io"
                  },
                  "jobs": [
                    "5a33fa6652e95c001707489c",
                    "5a33fa6652e95c001707489d",
                    "5a33fa6652e95c001707489e",
                    "5a33fa6652e95c001707489f"
                  ],
                  "created": "2017-12-15T16:37:55.538000+00:00",
                  "modified": "2017-12-15T16:38:01.107000+00:00",
                  "state": "complete",
                  "gear_id": "59b1b5b0e105c40019f50015",
                  "_id": "5a33fa6352e95c001707489b",
                  "config": {}
                }
              ]
            }
          }
        }
      },
      "post": {
        "summary": "Create a batch job proposal and insert it as 'pending'.",
        "operationId": "propose_batch",
        "tags": [
          "batch"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "The batch proposal",
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/batch-proposal-input"
                }
              ],
              "example": {
                "gear_id": "59b1b5b0e105c40019f50015",
                "config": {},
                "tags": [
                  "test-tag"
                ],
                "targets": [
                  {
                    "type": "session",
                    "id": "deb1b5b0e105c40019f500af"
                  }
                ]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The batch proposal object that was created",
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/batch-proposal"
                }
              ],
              "example": {
                "_id": "5a33fa6352e95c001707489b",
                "gear_id": "59b1b5b0e105c40019f50015",
                "config": {},
                "state": "pending",
                "origin": {
                  "type": "user",
                  "id": "justinehlert@flywheel.io"
                },
                "proposal": {},
                "created": "2017-12-15T16:37:55.538000+00:00",
                "modified": "2017-12-15T16:38:01.107000+00:00"
              }
            }
          }
        }
      }
    },
    "/batch/{BatchId}": {
      "parameters": [
        {
          "in": "path",
          "type": "string",
          "name": "BatchId",
          "required": true
        }
      ],
      "get": {
        "summary": "Get batch job details.",
        "parameters": [
          {
            "name": "jobs",
            "in": "query",
            "type": "boolean",
            "description": "If true, return job objects instead of job ids"
          }
        ],
        "operationId": "get_batch",
        "tags": [
          "batch"
        ],
        "responses": {
          "200": {
            "description": "The batch object",
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/batch"
                }
              ],
              "example": {
                "origin": {
                  "type": "user",
                  "id": "justinehlert@flywheel.io"
                },
                "jobs": [
                  "5a33fa6652e95c001707489c",
                  "5a33fa6652e95c001707489d",
                  "5a33fa6652e95c001707489e",
                  "5a33fa6652e95c001707489f"
                ],
                "created": "2017-12-15T16:37:55.538000+00:00",
                "modified": "2017-12-15T16:38:01.107000+00:00",
                "state": "complete",
                "gear_id": "59b1b5b0e105c40019f50015",
                "_id": "5a33fa6352e95c001707489b",
                "config": {}
              }
            }
          },
          "404": {
            "$ref": "#/responses/404:resource-not-found"
          }
        }
      }
    },
    "/batch/{BatchId}/run": {
      "parameters": [
        {
          "in": "path",
          "type": "string",
          "name": "BatchId",
          "required": true
        }
      ],
      "post": {
        "summary": "Launch a job.",
        "description": "Creates jobs from proposed inputs, returns jobs enqueued.\nMoves 'pending' batch job to 'running'.\n",
        "operationId": "start_batch",
        "tags": [
          "batch"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/job-output"
              }
            }
          }
        }
      }
    },
    "/batch/{BatchId}/cancel": {
      "parameters": [
        {
          "in": "path",
          "type": "string",
          "name": "BatchId",
          "required": true
        }
      ],
      "post": {
        "summary": "Cancel a Job",
        "description": "Cancels jobs that are still pending, returns number of jobs cancelled.\nMoves a 'running' batch job to 'cancelled'.\n",
        "operationId": "cancel_batch",
        "tags": [
          "batch"
        ],
        "responses": {
          "200": {
            "description": "The number of jobs canceled",
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/batch-cancel-output"
                }
              ],
              "example": {
                "number_cancelled": 4
              }
            }
          }
        }
      }
    },
    "/analyses/{AnalysisId}": {
      "parameters": [
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "AnalysisId"
        }
      ],
      "get": {
        "summary": "Get an analysis.",
        "operationId": "get_analysis",
        "tags": [
          "analyses"
        ],
        "parameters": [
          {
            "name": "inflate_job",
            "in": "query",
            "type": "boolean",
            "description": "Return job as an object instead of an id",
            "x-sdk-default": "true"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/analysis-output"
                }
              ]
            },
            "examples": {
              "response": {
                "inputs": [
                  {
                    "origin": {
                      "type": "job",
                      "id": "58063f24e5dc5b001657a87f"
                    },
                    "_id": "50708f69-7549-4331-bac0-b4779e5c9ca1",
                    "mimetype": "application/octet-stream",
                    "hash": "v0-sha384-12188e00a26650b2baa3f0195337dcf504f4362bb2136eef0cdbefb57159356b1355a0402fca0ab5ab081f21c305e5c2",
                    "name": "cortical_surface_right_hemisphere.obj",
                    "tags": [],
                    "classification": {},
                    "modified": "2016-10-18T15:26:35.701000+00:00",
                    "modality": null,
                    "size": 21804112,
                    "type": "None",
                    "info": {}
                  }
                ],
                "files": [
                  {
                    "origin": {
                      "type": "job",
                      "id": "58065fa7e5dc5b001457a882"
                    },
                    "_id": "50708f69-7549-4331-bac0-b4779e5c9ca1",
                    "mimetype": "application/octet-stream",
                    "hash": "v0-sha384-12188e00a26650b2baa3f0195337dcf504f4362bb2136eef0cdbefb57159356b1355a0402fca0ab5ab081f21c305e5c2",
                    "name": "cortical_surface_right_hemisphere.obj",
                    "tags": [],
                    "classification": {},
                    "modified": "2016-10-18T17:45:17.776000+00:00",
                    "modality": null,
                    "info": {},
                    "type": "None",
                    "size": 21804112
                  }
                ],
                "created": "2016-10-18T17:45:11.778000+00:00",
                "modified": "2016-10-18T17:45:11.778000+00:00",
                "label": "cortex-demo 10/18/2016 13:45:5",
                "job": {
                  "inputs": {
                    "anatomy": {
                      "type": "analysis",
                      "id": "58063f24e5dc5b001657a87e",
                      "name": "cortical_surface_right_hemisphere.obj"
                    }
                  },
                  "attempt": 1,
                  "tags": [
                    "ad-hoc",
                    "cortex-demo",
                    "analysis"
                  ],
                  "destination": {
                    "type": "analysis",
                    "id": "58065fa7e5dc5b001457a881"
                  },
                  "request": {
                    "inputs": [
                      {
                        "location": "/",
                        "type": "http",
                        "uri": "https://storage.googleapis.com/flywheel/gears/v1/scitran/cortex-demo/cortex-demo_manifest-labels_20160725T031837.331720Z.tar.gz",
                        "vu": "vu0:sha384:ssx5VWyFg7r8IBoOIphq7GaB_CymInQ1NxTV2WTDzglJLJ1-ktEbjLIHVABRzesV"
                      },
                      {
                        "type": "scitran",
                        "uri": "/jobs/58065fa7e5dc5b001457a882/config.json",
                        "location": "/flywheel/v0"
                      },
                      {
                        "type": "scitran",
                        "uri": "/sessions/58063e7ed213ed776045b320/analyses/58063f24e5dc5b001657a87e/files/cortical_surface_right_hemisphere.obj",
                        "location": "/flywheel/v0/input/anatomy"
                      }
                    ],
                    "target": {
                      "command": [
                        "bash",
                        "-c",
                        "rm -rf output; mkdir -p output; ./run; echo \"Exit was $?\""
                      ],
                      "env": {
                        "PATH": "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
                      },
                      "dir": "/flywheel/v0"
                    },
                    "outputs": [
                      {
                        "type": "scitran",
                        "uri": "/engine?level=analysis&id=58065fa7e5dc5b001457a881&job=58065fa7e5dc5b001457a882",
                        "location": "/flywheel/v0/output"
                      }
                    ]
                  },
                  "modified": "2016-10-18T17:45:21.344000+00:00",
                  "created": "2016-10-18T17:45:11.816000+00:00",
                  "state": "complete",
                  "config": {},
                  "id": "58065fa7e5dc5b001457a882",
                  "gear_id": "58065fa7e5dc5b001457a882"
                },
                "_id": "58065fa7e5dc5b001457a881"
              }
            }
          }
        }
      }
    },
    "/analyses/{AnalysisId}/inputs": {
      "parameters": [
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "AnalysisId"
        }
      ],
      "get": {
        "summary": "Download analysis inputs.",
        "description": "If \"ticket\" query param is included and not empty, download inputs.\nIf \"ticket\" query param is included and empty, create a ticket for all inputs in the anlaysis\nIf no \"ticket\" query param is included, server error 500\n",
        "operationId": "download_analysis_inputs",
        "tags": [
          "analyses"
        ],
        "produces": [
          "application/json",
          "application/octet-stream"
        ],
        "parameters": [
          {
            "description": "ticket id of the inputs to download",
            "type": "string",
            "in": "query",
            "name": "ticket"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/analysis-files-create-ticket-output"
            },
            "examples": {
              "response": {
                "ticket": "57f2af23-a94c-426d-8521-11b2e8782020",
                "filename": "exampledicom.zip",
                "file_cnt": 1,
                "size": 4525137
              }
            }
          }
        }
      }
    },
    "/analyses/{AnalysisId}/inputs/{Filename}": {
      "parameters": [
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "AnalysisId"
        },
        {
          "required": true,
          "type": "string",
          "in": "path",
          "description": "regex to select inputs for download",
          "name": "Filename"
        }
      ],
      "get": {
        "summary": "Download anaylsis inputs with filter.",
        "description": "If \"ticket\" query param is included and not empty, download inputs.\nIf \"ticket\" query param is included and empty, create a ticket for matching inputs in the anlaysis.\nIf no \"ticket\" query param is included, inputs will be downloaded directly.\n",
        "operationId": "download_input_from_analysis",
        "tags": [
          "analyses"
        ],
        "produces": [
          "application/json",
          "application/octet-stream"
        ],
        "parameters": [
          {
            "description": "ticket id of the inputs to download",
            "type": "string",
            "in": "query",
            "name": "ticket"
          }
        ],
        "x-sdk-download-ticket": "get_analysis_input_download_ticket",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/analysis-files-create-ticket-output"
            },
            "examples": {
              "response": {
                "ticket": "57f2af23-a94c-426d-8521-11b2e8782020",
                "filename": "exampledicom.zip",
                "file_cnt": 1,
                "size": 4525137
              }
            }
          }
        }
      }
    },
    "/analyses/{AnalysisId}/files": {
      "parameters": [
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "AnalysisId"
        }
      ],
      "get": {
        "summary": "Download analysis outputs.",
        "description": "If \"ticket\" query param is included and not empty, download outputs.\nIf \"ticket\" query param is included and empty, create a ticket for all outputs in the anlaysis\nIf no \"ticket\" query param is included, server error 500\n",
        "operationId": "download_analysis_outputs",
        "tags": [
          "analyses"
        ],
        "produces": [
          "application/json",
          "application/octet-stream"
        ],
        "parameters": [
          {
            "description": "ticket id of the outputs to download",
            "type": "string",
            "in": "query",
            "name": "ticket"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/analysis-files-create-ticket-output"
            },
            "examples": {
              "response": {
                "ticket": "57f2af23-a94c-426d-8521-11b2e8782020",
                "filename": "exampledicom.zip",
                "file_cnt": 1,
                "size": 4525137
              }
            }
          }
        }
      },
      "post": {
        "summary": "Upload an output file to analysis.",
        "operationId": "upload_output_to_analysis",
        "tags": [
          "analyses"
        ],
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "file",
            "in": "formData",
            "type": "file",
            "required": true,
            "description": "The file to upload"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/analyses/{AnalysisId}/files/{Filename}": {
      "parameters": [
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "AnalysisId"
        },
        {
          "required": true,
          "type": "string",
          "in": "path",
          "description": "regex to select outputs for download",
          "name": "Filename"
        }
      ],
      "get": {
        "summary": "Download anaylsis outputs with filter.",
        "description": "If \"ticket\" query param is included and not empty, download outputs.\nIf \"ticket\" query param is included and empty, create a ticket for matching outputs in the anlaysis.\nIf no \"ticket\" query param is included, outputs will be downloaded directly.\n",
        "operationId": "download_output_from_analysis",
        "tags": [
          "analyses"
        ],
        "produces": [
          "application/json",
          "application/octet-stream"
        ],
        "parameters": [
          {
            "description": "ticket id of the outputs to download",
            "type": "string",
            "in": "query",
            "name": "ticket"
          }
        ],
        "x-sdk-download-ticket": "get_analysis_output_download_ticket",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/analysis-files-create-ticket-output"
            },
            "examples": {
              "response": {
                "ticket": "57f2af23-a94c-426d-8521-11b2e8782020",
                "filename": "exampledicom.zip",
                "file_cnt": 1,
                "size": 4525137
              }
            }
          }
        }
      }
    },
    "/analyses/{AnalysisId}/info": {
      "parameters": [
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "AnalysisId"
        }
      ],
      "post": {
        "summary": "Update or replace info for a analysis.",
        "operationId": "modify_analysis_info",
        "x-sdk-modify-info": true,
        "tags": [
          "analyses"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/info-update-input"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The info was updated successfully"
          }
        }
      }
    },
    "/analyses/{AnalysisId}/tags": {
      "parameters": [
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "AnalysisId"
        }
      ],
      "post": {
        "summary": "Add a tag to analysis.",
        "description": "Progates changes to projects, sessions and acquisitions",
        "operationId": "add_analysis_tag",
        "tags": [
          "analyses"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/tag"
                }
              ],
              "example": {
                "value": "example-tag"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200:modified-with-count"
          },
          "400": {
            "$ref": "#/responses/400:invalid-body-json"
          }
        }
      }
    },
    "/analyses/{AnalysisId}/tags/{TagValue}": {
      "parameters": [
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "AnalysisId"
        },
        {
          "required": true,
          "description": "The tag to interact with",
          "type": "string",
          "in": "path",
          "name": "TagValue"
        }
      ],
      "get": {
        "summary": "Get the value of a tag, by name.",
        "operationId": "get_analysis_tag",
        "tags": [
          "analyses"
        ],
        "responses": {
          "200": {
            "description": "Returns a single tag by name",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/tag"
                }
              ]
            },
            "examples": {
              "response": {
                "value": "example-tag"
              }
            }
          }
        }
      },
      "put": {
        "summary": "Rename a tag.",
        "operationId": "rename_analysis_tag",
        "tags": [
          "analyses"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/tag"
                }
              ],
              "example": {
                "value": "example-tag"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200:modified-with-count"
          },
          "400": {
            "$ref": "#/responses/400:invalid-body-json"
          }
        }
      },
      "delete": {
        "summary": "Delete a tag",
        "operationId": "delete_analysis_tag",
        "tags": [
          "analyses"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200:modified-with-count"
          }
        }
      }
    },
    "/analyses/{AnalysisId}/notes": {
      "parameters": [
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "AnalysisId"
        }
      ],
      "post": {
        "summary": "Add a note to analysis.",
        "operationId": "add_analysis_note",
        "tags": [
          "analyses"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/note-input"
                }
              ],
              "required": [
                "text"
              ],
              "example": {
                "text": "Scitran core!"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200:modified-with-count"
          },
          "400": {
            "$ref": "#/responses/400:invalid-body-json"
          }
        }
      }
    },
    "/analyses/{AnalysisId}/notes/{NoteId}": {
      "parameters": [
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "AnalysisId"
        },
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "NoteId"
        }
      ],
      "get": {
        "summary": "Get a note on analysis.",
        "operationId": "get_analysis_note",
        "tags": [
          "analyses"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/note-output"
                }
              ]
            },
            "examples": {
              "response": {
                "_id": "580925ce9e512c57dc8a103b",
                "text": "some text",
                "created": "2016-10-21T17:19:40.899000+00:00",
                "modified": "2016-10-21T17:19:40.899000+00:00",
                "user": "coltonlw@flywheel.io"
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update a note on analysis.",
        "operationId": "modify_analysis_note",
        "tags": [
          "analyses"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/note-input"
                }
              ],
              "required": [
                "text"
              ],
              "example": {
                "text": "Scitran core!"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200:modified-with-count"
          },
          "400": {
            "$ref": "#/responses/400:invalid-body-json"
          }
        }
      },
      "delete": {
        "summary": "Remove a note from analysis",
        "operationId": "delete_analysis_note",
        "tags": [
          "analyses"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200:modified-with-count"
          }
        }
      }
    },
    "/{ContainerName}/{ContainerId}/{SubcontainerName}/analyses": {
      "parameters": [
        {
          "name": "ContainerName",
          "in": "path",
          "type": "string",
          "required": true,
          "enum": [
            "groups",
            "projects",
            "sessions",
            "acquisitions",
            "collections"
          ],
          "description": "The parent container type"
        },
        {
          "name": "ContainerId",
          "in": "path",
          "type": "string",
          "required": true,
          "description": "The parent container id"
        },
        {
          "name": "SubcontainerName",
          "in": "path",
          "type": "string",
          "required": true,
          "enum": [
            "all",
            "projects",
            "sessions",
            "acquisitions"
          ],
          "description": "The sub container type"
        }
      ],
      "get": {
        "summary": "Get nested analyses for a container",
        "description": "Returns analyses that belong to containers of the specified type that belong to ContainerId. \nFor example: `projects/{ProjectId}/acquisitions/analyses` will return any analyses  that have an acquisition that is under that project as a parent.\nThe `all` keyword is also supported, for example: projects/{ProjectId}/all/analyses  will return any analyses that have any session or acquisition or the project itself as a parent.\n",
        "operationId": "get_analyses",
        "tags": [
          "analyses"
        ],
        "responses": {
          "200": {
            "description": "The list of analyses",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/analysis-list-entry"
              },
              "example": [
                {
                  "files": [
                    {
                      "origin": {
                        "type": "job",
                        "id": "58063f24e5dc5b001657a87f"
                      },
                      "mimetype": "application/octet-stream",
                      "hash": "v0-sha384-12188e00a26650b2baa3f0195337dcf504f4362bb2136eef0cdbefb57159356b1355a0402fca0ab5ab081f21c305e5c2",
                      "name": "cortical_surface_right_hemisphere.obj",
                      "tags": [],
                      "classification": {},
                      "modified": "2016-10-18T15:26:35.701000+00:00",
                      "modality": null,
                      "size": 21804112,
                      "type": "None",
                      "info": {}
                    }
                  ],
                  "created": "2016-10-18T17:45:11.778000+00:00",
                  "modified": "2016-10-18T17:45:11.778000+00:00",
                  "label": "cortex-demo 10/18/2016 13:45:5",
                  "job": "58065fa7e5dc5b001457a882",
                  "user": "canakgun@flywheel.io",
                  "_id": "58065fa7e5dc5b001457a881"
                }
              ]
            }
          }
        }
      }
    },
    "/site/rules": {
      "get": {
        "summary": "List all site rules.",
        "operationId": "get_site_rules",
        "tags": [
          "rules"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/rule-output"
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new site rule.",
        "operationId": "add_site_rule",
        "tags": [
          "rules"
        ],
        "responses": {
          "default": {
            "description": ""
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "title": "Rule",
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/rule-input"
                }
              ],
              "required": [
                "alg",
                "name",
                "any",
                "all",
                "not"
              ]
            }
          }
        ]
      }
    },
    "/site/rules/{RuleId}": {
      "parameters": [
        {
          "name": "RuleId",
          "type": "string",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Get a site rule.",
        "operationId": "get_site_rule",
        "tags": [
          "rules"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "title": "Rule",
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/rule-output"
                }
              ],
              "example": {
                "_id": "5a12f2923306be0016179f47",
                "name": "dcm2niix",
                "alg": "dcm2niix",
                "any": [],
                "all": [
                  {
                    "regex": true,
                    "type": "file.classification",
                    "value": "^(?!non-image).+$"
                  },
                  {
                    "type": "file.type",
                    "value": "nifti"
                  }
                ]
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update a site rule.",
        "operationId": "modify_site_rule",
        "tags": [
          "rules"
        ],
        "responses": {
          "default": {
            "description": ""
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "title": "Rule",
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/rule-input"
                }
              ]
            }
          }
        ]
      },
      "delete": {
        "summary": "Remove a site rule.",
        "operationId": "remove_site_rule",
        "tags": [
          "rules"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200:deleted-with-count"
          }
        }
      }
    },
    "/dataexplorer/search": {
      "post": {
        "summary": "Perform a search query",
        "operationId": "search",
        "parameters": [
          {
            "name": "simple",
            "in": "query",
            "type": "boolean",
            "x-sdk-default": "true"
          },
          {
            "name": "size",
            "in": "query",
            "type": "integer",
            "x-sdk-default": 100
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/search-query"
                }
              ],
              "example": {
                "return_type": "session",
                "search_string": "amyg"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of results of the search query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/search-response"
              },
              "example": []
            }
          }
        }
      }
    },
    "/resolve": {
      "post": {
        "summary": "Perform path based lookup of nodes in the Flywheel hierarchy",
        "description": "This will perform a deep lookup of a node (i.e. group/project/session/acquisition) and its children,\nincluding any files. The query path is an array of strings in the following order (by default):\n\n  * group id\n  * project label\n  * session label\n  * acquisition label\n\nAn ID can be used instead of a label by formatting the string as `<id:project_id>`. The full path\nto the node, and the node's children will be included in the response.\n",
        "operationId": "resolve_path",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/resolver-input"
                }
              ],
              "example": {
                "path": [
                  "scitran",
                  "Neuroscience"
                ]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/resolver-output"
                }
              ],
              "example": {
                "path": [
                  {
                    "node_type": "group",
                    "_id": "scitran",
                    "label": "Scitran",
                    "permissions": [
                      {
                        "access": "admin",
                        "_id": "coltonlw@flywheel.io"
                      }
                    ],
                    "created": "2016-08-19T11:41:15.360000+00:00",
                    "modified": "2016-08-19T11:41:15.360000+00:00"
                  },
                  {
                    "node_type": "project",
                    "_id": "57e452791cff88b85f9f9c97",
                    "label": "Neuroscience",
                    "group": "scitran",
                    "created": "2016-09-22T21:51:53.151000+00:00",
                    "modified": "2016-09-22T21:51:53.151000+00:00",
                    "public": false,
                    "permissions": [
                      {
                        "access": "admin",
                        "_id": "coltonlw@flywheel.io"
                      }
                    ]
                  }
                ],
                "children": [
                  {
                    "node_type": "session",
                    "_id": "57e01cccb1dc04000fb83f03",
                    "label": "control_1",
                    "group": "scitran",
                    "created": "2016-09-19T17:13:48.164000+00:00",
                    "subject": {
                      "code": "ex4784",
                      "_id": "57e01cccb1dc04000fb83f02"
                    },
                    "modified": "2016-09-19T17:13:48.164000+00:00",
                    "project": "57e01cccf6b5d5edbcb4e1cf",
                    "public": false,
                    "permissions": [
                      {
                        "access": "admin",
                        "_id": "coltonlw@flywheel.io"
                      }
                    ]
                  },
                  {
                    "node_type": "file",
                    "origin": {
                      "method": "importer",
                      "type": "device",
                      "id": "importer_Admin_Import",
                      "name": "Admin Import"
                    },
                    "mimetype": "application/zip",
                    "classification": {},
                    "hash": "v0-sha384-dd3c97bfe0ad1fcba75ae6718c6e81038c59af4f447f5db194d52732efa4f955b28455db02eb64cad3e4e55f11e3679f",
                    "name": "4784_1_1_localizer_dicom.zip",
                    "tags": [],
                    "created": "2016-09-21T14:56:09.943000+00:00",
                    "modified": "2016-09-21T14:56:09.943000+00:00",
                    "modality": null,
                    "info": {},
                    "type": "dicom",
                    "size": 989933
                  }
                ]
              }
            }
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "ApiKey": {
      "type": "apiKey",
      "in": "header",
      "name": "Authorization",
      "description": "Your API key is available on your Profile page from within the Flywheel Application.\n**NOTE:** The API key should be prefixed with `scitran-user` if you're testing APIs on this page.\n\ne.g. `scitran-user dev.flywheel.io:DFCAds356sdvd`.\n"
    }
  },
  "security": [
    {
      "ApiKey": []
    }
  ],
  "responses": {
    "200:deleted-with-count": {
      "description": "The given number of records were deleted.",
      "schema": {
        "type": "object",
        "properties": {
          "deleted": {
            "type": "integer"
          }
        },
        "required": [
          "deleted"
        ],
        "example": {
          "deleted": 1
        }
      }
    },
    "200:modified-with-count": {
      "description": "The given number of records were updated.",
      "schema": {
        "type": "object",
        "properties": {
          "modified": {
            "type": "integer"
          }
        },
        "required": [
          "modified"
        ],
        "example": {
          "modified": 1
        }
      }
    },
    "200:modified-with-count-and-jobs": {
      "description": "The number of records modified and number of jobs started.",
      "schema": {
        "type": "object",
        "properties": {
          "modified": {
            "type": "integer"
          },
          "jobs_spawned": {
            "type": "integer"
          }
        },
        "required": [
          "modified",
          "jobs_spawned"
        ],
        "example": {
          "modified": 1,
          "jobs_spawned": 0
        }
      }
    },
    "400:invalid-body-json": {
      "description": "JSON did not validate against schema for this endpoint.\n"
    },
    "404:resource-not-found": {
      "description": "The specified resource could not be found.\n"
    }
  },
  "definitions": {
    "acquisition-input": {
      "type": "object",
      "properties": {
        "public": {
          "type": "boolean",
          "description": "Indicates whether or not a container is public"
        },
        "label": {
          "type": "string",
          "minLength": 1,
          "maxLength": 256,
          "description": "Application-specific label"
        },
        "info": {
          "$ref": "#/definitions/container-info"
        },
        "session": {
          "type": "string",
          "pattern": "^[a-fA-F0-9]{24}$",
          "description": "Unique database ID"
        },
        "uid": {
          "type": "string",
          "description": "A user database ID"
        },
        "timestamp": {
          "$ref": "#/definitions/container-timestamp"
        },
        "timezone": {
          "type": "string"
        }
      },
      "additionalProperties": false,
      "x-sdk-model": "acquisition"
    },
    "acquisition-metadata-input": {
      "type": "object",
      "x-note": "Are all of these fields still used/valid? Can this be reconciled with enginemetadata.json#/definitions/uid-upload-input?",
      "properties": {
        "public": {
          "type": "boolean"
        },
        "label": {
          "type": "string"
        },
        "info": {
          "type": "object"
        },
        "metadata": {
          "type": "object"
        },
        "measurement": {
          "type": "string"
        },
        "instrument": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        },
        "timestamp": {
          "$ref": "#/definitions/container-timestamp"
        },
        "timezone": {
          "type": "string"
        },
        "files": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/file-input"
          }
        }
      },
      "additionalProperties": false
    },
    "acquisition-output": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string",
          "pattern": "^[a-fA-F0-9]{24}$",
          "description": "Unique database ID"
        },
        "public": {
          "type": "boolean",
          "description": "Indicates whether or not a container is public"
        },
        "label": {
          "type": "string",
          "minLength": 1,
          "maxLength": 256,
          "description": "Application-specific label"
        },
        "info": {
          "$ref": "#/definitions/container-info"
        },
        "session": {
          "type": "string",
          "pattern": "^[a-fA-F0-9]{24}$",
          "description": "Unique database ID"
        },
        "uid": {
          "type": "string",
          "description": "A user database ID"
        },
        "collections": {
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "^[a-fA-F0-9]{24}$",
            "description": "Unique database ID"
          }
        },
        "files": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/file-output"
          }
        },
        "timestamp": {
          "$ref": "#/definitions/container-timestamp"
        },
        "timezone": {
          "type": "string"
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "description": "Creation time (automatically set)"
        },
        "modified": {
          "type": "string",
          "format": "date-time",
          "description": "Last modification time (automatically updated)"
        },
        "info_exists": {
          "type": "boolean"
        },
        "permissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/permission-output-default-required"
          }
        },
        "notes": {
          "allOf": [
            {
              "$ref": "#/definitions/notes-list-output"
            }
          ]
        },
        "tags": {
          "allOf": [
            {
              "$ref": "#/definitions/tag-list"
            }
          ]
        },
        "analyses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/analysis-output"
          }
        }
      },
      "additionalProperties": false,
      "x-sdk-model": "acquisition"
    },
    "analysis-input-adhoc": {
      "type": "object",
      "properties": {
        "inputs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/file-reference"
          },
          "description": "The set of inputs that this analysis is based on"
        },
        "description": {
          "type": "string"
        },
        "label": {
          "type": "string",
          "minLength": 1,
          "maxLength": 256,
          "description": "Application-specific label"
        }
      },
      "additionalProperties": false,
      "description": "Analysis input for creating ad-hoc analyses",
      "x-sdk-model": "analysis-input"
    },
    "analysis-input-job": {
      "type": "object",
      "properties": {
        "job": {
          "$ref": "#/definitions/job-input"
        },
        "description": {
          "type": "string"
        },
        "label": {
          "type": "string",
          "minLength": 1,
          "maxLength": 256,
          "description": "Application-specific label"
        }
      },
      "additionalProperties": false,
      "description": "Analysis input for creating job based analyses",
      "x-sdk-model": "analysis-input"
    },
    "analysis-input-legacy": {
      "type": "object",
      "properties": {
        "inputs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/file-input"
          },
          "description": "The set of inputs that this analysis is based on"
        },
        "outputs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/file-input"
          }
        },
        "description": {
          "type": "string"
        },
        "label": {
          "type": "string",
          "minLength": 1,
          "maxLength": 256,
          "description": "Application-specific label"
        }
      },
      "additionalProperties": false
    },
    "analysis-input-any": {
      "type": "object",
      "properties": {
        "inputs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/file-reference"
          },
          "description": "The set of inputs that this analysis is based on"
        },
        "description": {
          "type": "string"
        },
        "label": {
          "type": "string",
          "minLength": 1,
          "maxLength": 256,
          "description": "Application-specific label"
        },
        "job": {
          "$ref": "#/definitions/job-input"
        }
      },
      "x-sdk-schema": {
        "$ref": "#/definitions/analysis-input-adhoc"
      }
    },
    "analysis-update": {
      "type": "object",
      "properties": {
        "label": {
          "type": "string",
          "minLength": 1,
          "maxLength": 256,
          "description": "Application-specific label"
        }
      },
      "additionalProperties": false
    },
    "analysis-output": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string",
          "pattern": "^[a-fA-F0-9]{24}$",
          "description": "Unique database ID"
        },
        "inputs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/file-entry"
          }
        },
        "files": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/file-entry"
          }
        },
        "job": {
          "x-sdk-schema": {
            "$ref": "#/definitions/job-output"
          },
          "type": "string",
          "pattern": "^[a-fA-F0-9]{24}$",
          "description": "Unique database ID"
        },
        "notes": {
          "$ref": "#/definitions/notes-list-output"
        },
        "tags": {
          "$ref": "#/definitions/tag-list"
        },
        "info": {
          "$ref": "#/definitions/container-info"
        },
        "description": {
          "type": "string"
        },
        "label": {
          "type": "string",
          "minLength": 1,
          "maxLength": 256,
          "description": "Application-specific label"
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "description": "Creation time (automatically set)"
        },
        "modified": {
          "type": "string",
          "format": "date-time",
          "description": "Last modification time (automatically updated)"
        }
      },
      "required": [
        "_id",
        "label",
        "created",
        "modified"
      ]
    },
    "analysis-list-entry": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string",
          "pattern": "^[a-fA-F0-9]{24}$",
          "description": "Unique database ID"
        },
        "inputs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/file-entry"
          }
        },
        "files": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/file-entry"
          }
        },
        "job": {
          "type": "string",
          "pattern": "^[a-fA-F0-9]{24}$",
          "description": "Unique database ID"
        },
        "notes": {
          "$ref": "#/definitions/notes-list-output"
        },
        "description": {
          "type": "string"
        },
        "label": {
          "type": "string",
          "minLength": 1,
          "maxLength": 256,
          "description": "Application-specific label"
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "description": "Creation time (automatically set)"
        },
        "modified": {
          "type": "string",
          "format": "date-time",
          "description": "Last modification time (automatically updated)"
        }
      },
      "required": [
        "_id",
        "label",
        "created",
        "modified"
      ]
    },
    "analysis-files-create-ticket-output": {
      "type": "object",
      "properties": {
        "ticket": {
          "type": "string"
        },
        "filename": {
          "type": "string"
        },
        "file_cnt": {
          "type": "integer"
        },
        "size": {
          "type": "integer"
        }
      },
      "additionalProperties": false,
      "required": [
        "ticket",
        "filename",
        "file_cnt",
        "size"
      ]
    },
    "auth-login-output": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string"
        }
      },
      "required": [
        "token"
      ]
    },
    "auth-logout-output": {
      "type": "object",
      "properties": {
        "tokens_removed": {
          "type": "integer"
        }
      },
      "required": [
        "tokens_removed"
      ]
    },
    "avatars": {
      "title": "Avatar",
      "type": "object",
      "properties": {
        "gravatar": {
          "type": "string",
          "format": "uri"
        },
        "provider": {
          "type": "string",
          "format": "uri"
        },
        "custom": {
          "type": "string",
          "pattern": "^https:",
          "format": "uri"
        }
      },
      "additionalProperties": false
    },
    "batch-matched-container-list": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/container-output-with-files"
      }
    },
    "batch-proposal-detail": {
      "type": "object",
      "properties": {
        "analysis": {
          "$ref": "#/definitions/analysis-input-job"
        },
        "tags": {
          "$ref": "#/definitions/tag-list"
        }
      },
      "additionalProperties": false
    },
    "batch": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string",
          "pattern": "^[a-fA-F0-9]{24}$",
          "description": "Unique database ID"
        },
        "gear_id": {
          "type": "string"
        },
        "state": {
          "type": "string",
          "enum": [
            "pending",
            "running",
            "failed",
            "complete",
            "cancelled"
          ]
        },
        "origin": {
          "$ref": "#/definitions/job-origin"
        },
        "config": {
          "$ref": "#/definitions/job-config"
        },
        "jobs": {
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "^[a-fA-F0-9]{24}$",
            "description": "Unique database ID"
          }
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "description": "Creation time (automatically set)"
        },
        "modified": {
          "type": "string",
          "format": "date-time",
          "description": "Last modification time (automatically updated)"
        }
      }
    },
    "batch-proposal": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string",
          "pattern": "^[a-fA-F0-9]{24}$",
          "description": "Unique database ID"
        },
        "gear_id": {
          "type": "string"
        },
        "state": {
          "type": "string",
          "enum": [
            "pending",
            "running",
            "failed",
            "complete",
            "cancelled"
          ]
        },
        "config": {
          "$ref": "#/definitions/job-config"
        },
        "origin": {
          "$ref": "#/definitions/job-origin"
        },
        "proposal": {
          "$ref": "#/definitions/batch-proposal-detail"
        },
        "ambiguous": {
          "$ref": "#/definitions/batch-matched-container-list"
        },
        "matched": {
          "$ref": "#/definitions/batch-matched-container-list"
        },
        "not_matched": {
          "$ref": "#/definitions/batch-matched-container-list"
        },
        "improper_permissions": {
          "type": "array",
          "items": {
            "type": "string",
            "description": "Unique database ID"
          }
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "description": "Creation time (automatically set)"
        },
        "modified": {
          "type": "string",
          "format": "date-time",
          "description": "Last modification time (automatically updated)"
        }
      },
      "additionalProperties": false
    },
    "batch-proposal-input": {
      "type": "object",
      "properties": {
        "gear_id": {
          "type": "string"
        },
        "config": {
          "$ref": "#/definitions/job-config"
        },
        "tags": {
          "$ref": "#/definitions/tag-list"
        },
        "analysis": {
          "$ref": "#/definitions/analysis-input-job"
        },
        "targets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/container-reference"
          }
        }
      },
      "additionalProperties": false
    },
    "batch-cancel-output": {
      "type": "object",
      "properties": {
        "number_cancelled": {
          "type": "integer"
        }
      },
      "additionalProperties": false,
      "required": [
        "number_cancelled"
      ],
      "x-sdk-return": "number_cancelled"
    },
    "classification-add-delete": {
      "type": "object",
      "properties": {
        "add": {
          "$ref": "#/definitions/common-classification"
        },
        "delete": {
          "$ref": "#/definitions/common-classification"
        }
      },
      "additionalProperties": false
    },
    "classification-replace": {
      "type": "object",
      "properties": {
        "modality": {
          "$ref": "#/definitions/file-modality"
        },
        "replace": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    "classification-update-input": {
      "type": "object",
      "properties": {
        "add": {
          "$ref": "#/definitions/common-classification"
        },
        "delete": {
          "$ref": "#/definitions/common-classification"
        },
        "modality": {
          "$ref": "#/definitions/file-modality"
        },
        "replace": {
          "type": "object"
        }
      },
      "description": "Helper endpoint for editing an object's classification key"
    },
    "collection-node": {
      "type": "object",
      "properties": {
        "level": {
          "type": "string",
          "enum": [
            "project",
            "session",
            "acquisition"
          ]
        },
        "_id": {
          "type": "string",
          "pattern": "^[a-fA-F0-9]{24}$",
          "description": "Unique database ID"
        }
      },
      "additionalProperties": false
    },
    "collection-operation": {
      "type": "object",
      "properties": {
        "operation": {
          "type": "string",
          "enum": [
            "add",
            "remove"
          ]
        },
        "nodes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/collection-node"
          }
        }
      },
      "additionalProperties": false
    },
    "collection-input": {
      "type": "object",
      "properties": {
        "public": {
          "type": "boolean",
          "description": "Indicates whether or not a container is public"
        },
        "label": {
          "type": "string",
          "minLength": 1,
          "maxLength": 256,
          "description": "Application-specific label"
        },
        "info": {
          "$ref": "#/definitions/container-info"
        },
        "description": {
          "type": "string"
        }
      },
      "x-sdk-model": "collection",
      "additionalProperties": false
    },
    "collection-input-with-contents": {
      "type": "object",
      "properties": {
        "public": {
          "type": "boolean",
          "description": "Indicates whether or not a container is public"
        },
        "label": {
          "type": "string",
          "minLength": 1,
          "maxLength": 256,
          "description": "Application-specific label"
        },
        "info": {
          "$ref": "#/definitions/container-info"
        },
        "description": {
          "type": "string"
        },
        "contents": {
          "$ref": "#/definitions/collection-operation"
        }
      },
      "x-sdk-model": "collection",
      "additionalProperties": false
    },
    "collection-new-output": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string",
          "pattern": "^[a-fA-F0-9]{24}$",
          "description": "Unique database ID"
        }
      },
      "required": [
        "_id"
      ],
      "x-sdk-return": "_id"
    },
    "collection-output": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string",
          "pattern": "^[a-fA-F0-9]{24}$",
          "description": "Unique database ID"
        },
        "public": {
          "type": "boolean",
          "description": "Indicates whether or not a container is public"
        },
        "label": {
          "type": "string",
          "minLength": 1,
          "maxLength": 256,
          "description": "Application-specific label"
        },
        "description": {
          "type": "string"
        },
        "info": {
          "$ref": "#/definitions/container-info"
        },
        "info_exists": {
          "type": "boolean",
          "description": "Flag that indicates whether or not info exists on this container"
        },
        "curator": {
          "type": "string",
          "format": "email",
          "description": "Database ID of a user"
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "description": "Creation time (automatically set)"
        },
        "modified": {
          "type": "string",
          "format": "date-time",
          "description": "Last modification time (automatically updated)"
        },
        "permissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/permission-output-default-required"
          }
        },
        "files": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/file-output"
          }
        },
        "notes": {
          "$ref": "#/definitions/notes-list-output"
        },
        "tags": {
          "$ref": "#/definitions/tag-list"
        },
        "analyses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/analysis-output"
          }
        }
      },
      "x-sdk-model": "collection",
      "additionalProperties": false
    },
    "common-info": {
      "type": "object",
      "description": "Free-form information storage"
    },
    "common-timestamp": {
      "type": "string",
      "format": "date-time"
    },
    "common-classification": {
      "type": "object",
      "additionalProperties": {
        "type": "array",
        "items": {
          "type": "string"
        }
      }
    },
    "common-deleted-count": {
      "type": "object",
      "properties": {
        "deleted": {
          "type": "integer"
        }
      }
    },
    "common-modified-count": {
      "type": "object",
      "properties": {
        "modified": {
          "type": "integer"
        }
      }
    },
    "common-object-created": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string"
        }
      },
      "x-sdk-return": "_id"
    },
    "config-site-config-output": {
      "type": "object",
      "properties": {
        "central_url": {
          "type": "string"
        },
        "ssl_cert": {
          "type": "string"
        },
        "api_url": {
          "type": "string"
        },
        "registered": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "required": [
        "central_url",
        "ssl_cert",
        "api_url",
        "registered",
        "id",
        "name"
      ]
    },
    "config-auth-output": {
      "type": "object",
      "properties": {
        "verify_endpoint": {
          "type": "string"
        },
        "client_id": {
          "type": "string"
        },
        "client_secret": {
          "type": "string"
        },
        "auth_endpoint": {
          "type": "string"
        },
        "refresh_endpoint": {
          "type": "string"
        }
      }
    },
    "config-output": {
      "type": "object",
      "properties": {
        "site": {
          "$ref": "#/definitions/config-site-config-output"
        },
        "modified": {
          "type": "string"
        },
        "auth": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/config-auth-output"
          }
        },
        "created": {
          "type": "string"
        }
      },
      "required": [
        "site",
        "modified",
        "auth",
        "created"
      ]
    },
    "container-info": {
      "$ref": "#/definitions/common-info"
    },
    "container-timestamp": {
      "type": "string",
      "format": "date-time"
    },
    "container-new-output": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string",
          "description": "Unique database ID"
        }
      },
      "required": [
        "_id"
      ],
      "x-sdk-return": "_id"
    },
    "container-reference": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "group",
            "project",
            "session",
            "acquisition",
            "collection",
            "analysis"
          ],
          "description": "The type of container (e.g. session)"
        },
        "id": {
          "type": "string",
          "description": "Unique database ID"
        }
      },
      "required": [
        "type",
        "id"
      ],
      "additionalProperties": false,
      "description": "A reference to an individual container, by type and id"
    },
    "container-output-with-files": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string",
          "description": "Unique database ID"
        },
        "label": {
          "type": "string",
          "minLength": 1,
          "maxLength": 256,
          "description": "Application-specific label"
        },
        "files": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/file-output"
          }
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "description": "Creation time (automatically set)"
        },
        "modified": {
          "type": "string",
          "format": "date-time",
          "description": "Last modification time (automatically updated)"
        }
      },
      "description": "Generic container output with files"
    },
    "device-errors": {
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "device-status-entry": {
      "type": "object",
      "properties": {
        "errors": {
          "$ref": "#/definitions/device-errors"
        },
        "last_seen": {
          "$ref": "#/definitions/common-timestamp"
        },
        "status": {
          "type": "string",
          "enum": [
            "ok",
            "missing",
            "error",
            "unknown"
          ]
        }
      },
      "additionalProperties": false,
      "required": [
        "last_seen",
        "status"
      ]
    },
    "device": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string",
          "pattern": "^[a-fA-F0-9]{24}$",
          "description": "Unique database ID"
        },
        "label": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "key": {
          "type": "string"
        },
        "errors": {
          "$ref": "#/definitions/device-errors"
        },
        "info": {
          "$ref": "#/definitions/common-info"
        },
        "interval": {
          "type": "integer"
        },
        "last_seen": {
          "$ref": "#/definitions/common-timestamp"
        }
      },
      "x-sdk-model": "device",
      "additionalProperties": false
    },
    "device-input": {
      "type": "object",
      "properties": {
        "label": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      },
      "x-sdk-model": "device",
      "additionalProperties": false
    },
    "device-update": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "interval": {
          "type": "integer"
        },
        "errors": {
          "$ref": "#/definitions/device-errors"
        },
        "info": {
          "$ref": "#/definitions/common-info"
        }
      },
      "x-sdk-model": "device",
      "additionalProperties": false
    },
    "device-output": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/device"
        }
      ],
      "required": [
        "_id",
        "type",
        "name",
        "last_seen"
      ],
      "x-sdk-model": "device"
    },
    "device-status": {
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/device-status-entry"
      }
    },
    "download-filter-definition": {
      "type": "object",
      "properties": {
        "+": {
          "$ref": "#/definitions/download-filter-items"
        },
        "plus": {
          "$ref": "#/definitions/download-filter-items"
        },
        "-": {
          "$ref": "#/definitions/download-filter-items"
        },
        "minus": {
          "$ref": "#/definitions/download-filter-items"
        }
      },
      "x-sdk-ignore-properties": [
        "+",
        "-"
      ],
      "additionalProperties": false
    },
    "download-filter-items": {
      "type": "array",
      "minItems": 1,
      "items": {
        "type": "string"
      },
      "description": "A list of items to include or exclude from a download"
    },
    "download-node": {
      "type": "object",
      "properties": {
        "level": {
          "type": "string",
          "enum": [
            "project",
            "session",
            "acquisition",
            "analysis"
          ]
        },
        "_id": {
          "type": "string",
          "pattern": "^[0-9a-f]{24}$"
        }
      },
      "required": [
        "level",
        "_id"
      ],
      "additionalProperties": false,
      "description": "A reference to a container"
    },
    "download-filter": {
      "type": "object",
      "properties": {
        "tags": {
          "$ref": "#/definitions/download-filter-definition"
        },
        "types": {
          "$ref": "#/definitions/download-filter-definition"
        }
      }
    },
    "download-input": {
      "title": "Download",
      "type": "object",
      "properties": {
        "optional": {
          "type": "boolean"
        },
        "nodes": {
          "type": "array",
          "minItems": 1,
          "items": {
            "$ref": "#/definitions/download-node"
          }
        },
        "filters": {
          "type": "array",
          "minItems": 1,
          "items": {
            "$ref": "#/definitions/download-filter"
          }
        }
      },
      "required": [
        "optional",
        "nodes"
      ],
      "additionalProperties": false,
      "description": "Specifies a set of files to download"
    },
    "download-ticket": {
      "type": "object",
      "properties": {
        "ticket": {
          "type": "string",
          "description": "The ticket to use to perform the actual download"
        }
      },
      "additionalProperties": false,
      "required": [
        "ticket"
      ],
      "description": "A ticket for non-authenticated download of files"
    },
    "download-ticket-with-summary": {
      "type": "object",
      "properties": {
        "ticket": {
          "type": "string",
          "description": "The ticket to use to perform the actual download"
        },
        "file_cnt": {
          "type": "integer",
          "description": "The number of files that will be included in the download"
        },
        "size": {
          "type": "integer",
          "description": "An estimated total number of bytes that will be downloaded"
        }
      },
      "additionalProperties": false,
      "required": [
        "ticket",
        "file_cnt",
        "size"
      ],
      "description": "A ticket for non-authenticated download of files, including a summary"
    },
    "enginemetadata-upload-acquisition-metadata-input": {
      "type": "object",
      "properties": {
        "public": {
          "type": "boolean"
        },
        "label": {
          "type": "string"
        },
        "info": {
          "type": "object"
        },
        "uid": {
          "type": "string"
        },
        "timestamp": {
          "$ref": "#/definitions/container-timestamp"
        },
        "timezone": {
          "type": "string"
        },
        "files": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/file-input"
          }
        }
      },
      "additionalProperties": false
    },
    "enginemetadata-engine-upload-input": {
      "type": "object",
      "properties": {
        "project": {
          "$ref": "#/definitions/project-metadata-input"
        },
        "session": {
          "$ref": "#/definitions/session-metadata-input"
        },
        "acquisition": {
          "$ref": "#/definitions/acquisition-metadata-input"
        }
      },
      "additionalProperties": false
    },
    "enginemetadata-label-upload-input": {
      "type": "object",
      "properties": {
        "group": {
          "type": "object",
          "allOf": [
            {
              "$ref": "#/definitions/group-metadata-input"
            }
          ],
          "required": [
            "_id"
          ]
        },
        "project": {
          "type": "object",
          "allOf": [
            {
              "$ref": "#/definitions/project-metadata-input"
            }
          ],
          "required": [
            "label"
          ]
        },
        "session": {
          "type": "object",
          "allOf": [
            {
              "$ref": "#/definitions/session-metadata-input"
            }
          ],
          "required": [
            "label"
          ]
        },
        "acquisition": {
          "type": "object",
          "allOf": [
            {
              "$ref": "#/definitions/enginemetadata-upload-acquisition-metadata-input"
            }
          ],
          "required": [
            "label"
          ]
        }
      },
      "required": [
        "group",
        "project"
      ],
      "additionalProperties": false
    },
    "enginemetadata-uid-upload-input": {
      "type": "object",
      "properties": {
        "group": {
          "type": "object",
          "allOf": [
            {
              "$ref": "#/definitions/group-metadata-input"
            }
          ],
          "required": [
            "_id"
          ]
        },
        "project": {
          "type": "object",
          "allOf": [
            {
              "$ref": "#/definitions/project-metadata-input"
            }
          ],
          "required": [
            "label"
          ]
        },
        "session": {
          "type": "object",
          "allOf": [
            {
              "$ref": "#/definitions/session-metadata-input"
            }
          ],
          "required": [
            "uid"
          ]
        },
        "acquisition": {
          "type": "object",
          "allOf": [
            {
              "$ref": "#/definitions/enginemetadata-upload-acquisition-metadata-input"
            }
          ],
          "required": [
            "uid"
          ]
        }
      },
      "required": [
        "acquisition",
        "group",
        "project",
        "session"
      ],
      "additionalProperties": false
    },
    "enginemetadata-uid-match-upload-input": {
      "type": "object",
      "properties": {
        "project": {
          "$ref": "#/definitions/project-metadata-input"
        },
        "session": {
          "type": "object",
          "allOf": [
            {
              "$ref": "#/definitions/session-metadata-input"
            }
          ],
          "required": [
            "uid"
          ]
        },
        "acquisition": {
          "type": "object",
          "allOf": [
            {
              "$ref": "#/definitions/enginemetadata-upload-acquisition-metadata-input"
            }
          ],
          "required": [
            "uid"
          ]
        }
      },
      "required": [
        "acquisition",
        "session"
      ],
      "additionalProperties": false
    },
    "file-modality": {
      "type": "string",
      "description": "The type of instrument that originated the file (e.g. MR, CT, ...)"
    },
    "file-via": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "method": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "file-origin": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Database ID of joined name and method"
        },
        "method": {
          "type": "string",
          "description": "Method of file origin"
        },
        "type": {
          "type": "string",
          "description": "Type of file origin (e.g. device, user, job)"
        },
        "name": {
          "type": "string",
          "description": "Name of device, user or job that originated the file"
        },
        "via": {
          "$ref": "#/definitions/file-via"
        }
      },
      "additionalProperties": false
    },
    "file-entry": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "The name of the file on disk"
        },
        "type": {
          "type": "string",
          "description": "A descriptive file type (e.g. dicom, image, document, ...)"
        },
        "mimetype": {
          "type": "string",
          "description": "A MIME Content-Type of the file"
        },
        "modality": {
          "$ref": "#/definitions/file-modality"
        },
        "classification": {
          "$ref": "#/definitions/common-classification"
        },
        "tags": {
          "$ref": "#/definitions/tag-list"
        },
        "info": {
          "$ref": "#/definitions/common-info"
        },
        "origin": {
          "$ref": "#/definitions/file-origin"
        },
        "hash": {
          "type": "string",
          "minLength": 106,
          "maxLength": 106,
          "description": "Cryptographic hash of the file"
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "description": "Creation time (automatically set)"
        },
        "modified": {
          "type": "string",
          "format": "date-time",
          "description": "Last modification time (automatically updated)"
        },
        "size": {
          "type": "integer",
          "description": "Size of the file, in bytes"
        },
        "info_exists": {
          "type": "boolean"
        }
      },
      "additionalProperties": false,
      "x-sdk-model": "file-entry",
      "description": "A file description"
    },
    "file-input": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the file on disk"
        },
        "type": {
          "type": "string",
          "description": "A descriptive file type (e.g. dicom, image, document, ...)"
        },
        "mimetype": {
          "type": "string",
          "description": "A MIME Content-Type of the file"
        },
        "modality": {
          "$ref": "#/definitions/file-modality"
        },
        "classification": {
          "$ref": "#/definitions/common-classification"
        },
        "tags": {
          "$ref": "#/definitions/tag-list"
        },
        "info": {
          "$ref": "#/definitions/common-info"
        }
      },
      "additionalProperties": false,
      "x-sdk-model": "file-entry"
    },
    "file-update": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "A descriptive file type (e.g. dicom, image, document, ...)"
        },
        "modality": {
          "$ref": "#/definitions/file-modality"
        }
      },
      "additionalProperties": false,
      "x-sdk-model": "file-entry"
    },
    "file-output": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/file-entry"
        }
      ],
      "required": [
        "modified",
        "size"
      ],
      "x-sdk-model": "file-entry"
    },
    "file-reference": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "group",
            "project",
            "session",
            "acquisition",
            "collection",
            "analysis"
          ],
          "description": "The type of container (e.g. session)"
        },
        "id": {
          "type": "string",
          "description": "Unique database ID"
        },
        "name": {
          "type": "string",
          "description": "The name of the file on disk"
        }
      },
      "required": [
        "type",
        "id",
        "name"
      ],
      "additionalProperties": false,
      "description": "A reference to an individual file in a container, by type, id and name"
    },
    "gear-directive": {
      "type": "object",
      "description": "A schema directive."
    },
    "gear-config": {
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/gear-directive"
      },
      "description": "Schema snippets describing the options this gear consumes. Not currently processed."
    },
    "gear-custom": {
      "type": "object",
      "description": "A place for gear authors to put arbitrary information."
    },
    "gear-environment": {
      "type": "object",
      "additionalProperties": {
        "type": "string"
      },
      "description": "Environment variables that should be set for the gear."
    },
    "gear-input-item": {
      "description": "Describes a gear input",
      "properties": {
        "base": {
          "type": "string",
          "enum": [
            "file",
            "api-key"
          ],
          "description": "The type of gear input."
        },
        "description": {
          "type": "string",
          "description": "Hackaround for description not technically being a schema directive"
        },
        "optional": {
          "type": "boolean",
          "description": "Allow the gear to mark an input file as optional."
        }
      },
      "required": [
        "base"
      ],
      "additionalProperties": {
        "$ref": "#/definitions/gear-directive"
      }
    },
    "gear-context-lookup-item": {
      "properties": {
        "found": {
          "type": "boolean",
          "description": "Was the context value found?"
        },
        "container_type": {
          "type": "string",
          "enum": [
            "group",
            "project",
            "session",
            "acquisition",
            "collection",
            "analysis"
          ],
          "description": "The type of container (e.g. session)"
        },
        "id": {
          "type": "string",
          "description": "Id of the container where the context value was found, if any."
        },
        "label": {
          "type": "string",
          "description": "Label of the container where the context value was found, if any."
        },
        "value": {
          "description": "The value if found. Valid IFF found is true. Can be null."
        }
      },
      "required": [
        "found"
      ],
      "additionalProperties": false
    },
    "gear-context-lookup": {
      "description": "Describes a gear input",
      "additionalProperties": {
        "$ref": "#/definitions/gear-context-lookup-item"
      }
    },
    "gear-inputs": {
      "type": "object",
      "additionalProperties": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/definitions/gear-input-item"
        }
      },
      "description": "Schema snippets describing the inputs this gear consumes."
    },
    "gear-exchange": {
      "type": "object",
      "description": "Metadata object that describes the origin of a gear version",
      "properties": {
        "git-commit": {
          "type": "string",
          "description": "The SHA-1 hash referring to the git commit"
        },
        "rootfs-hash": {
          "type": "string",
          "description": "The cryptographic hash of the root filesystem in the form of \"algorithm:<base16 hash>\""
        },
        "rootfs-url": {
          "type": "string",
          "description": "The absolute URL of the gear's root file system"
        }
      },
      "required": [
        "git-commit",
        "rootfs-hash",
        "rootfs-url"
      ]
    },
    "gear": {
      "type": "object",
      "description": "Gear manifest",
      "properties": {
        "author": {
          "type": "string",
          "description": "The author of this gear."
        },
        "maintainer": {
          "type": "string",
          "description": "(optional) The maintainer of this gear. Can be used to distinguish the algorithm author from the gear maintainer."
        },
        "cite": {
          "type": "string",
          "description": "(optional) Any citations relevant to the algorithm(s) or work present in the gear."
        },
        "config": {
          "$ref": "#/definitions/gear-config"
        },
        "custom": {
          "$ref": "#/definitions/gear-custom"
        },
        "description": {
          "type": "string",
          "description": "A brief description of the gear's purpose. Ideally 1-4 sentences."
        },
        "environment": {
          "$ref": "#/definitions/gear-environment"
        },
        "command": {
          "type": "string",
          "description": "If provided, the starting command for the gear, rather than /flywheel/v0/run. Will be templated according to the spec."
        },
        "inputs": {
          "$ref": "#/definitions/gear-inputs"
        },
        "label": {
          "type": "string",
          "description": "The human-friendly name of this gear."
        },
        "license": {
          "type": "string",
          "description": "Software license of the gear"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-z0-9\\-]+$",
          "description": "The identification of this gear."
        },
        "source": {
          "type": "string",
          "description": "A valid URI, or empty string."
        },
        "url": {
          "type": "string",
          "description": "A valid URI, or empty string."
        },
        "version": {
          "type": "string",
          "description": "A human-friendly string explaining the release version of this gear. Example: 3.2.1"
        }
      },
      "required": [
        "author",
        "config",
        "description",
        "inputs",
        "label",
        "license",
        "name",
        "source",
        "url",
        "version"
      ],
      "x-sdk-include-empty": [
        "config",
        "inputs"
      ],
      "additionalProperties": false
    },
    "gear-doc": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string",
          "pattern": "^[a-fA-F0-9]{24}$",
          "description": "Unique database ID"
        },
        "category": {
          "type": "string",
          "description": "The gear category"
        },
        "gear": {
          "$ref": "#/definitions/gear"
        },
        "exchange": {
          "$ref": "#/definitions/gear-exchange"
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "description": "Creation time (automatically set)"
        },
        "modified": {
          "type": "string",
          "format": "date-time",
          "description": "Last modification time (automatically updated)"
        }
      },
      "description": "A full gear description, including manifest and exchange information"
    },
    "group": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string",
          "maxLength": 64,
          "minLength": 2,
          "pattern": "^[0-9a-z][0-9a-z.@_-]{0,30}[0-9a-z]$"
        },
        "label": {
          "maxLength": 64,
          "minLength": 1,
          "pattern": "^[0-9A-Za-z][0-9A-Za-z .@_-]{0,30}[0-9A-Za-z]$",
          "title": "label",
          "type": "string",
          "description": "The group label"
        },
        "permissions": {
          "$ref": "#/definitions/permission-output-list"
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "description": "Creation time (automatically set)"
        },
        "modified": {
          "type": "string",
          "format": "date-time",
          "description": "Last modification time (automatically updated)"
        },
        "tags": {
          "$ref": "#/definitions/tag-list"
        }
      },
      "additionalProperties": false,
      "x-sdk-model": "group"
    },
    "group-input": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string",
          "maxLength": 64,
          "minLength": 2,
          "pattern": "^[0-9a-z][0-9a-z.@_-]{0,30}[0-9a-z]$"
        },
        "label": {
          "maxLength": 64,
          "minLength": 1,
          "pattern": "^[0-9A-Za-z][0-9A-Za-z .@_-]{0,30}[0-9A-Za-z]$",
          "title": "label",
          "type": "string",
          "description": "The group label"
        }
      },
      "additionalProperties": false,
      "x-sdk-model": "group"
    },
    "group-metadata-input": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "group-output": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/group"
        }
      ],
      "required": [
        "permissions",
        "created",
        "modified",
        "_id"
      ],
      "x-sdk-model": "group"
    },
    "group-new-output": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string",
          "maxLength": 64,
          "minLength": 2,
          "pattern": "^[0-9a-z][0-9a-z.@_-]{0,30}[0-9a-z]$"
        }
      },
      "required": [
        "_id"
      ],
      "x-sdk-return": "_id"
    },
    "group-output-list": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/group-output"
      }
    },
    "group-project-group-output": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/group"
        }
      ],
      "required": [
        "_id"
      ],
      "x-sdk-model": "group"
    },
    "group-project-group-output-list": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/group-project-group-output"
      }
    },
    "info-add-remove": {
      "type": "object",
      "properties": {
        "set": {
          "type": "object",
          "minProperties": 1,
          "description": "Key/value pairs of properties to set"
        },
        "delete": {
          "type": "array",
          "uniqueItems": true,
          "minItems": 1,
          "items": {
            "type": "string"
          },
          "description": "A list of properties to remove"
        }
      },
      "additionalProperties": false,
      "description": "Indicates properties to update and a list of properties to remove"
    },
    "info-replace": {
      "type": "object",
      "properties": {
        "replace": {
          "type": "object",
          "description": "The new set of properties for the info"
        }
      },
      "additionalProperties": false,
      "description": "Indicates that info should be replaced with the properties in this document"
    },
    "info-update-input": {
      "type": "object",
      "properties": {
        "set": {
          "type": "object",
          "minProperties": 1,
          "description": "Key/value pairs of properties to set"
        },
        "delete": {
          "type": "array",
          "uniqueItems": true,
          "minItems": 1,
          "items": {
            "type": "string"
          },
          "description": "A list of properties to remove"
        },
        "replace": {
          "type": "object",
          "description": "The new set of properties for the info"
        }
      },
      "description": "Helper endpoint for editing an object's info key"
    },
    "job-inputs-item": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "http",
            "scitran"
          ]
        },
        "uri": {
          "type": "string"
        },
        "location": {
          "type": "string"
        },
        "vu": {
          "type": "string"
        }
      },
      "required": [
        "type",
        "uri",
        "location"
      ]
    },
    "job-inputs-object": {
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/file-reference"
      }
    },
    "job-inputs-array": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "group",
              "project",
              "session",
              "acquisition",
              "collection",
              "analysis"
            ],
            "description": "The type of container (e.g. session)"
          },
          "id": {
            "type": "string",
            "description": "Unique database ID"
          },
          "name": {
            "type": "string",
            "description": "The name of the file on disk"
          },
          "input": {
            "type": "string"
          }
        }
      }
    },
    "job-destination": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "id": {
          "type": "string"
        }
      },
      "required": [
        "type",
        "id"
      ],
      "additionalProperties": false
    },
    "job-origin": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "id": {
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "additionalProperties": false
    },
    "job-log-statement": {
      "type": "object",
      "properties": {
        "fd": {
          "type": "integer"
        },
        "msg": {
          "type": "string"
        }
      },
      "required": [
        "fd",
        "msg"
      ]
    },
    "job-log": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "pattern": "^[a-fA-F0-9]{24}$",
          "description": "Unique database ID"
        },
        "logs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/job-log-statement"
          }
        }
      }
    },
    "job-saved-files": {
      "type": "array",
      "items": {
        "type": "string",
        "description": "The name of the file on disk"
      }
    },
    "job-produced-metadata": {
      "type": "object"
    },
    "job-tags": {
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "job-config": {
      "type": "object",
      "properties": {}
    },
    "job-request": {
      "type": "object",
      "properties": {
        "inputs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/job-inputs-item"
          }
        },
        "target": {
          "type": "object"
        },
        "outputs": {
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      }
    },
    "job": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "pattern": "^[a-fA-F0-9]{24}$",
          "description": "Unique database ID"
        },
        "origin": {
          "$ref": "#/definitions/job-origin"
        },
        "gear_id": {
          "type": "string"
        },
        "previous_job_id": {
          "type": "string"
        },
        "inputs": {
          "$ref": "#/definitions/job-inputs-object"
        },
        "destination": {
          "$ref": "#/definitions/job-destination"
        },
        "tags": {
          "$ref": "#/definitions/job-tags"
        },
        "state": {
          "type": "string",
          "enum": [
            "pending",
            "running",
            "failed",
            "complete",
            "cancelled"
          ]
        },
        "attempt": {
          "type": "integer"
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "description": "Creation time (automatically set)"
        },
        "modified": {
          "type": "string",
          "format": "date-time",
          "description": "Last modification time (automatically updated)"
        },
        "config": {
          "$ref": "#/definitions/job-config"
        },
        "request": {
          "$ref": "#/definitions/job-request"
        },
        "saved_files": {
          "$ref": "#/definitions/job-saved-files"
        },
        "produced_metadata": {
          "$ref": "#/definitions/job-produced-metadata"
        }
      },
      "additionalProperties": false,
      "x-sdk-model": "job"
    },
    "job-input": {
      "type": "object",
      "properties": {
        "gear_id": {
          "type": "string"
        },
        "inputs": {
          "$ref": "#/definitions/job-inputs-object"
        },
        "destination": {
          "$ref": "#/definitions/job-destination"
        },
        "tags": {
          "$ref": "#/definitions/job-tags"
        },
        "config": {
          "$ref": "#/definitions/job-config"
        }
      },
      "required": [
        "gear_id"
      ],
      "additionalProperties": false,
      "x-sdk-model": "job"
    },
    "job-output": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/job"
        }
      ],
      "required": [
        "id",
        "gear_id",
        "inputs",
        "config",
        "destination",
        "tags",
        "state",
        "attempt"
      ],
      "x-sdk-model": "job"
    },
    "modality": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string",
          "pattern": "^[0-9a-zA-Z_-]{2,64}$",
          "description": "Unique database ID"
        },
        "classification": {
          "$ref": "#/definitions/common-classification"
        }
      },
      "additionalProperties": false
    },
    "note-input": {
      "type": "object",
      "properties": {
        "text": {
          "type": "string",
          "description": "The actual contents of the note",
          "x-sdk-positional": true
        }
      },
      "additionalProperties": false,
      "x-sdk-model": "note"
    },
    "notes-list-input": {
      "type": "array",
      "items": {
        "allOf": [
          {
            "$ref": "#/definitions/note-input"
          }
        ]
      }
    },
    "note-output": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string",
          "pattern": "^[a-fA-F0-9]{24}$",
          "description": "Unique database ID"
        },
        "text": {
          "type": "string",
          "description": "The actual contents of the note",
          "x-sdk-positional": true
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "description": "Creation time (automatically set)"
        },
        "modified": {
          "type": "string",
          "format": "date-time",
          "description": "Last modification time (automatically updated)"
        },
        "user": {
          "type": "string",
          "format": "email",
          "description": "Database ID of a user"
        }
      },
      "additionalProperties": false,
      "required": [
        "_id",
        "text",
        "created",
        "modified",
        "user"
      ],
      "x-sdk-model": "note",
      "description": "A freeform note"
    },
    "notes-list-output": {
      "type": "array",
      "items": {
        "allOf": [
          {
            "$ref": "#/definitions/note-output"
          }
        ]
      }
    },
    "packfile-project-input": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string"
        }
      },
      "additionalProperties": false,
      "required": [
        "_id"
      ]
    },
    "packfile-session-input": {
      "type": "object",
      "properties": {
        "label": {
          "type": "string"
        },
        "subject": {
          "$ref": "#/definitions/subject-input"
        }
      },
      "additionalProperties": false,
      "required": [
        "label"
      ]
    },
    "packfile-acquisition-input": {
      "type": "object",
      "properties": {
        "label": {
          "type": "string"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time"
        },
        "timezone": {
          "type": "string"
        }
      },
      "additionalProperties": false,
      "required": [
        "label"
      ]
    },
    "packfile-packfile-input": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        }
      },
      "additionalProperties": false,
      "required": [
        "type"
      ]
    },
    "packfile-input": {
      "title": "Packfile",
      "type": "object",
      "properties": {
        "project": {
          "$ref": "#/definitions/packfile-project-input"
        },
        "session": {
          "$ref": "#/definitions/packfile-session-input"
        },
        "acquisition": {
          "$ref": "#/definitions/packfile-acquisition-input"
        },
        "packfile": {
          "$ref": "#/definitions/packfile-packfile-input"
        }
      },
      "required": [
        "project",
        "session",
        "acquisition",
        "packfile"
      ],
      "additionalProperties": false,
      "x-sdk-model": "packfile"
    },
    "packfile-start": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string"
        }
      },
      "x-sdk-return": "token"
    },
    "permission": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string",
          "format": "email",
          "description": "Database ID of a user"
        },
        "access": {
          "type": "string",
          "enum": [
            "ro",
            "rw",
            "admin"
          ],
          "description": "Access level"
        }
      },
      "additionalProperties": false,
      "x-sdk-model": "permission"
    },
    "permission-output-default-required": {
      "allOf": [
        {
          "$ref": "#/definitions/permission"
        }
      ],
      "required": [
        "_id",
        "access"
      ],
      "x-sdk-model": "permission"
    },
    "permission-output-list": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/permission-output-default-required"
      },
      "uniqueItems": true,
      "description": "Array of user roles"
    },
    "project-template-requirement": {
      "type": "object",
      "properties": {
        "minimum": {
          "type": "integer",
          "minimum": 0
        },
        "maximum": {
          "type": "integer",
          "minimum": 0
        }
      }
    },
    "project-template": {
      "description": "A project's session template",
      "type": "object",
      "properties": {
        "session": {
          "type": "object"
        },
        "acquisitions": {
          "type": "array",
          "minItems": 1,
          "items": {
            "$ref": "#/definitions/project-template-requirement"
          }
        }
      },
      "additionalProperties": false
    },
    "project-input": {
      "type": "object",
      "properties": {
        "public": {
          "type": "boolean",
          "description": "Indicates whether or not a container is public"
        },
        "label": {
          "type": "string",
          "minLength": 1,
          "maxLength": 256,
          "description": "Application-specific label"
        },
        "info": {
          "$ref": "#/definitions/container-info"
        },
        "description": {
          "type": "string"
        },
        "group": {
          "type": "string",
          "maxLength": 64,
          "minLength": 2,
          "pattern": "^[0-9a-z][0-9a-z.@_-]{0,30}[0-9a-z]$"
        }
      },
      "additionalProperties": false,
      "x-sdk-model": "project"
    },
    "project-metadata-input": {
      "type": "object",
      "properties": {
        "public": {
          "type": "boolean"
        },
        "label": {
          "type": "string"
        },
        "info": {
          "type": "object"
        },
        "files": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/file-input"
          }
        }
      },
      "additionalProperties": false
    },
    "project-output": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string",
          "pattern": "^[a-fA-F0-9]{24}$",
          "description": "Unique database ID"
        },
        "public": {
          "type": "boolean",
          "description": "Indicates whether or not a container is public"
        },
        "label": {
          "type": "string",
          "minLength": 1,
          "maxLength": 256,
          "description": "Application-specific label"
        },
        "info": {
          "$ref": "#/definitions/container-info"
        },
        "info_exists": {
          "type": "boolean",
          "description": "Flag that indicates whether or not info exists on this container"
        },
        "description": {
          "type": "string"
        },
        "group": {
          "type": "string",
          "maxLength": 64,
          "minLength": 2,
          "pattern": "^[0-9a-z][0-9a-z.@_-]{0,30}[0-9a-z]$"
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "description": "Creation time (automatically set)"
        },
        "modified": {
          "type": "string",
          "format": "date-time",
          "description": "Last modification time (automatically updated)"
        },
        "template": {
          "type": "object"
        },
        "permissions": {
          "$ref": "#/definitions/permission-output-list"
        },
        "files": {
          "type": "array",
          "items": {
            "allOf": [
              {
                "$ref": "#/definitions/file-output"
              }
            ]
          }
        },
        "notes": {
          "$ref": "#/definitions/notes-list-output"
        },
        "tags": {
          "$ref": "#/definitions/tag-list"
        },
        "analyses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/analysis-output"
          }
        }
      },
      "additionalProperties": false,
      "x-sdk-model": "project"
    },
    "report-gender-count": {
      "type": "object",
      "properties": {
        "Male": {
          "type": "integer"
        },
        "Unknown or Not Reported": {
          "type": "integer"
        },
        "Female": {
          "type": "integer"
        }
      },
      "additionalProperties": false,
      "required": [
        "Male",
        "Female",
        "Unknown or Not Reported"
      ]
    },
    "report-ethnicity-grid": {
      "type": "object",
      "properties": {
        "Not Hispanic or Latino": {
          "allOf": [
            {
              "$ref": "#/definitions/report-gender-count"
            }
          ]
        },
        "Hispanic or Latino": {
          "allOf": [
            {
              "$ref": "#/definitions/report-gender-count"
            }
          ]
        },
        "Unknown or Not Reported": {
          "allOf": [
            {
              "$ref": "#/definitions/report-gender-count"
            }
          ]
        },
        "Total": {
          "type": "integer"
        }
      }
    },
    "report-demographics-grid": {
      "type": "object",
      "properties": {
        "Black or African American": {
          "allOf": [
            {
              "$ref": "#/definitions/report-ethnicity-grid"
            }
          ]
        },
        "Unknown or Not Reported": {
          "allOf": [
            {
              "$ref": "#/definitions/report-ethnicity-grid"
            }
          ]
        },
        "American Indian or Alaska Native": {
          "allOf": [
            {
              "$ref": "#/definitions/report-ethnicity-grid"
            }
          ]
        },
        "Asian": {
          "allOf": [
            {
              "$ref": "#/definitions/report-ethnicity-grid"
            }
          ]
        },
        "White": {
          "allOf": [
            {
              "$ref": "#/definitions/report-ethnicity-grid"
            }
          ]
        },
        "Total": {
          "allOf": [
            {
              "$ref": "#/definitions/report-ethnicity-grid"
            }
          ]
        },
        "Native Hawaiian or Other Pacific Islander": {
          "allOf": [
            {
              "$ref": "#/definitions/report-ethnicity-grid"
            }
          ]
        },
        "More Than One Race": {
          "allOf": [
            {
              "$ref": "#/definitions/report-ethnicity-grid"
            }
          ]
        },
        "male_count": {
          "type": "integer"
        },
        "group_label": {
          "type": "string",
          "minLength": 1,
          "maxLength": 256,
          "description": "Application-specific label"
        },
        "over_18_count": {
          "type": "integer"
        },
        "under_18_count": {
          "type": "integer"
        },
        "female_count": {
          "type": "integer"
        },
        "subjects_count": {
          "type": "integer"
        },
        "other_count": {
          "type": "integer"
        },
        "name": {
          "type": "string",
          "minLength": 1,
          "maxLength": 256,
          "description": "Application-specific label"
        },
        "session_count": {
          "type": "integer"
        },
        "admins": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "demographics_total": {
          "type": "integer"
        }
      }
    },
    "report-group-report": {
      "type": "object",
      "properties": {
        "project_count": {
          "type": "integer"
        },
        "label": {
          "maxLength": 64,
          "minLength": 1,
          "pattern": "^[0-9A-Za-z][0-9A-Za-z .@_-]{0,30}[0-9A-Za-z]$",
          "title": "label",
          "type": "string",
          "description": "The group label"
        },
        "session_count": {
          "type": "integer"
        }
      },
      "additionalProperties": false,
      "required": [
        "project_count",
        "label",
        "session_count"
      ]
    },
    "report-project": {
      "type": "object",
      "properties": {
        "projects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/report-demographics-grid"
          }
        }
      }
    },
    "report-site": {
      "type": "object",
      "properties": {
        "group_count": {
          "type": "integer"
        },
        "groups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/report-group-report"
          }
        }
      },
      "additionalProperties": false,
      "required": [
        "group_count",
        "groups"
      ]
    },
    "resolver-input": {
      "type": "object",
      "properties": {
        "path": {
          "type": "array",
          "minLength": 1,
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "path"
      ]
    },
    "resolver-output": {
      "type": "object",
      "properties": {
        "path": {
          "$ref": "#/definitions/resolver-node-list"
        },
        "children": {
          "$ref": "#/definitions/resolver-node-list"
        }
      },
      "required": [
        "path"
      ]
    },
    "resolver-node": {
      "type": "object",
      "properties": {
        "node_type": {
          "type": "string"
        }
      },
      "discriminator": "node_type",
      "required": [
        "node_type"
      ]
    },
    "resolver-node-list": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/resolver-node"
      }
    },
    "resolver-group-node": {
      "allOf": [
        {
          "$ref": "#/definitions/resolver-node"
        },
        {
          "$ref": "#/definitions/group-output"
        }
      ],
      "x-discriminator-value": "group"
    },
    "resolver-project-node": {
      "allOf": [
        {
          "$ref": "#/definitions/resolver-node"
        },
        {
          "$ref": "#/definitions/project-output"
        }
      ],
      "x-discriminator-value": "project"
    },
    "resolver-session-node": {
      "allOf": [
        {
          "$ref": "#/definitions/resolver-node"
        },
        {
          "$ref": "#/definitions/session-output"
        }
      ],
      "x-discriminator-value": "session"
    },
    "resolver-acquisition-node": {
      "allOf": [
        {
          "$ref": "#/definitions/resolver-node"
        },
        {
          "$ref": "#/definitions/acquisition-output"
        }
      ],
      "x-discriminator-value": "acquisition"
    },
    "resolver-file-node": {
      "allOf": [
        {
          "$ref": "#/definitions/resolver-node"
        },
        {
          "$ref": "#/definitions/file-output"
        }
      ],
      "x-discriminator-value": "file"
    },
    "rule-items": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "file.type",
              "file.name",
              "file.classification",
              "container.has-type",
              "container.has-classification"
            ]
          },
          "value": {
            "type": "string"
          },
          "regex": {
            "type": "boolean"
          }
        },
        "required": [
          "type",
          "value"
        ],
        "additionalProperties": false
      }
    },
    "rule-input": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string"
        },
        "project_id": {
          "type": "string"
        },
        "alg": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "any": {
          "$ref": "#/definitions/rule-items"
        },
        "all": {
          "$ref": "#/definitions/rule-items"
        },
        "not": {
          "$ref": "#/definitions/rule-items"
        },
        "disabled": {
          "type": "boolean"
        }
      },
      "additionalProperties": false,
      "x-sdk-model": "rule"
    },
    "rule-output": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string"
        },
        "alg": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "any": {
          "$ref": "#/definitions/rule-items"
        },
        "all": {
          "$ref": "#/definitions/rule-items"
        },
        "not": {
          "$ref": "#/definitions/rule-items"
        },
        "disabled": {
          "type": "boolean"
        }
      },
      "x-sdk-model": "rule"
    },
    "search-query": {
      "type": "object",
      "properties": {
        "return_type": {
          "type": "string",
          "enum": [
            "file",
            "acquisition",
            "session",
            "analysis",
            "collection"
          ],
          "description": "Sets the type of search results to return"
        },
        "search_string": {
          "type": "string",
          "description": "Represents the plain text search query"
        },
        "all_data": {
          "type": "boolean",
          "description": "When set will include all data that the user does not have access to read",
          "default": false
        },
        "filters": {
          "type": "object",
          "description": "See https://www.elastic.co/guide/en/elasticsearch/reference/current/term-level-queries.html"
        }
      },
      "required": [
        "return_type"
      ]
    },
    "search-project-response": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string",
          "description": "Unique database ID"
        },
        "label": {
          "type": "string",
          "minLength": 1,
          "maxLength": 256,
          "description": "Application-specific label"
        }
      },
      "description": "Fields for project search response"
    },
    "search-group-response": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string",
          "description": "Unique database ID"
        },
        "label": {
          "type": "string",
          "minLength": 1,
          "maxLength": 256,
          "description": "Application-specific label"
        }
      },
      "description": "Fields for group search response"
    },
    "search-session-response": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string",
          "description": "Unique database ID"
        },
        "label": {
          "type": "string",
          "minLength": 1,
          "maxLength": 256,
          "description": "Application-specific label"
        },
        "timestamp": {
          "$ref": "#/definitions/common-timestamp"
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "description": "Creation time (automatically set)"
        }
      },
      "description": "Fields for session search response"
    },
    "search-acquisition-response": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string",
          "description": "Unique database ID"
        },
        "label": {
          "type": "string",
          "minLength": 1,
          "maxLength": 256,
          "description": "Application-specific label"
        },
        "timestamp": {
          "$ref": "#/definitions/common-timestamp"
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "description": "Creation time (automatically set)"
        }
      },
      "description": "Fields for acquisition search response"
    },
    "search-subject-response": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "maxLength": 64,
          "description": "A unique identifier for the subject"
        }
      },
      "description": "Fields for subject search response"
    },
    "search-file-response": {
      "type": "object",
      "properties": {
        "classification": {
          "$ref": "#/definitions/common-classification"
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "description": "Creation time (automatically set)"
        },
        "type": {
          "type": "string",
          "description": "A descriptive file type (e.g. dicom, image, document, ...)"
        },
        "name": {
          "type": "string",
          "description": "The name of the file on disk"
        },
        "size": {
          "type": "integer",
          "description": "Size of the file, in bytes"
        }
      },
      "description": "Fields for file search response"
    },
    "search-analysis-response": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string",
          "description": "Unique database ID"
        },
        "label": {
          "type": "string",
          "minLength": 1,
          "maxLength": 256,
          "description": "Application-specific label"
        },
        "user": {
          "type": "string",
          "format": "email",
          "description": "Database ID of a user"
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "description": "Creation time (automatically set)"
        }
      },
      "description": "Fields for acquisition search response"
    },
    "search-parent-response": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string",
          "description": "Unique database ID"
        },
        "type": {
          "type": "string",
          "enum": [
            "group",
            "project",
            "session",
            "acquisition",
            "collection",
            "analysis"
          ],
          "description": "The type of container (e.g. session)"
        }
      },
      "description": "Fields for parent search response"
    },
    "search-collection-response": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string",
          "description": "Unique database ID"
        },
        "label": {
          "type": "string",
          "minLength": 1,
          "maxLength": 256,
          "description": "Application-specific label"
        },
        "curator": {
          "type": "string",
          "format": "email",
          "description": "Database ID of a user"
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "description": "Creation time (automatically set)"
        }
      },
      "description": "Fields for collection search response"
    },
    "search-response": {
      "type": "object",
      "properties": {
        "project": {
          "$ref": "#/definitions/search-project-response"
        },
        "group": {
          "$ref": "#/definitions/search-group-response"
        },
        "session": {
          "$ref": "#/definitions/search-session-response"
        },
        "acquisition": {
          "$ref": "#/definitions/search-acquisition-response"
        },
        "subject": {
          "$ref": "#/definitions/search-subject-response"
        },
        "file": {
          "$ref": "#/definitions/search-file-response"
        },
        "collection": {
          "$ref": "#/definitions/search-collection-response"
        },
        "analysis": {
          "$ref": "#/definitions/search-analysis-response"
        },
        "parent": {
          "$ref": "#/definitions/search-parent-response"
        },
        "permissions": {
          "$ref": "#/definitions/permission-output-list"
        }
      },
      "description": "Single search response entry"
    },
    "session-input": {
      "type": "object",
      "properties": {
        "operator": {
          "type": "string",
          "description": "The name of the operator"
        },
        "public": {
          "type": "boolean",
          "description": "Indicates whether or not a container is public"
        },
        "label": {
          "type": "string",
          "minLength": 1,
          "maxLength": 256,
          "description": "Application-specific label"
        },
        "info": {
          "$ref": "#/definitions/container-info"
        },
        "project": {
          "type": "string",
          "pattern": "^[a-fA-F0-9]{24}$",
          "description": "Unique database ID"
        },
        "uid": {
          "type": "string",
          "description": "A user database ID"
        },
        "timestamp": {
          "$ref": "#/definitions/container-timestamp"
        },
        "timezone": {
          "type": "string"
        },
        "subject": {
          "$ref": "#/definitions/subject-input"
        }
      },
      "additionalProperties": false,
      "x-sdk-model": "session"
    },
    "session-metadata-input": {
      "type": "object",
      "properties": {
        "public": {
          "type": "boolean"
        },
        "label": {
          "type": "string"
        },
        "info": {
          "type": "object"
        },
        "operator": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time"
        },
        "timezone": {
          "type": "string"
        },
        "subject": {
          "$ref": "#/definitions/subject-input"
        },
        "files": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/file-input"
          }
        }
      },
      "additionalProperties": false
    },
    "session-output": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string",
          "pattern": "^[a-fA-F0-9]{24}$",
          "description": "Unique database ID"
        },
        "public": {
          "type": "boolean",
          "description": "Indicates whether or not a container is public"
        },
        "label": {
          "type": "string",
          "minLength": 1,
          "maxLength": 256,
          "description": "Application-specific label"
        },
        "info": {
          "$ref": "#/definitions/container-info"
        },
        "info_exists": {
          "type": "boolean",
          "description": "Flag that indicates whether or not info exists on this container"
        },
        "operator": {
          "type": "string",
          "description": "The name of the operator"
        },
        "project": {
          "type": "string",
          "pattern": "^[a-fA-F0-9]{24}$",
          "description": "Unique database ID"
        },
        "uid": {
          "type": "string",
          "description": "A user database ID"
        },
        "timestamp": {
          "$ref": "#/definitions/container-timestamp"
        },
        "timezone": {
          "type": "string"
        },
        "subject": {
          "$ref": "#/definitions/subject-output-default-required"
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "description": "Creation time (automatically set)"
        },
        "modified": {
          "type": "string",
          "format": "date-time",
          "description": "Last modification time (automatically updated)"
        },
        "permissions": {
          "$ref": "#/definitions/permission-output-list"
        },
        "group": {
          "type": "string",
          "maxLength": 64,
          "minLength": 2,
          "pattern": "^[0-9a-z][0-9a-z.@_-]{0,30}[0-9a-z]$"
        },
        "project_has_template": {
          "type": "boolean"
        },
        "satisfies_template": {
          "type": "boolean"
        },
        "files": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/file-output"
          }
        },
        "notes": {
          "$ref": "#/definitions/notes-list-output"
        },
        "tags": {
          "$ref": "#/definitions/tag-list"
        },
        "analyses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/analysis-output"
          }
        }
      },
      "additionalProperties": false,
      "x-sdk-model": "session"
    },
    "session-jobs-output": {
      "type": "object",
      "properties": {
        "jobs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/job-output"
          }
        },
        "containers": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      },
      "additionalProperties": false
    },
    "session-template-recalc-output": {
      "type": "object",
      "properties": {
        "sessions_changed": {
          "type": "array",
          "items": {
            "allOf": [
              {
                "type": "string",
                "pattern": "^[a-fA-F0-9]{24}$",
                "description": "Unique database ID"
              }
            ]
          }
        }
      },
      "additionalProperties": false,
      "required": [
        "sessions_changed"
      ]
    },
    "subject-age": {
      "type": "integer",
      "description": "Age at time of session, in seconds"
    },
    "subject-sex": {
      "type": "string",
      "enum": [
        "male",
        "female",
        "other",
        "unknown"
      ]
    },
    "subject-race": {
      "type": "string",
      "enum": [
        "American Indian or Alaska Native",
        "Asian",
        "Native Hawaiian or Other Pacific Islander",
        "Black or African American",
        "White",
        "More Than One Race",
        "Unknown or Not Reported"
      ]
    },
    "subject-ethnicity": {
      "type": "string",
      "enum": [
        "Not Hispanic or Latino",
        "Hispanic or Latino",
        "Unknown or Not Reported"
      ]
    },
    "subject-input": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string",
          "pattern": "^[a-fA-F0-9]{24}$",
          "description": "Unique database ID"
        },
        "firstname": {
          "type": "string",
          "maxLength": 64,
          "description": "First name"
        },
        "lastname": {
          "type": "string",
          "maxLength": 64,
          "description": "Last name"
        },
        "age": {
          "$ref": "#/definitions/subject-age"
        },
        "sex": {
          "$ref": "#/definitions/subject-sex"
        },
        "race": {
          "$ref": "#/definitions/subject-race"
        },
        "ethnicity": {
          "$ref": "#/definitions/subject-ethnicity"
        },
        "code": {
          "type": "string",
          "maxLength": 64,
          "description": "A unique identifier for the subject"
        },
        "tags": {
          "$ref": "#/definitions/tag-list"
        },
        "info": {
          "$ref": "#/definitions/common-info"
        },
        "files": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/file-input"
          }
        }
      },
      "additionalProperties": false,
      "x-sdk-model": "subject"
    },
    "subject-output": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string",
          "pattern": "^[a-fA-F0-9]{24}$",
          "description": "Unique database ID"
        },
        "firstname": {
          "type": "string",
          "maxLength": 64,
          "description": "First name"
        },
        "lastname": {
          "type": "string",
          "maxLength": 64,
          "description": "Last name"
        },
        "age": {
          "$ref": "#/definitions/subject-age"
        },
        "sex": {
          "$ref": "#/definitions/subject-sex"
        },
        "race": {
          "$ref": "#/definitions/subject-race"
        },
        "ethnicity": {
          "$ref": "#/definitions/subject-ethnicity"
        },
        "code": {
          "type": "string",
          "maxLength": 64,
          "description": "A unique identifier for the subject"
        },
        "tags": {
          "$ref": "#/definitions/tag-list"
        },
        "info": {
          "$ref": "#/definitions/common-info"
        },
        "info_exists": {
          "type": "boolean",
          "description": "Flag that indicates whether or not info exists on this container"
        },
        "files": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/file-output"
          }
        }
      },
      "additionalProperties": false,
      "x-sdk-model": "subject"
    },
    "subject-output-default-required": {
      "allOf": [
        {
          "$ref": "#/definitions/subject-output"
        }
      ],
      "required": [
        "_id"
      ],
      "x-sdk-model": "subject"
    },
    "tag": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string",
          "minLength": 1,
          "maxLength": 32,
          "x-sdk-positional": true
        }
      },
      "additionalProperties": false,
      "required": [
        "value"
      ]
    },
    "tag-list": {
      "type": "array",
      "items": {
        "allOf": [
          {
            "type": "string"
          }
        ]
      },
      "description": "Array of application-specific tags"
    },
    "user-preferences": {
      "title": "Preferences",
      "type": "object"
    },
    "user-wechat": {},
    "user-api-key": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "description": "Creation time (automatically set)"
        },
        "last_used": {
          "$ref": "#/definitions/common-timestamp"
        }
      },
      "additionalProperties": false
    },
    "user-input": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string",
          "format": "email",
          "description": "Database ID of a user"
        },
        "firstname": {
          "maxLength": 64,
          "minLength": 1,
          "title": "First Name",
          "type": "string",
          "description": "First name"
        },
        "lastname": {
          "maxLength": 64,
          "minLength": 1,
          "title": "Last Name",
          "type": "string",
          "description": "Last name"
        },
        "email": {
          "format": "email",
          "title": "Email",
          "type": "string",
          "description": "Email address"
        },
        "avatar": {
          "format": "uri",
          "title": "Avatar",
          "type": "string",
          "description": "Avatar image URL"
        },
        "avatars": {
          "$ref": "#/definitions/avatars"
        },
        "root": {
          "type": "boolean",
          "description": "Super admin flag"
        },
        "disabled": {
          "type": "boolean"
        },
        "preferences": {
          "$ref": "#/definitions/user-preferences"
        },
        "wechat": {
          "$ref": "#/definitions/user-wechat"
        },
        "firstlogin": {
          "type": "string"
        },
        "lastlogin": {
          "type": "string"
        }
      },
      "additionalProperties": false,
      "x-sdk-model": "user"
    },
    "user-output": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string",
          "format": "email",
          "description": "Database ID of a user"
        },
        "firstname": {
          "maxLength": 64,
          "minLength": 1,
          "title": "First Name",
          "type": "string",
          "description": "First name"
        },
        "lastname": {
          "maxLength": 64,
          "minLength": 1,
          "title": "Last Name",
          "type": "string",
          "description": "Last name"
        },
        "email": {
          "format": "email",
          "title": "Email",
          "type": "string",
          "description": "Email address"
        },
        "avatar": {
          "format": "uri",
          "title": "Avatar",
          "type": "string",
          "description": "Avatar image URL"
        },
        "avatars": {
          "$ref": "#/definitions/avatars"
        },
        "root": {
          "type": "boolean",
          "description": "Super admin flag"
        },
        "disabled": {
          "type": "boolean"
        },
        "preferences": {
          "$ref": "#/definitions/user-preferences"
        },
        "wechat": {
          "$ref": "#/definitions/user-wechat"
        },
        "firstlogin": {
          "type": "string"
        },
        "lastlogin": {
          "type": "string"
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "description": "Creation time (automatically set)"
        },
        "modified": {
          "type": "string",
          "format": "date-time",
          "description": "Last modification time (automatically updated)"
        }
      },
      "additionalProperties": false,
      "x-sdk-model": "user"
    },
    "user-output-api-key": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string",
          "format": "email",
          "description": "Database ID of a user"
        },
        "api_key": {
          "$ref": "#/definitions/user-api-key"
        },
        "firstname": {
          "maxLength": 64,
          "minLength": 1,
          "title": "First Name",
          "type": "string",
          "description": "First name"
        },
        "lastname": {
          "maxLength": 64,
          "minLength": 1,
          "title": "Last Name",
          "type": "string",
          "description": "Last name"
        },
        "email": {
          "format": "email",
          "title": "Email",
          "type": "string",
          "description": "Email address"
        },
        "avatar": {
          "format": "uri",
          "title": "Avatar",
          "type": "string",
          "description": "Avatar image URL"
        },
        "avatars": {
          "$ref": "#/definitions/avatars"
        },
        "root": {
          "type": "boolean",
          "description": "Super admin flag"
        },
        "disabled": {
          "type": "boolean"
        },
        "preferences": {
          "$ref": "#/definitions/user-preferences"
        },
        "wechat": {
          "$ref": "#/definitions/user-wechat"
        },
        "firstlogin": {
          "type": "string"
        },
        "lastlogin": {
          "type": "string"
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "description": "Creation time (automatically set)"
        },
        "modified": {
          "type": "string",
          "format": "date-time",
          "description": "Last modification time (automatically updated)"
        }
      },
      "additionalProperties": false,
      "required": [
        "_id",
        "firstname",
        "lastname",
        "root",
        "email",
        "created",
        "modified"
      ],
      "x-sdk-model": "user"
    },
    "version-output": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string"
        },
        "database": {
          "type": "integer"
        },
        "release": {
          "type": "string"
        }
      },
      "required": [
        "_id",
        "database"
      ]
    }
  }
}