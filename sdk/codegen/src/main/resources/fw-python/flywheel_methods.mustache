    def add_nodes_to_collection(self, collection_id, level, node_ids, **kwargs):
        """Generic method to add a list of nodes to a collection.

        :param str collection_id: (required) The id of the collection to update
        :param str level: (required) The level of nodes to add (e.g. session or acquisition)
        :param list[str] node_ids: (required) The list of node ids of type level to add
        :return: None
        """
        update = {
            'contents': {
                'operation': 'add',
                'nodes': [ {'_id': id, 'level': level} for id in node_ids ]
            }
        }
        return self.collections_api.modify_collection(collection_id, update, **kwargs)

    def add_sessions_to_collection(self, collection_id, session_ids, **kwargs):
        """Add a list of sessions to a collection.

        :param str collection_id: (required) The id of the collection to update
        :param list[str] session_ids: (required) The list of session ids to add
        :return: None
        """
        return self.add_nodes_to_collection(collection_id, 'session', session_ids, **kwargs)

    def add_acquisitions_to_collection(self, collection_id, acquisition_ids, **kwargs):
        """Add a list of acquisitions to a collection.

        :param str collection_id: (required) The id of the collection to update
        :param list[str] acquisition_ids: (required) The list of acquisition ids to add
        :return: None
        """
        return self.add_nodes_to_collection(collection_id, 'acquisition', acquisition_ids, **kwargs)

    def change_job_state(self, job_id, state):
        """Change a job state.

        :param str job_id: (required) The id of the job to modify
        :param str state: (required) The new job state
        :return: None
        """
        return self.modify_job(job_id, { 'state': state })

    def get(self, id, **kwargs):
        """Retrieve the specified object by id.

        Objects that can be retrieved in this way are:
            group, project, session, subject, acquisition, analysis and collection

        :param str id: The id of the object to retrieve
        :return: ContainerOutput
        """
        return self.get_container(id, **kwargs)

    def resolve(self, path, **kwargs):
        """Perform a path based lookup of nodes in the Flywheel hierarchy.

        :param str path: (required) The path to resolve
        :return: ResolverOutput
        """
        if not isinstance(path, list):
            path = path.split('/')

        return self.resolve_path(flywheel.ResolverInput(path=path), **kwargs)

    def lookup(self, path):
        """Perform a path based lookup of a single node in the Flywheel hierarchy.

        :param str path: (required) The path to resolve
        :return: ResolverOutput
        """
        if not isinstance(path, list):
            path = path.split('/')

        return self.lookup_path(flywheel.ResolverInput(path=path))

    def file_url(self, path):
        """Perform a path based lookup of a file in the Flywheel hierarchy, and return a single-use download URL.

        :param str path: (required) The path to resolve
        :return: The file URL if found, otherwise raises an error
        """
        result = self.resolve(path)
        if getattr(result.path[-1], 'container_type', None) != 'file':
            raise ValueError('Resolved path is not a file!')

        return result.path[-1].url()

    def download_tar(self, containers, dest_file, include_types=None, exclude_types=None):
        """Download the given set of containers as a tarball to dest_file.

        Supports downloading Projects, Sessions, Acquisitions and/or Analyses.

        :param containers: (required) The container, or list of containers to download.
        :param str dest_file: (required) The destination file on disk
        :param list include_types: The optional list of types to include in the download (e.g. ['nifti'])
        :param list exclude_types: The optional list of types to exclude from the download (e.g. ['dicom'])
        :return: A summary of the download
        """
        if not isinstance(containers, list):
            containers = [containers]

        # Extract the list of nodes
        nodes = []
        for container in containers:
            container_type = getattr(container, 'container_type', None)
            if container_type is None:
                raise ValueError('Unknown container specified!')

            nodes.append(flywheel.DownloadNode(level=container_type, id=container.id))

        # Setup filters
        type_filter = None
        if include_types or exclude_types:
            type_filter = flywheel.DownloadFilterDefinition(plus=include_types, minus=exclude_types)

        download_filters = None
        if type_filter:
            download_filters = [flywheel.DownloadFilter(types=type_filter)]

        # Create download request
        request = flywheel.Download(nodes=nodes, filters=download_filters, optional=True)
        summary = self.create_download_ticket(request)

        # Perform download
        self.download_ticket(summary.ticket, dest_file)
        return summary

    {{#apis}}
    {{#operations}}
    {{#operation}}
    {{#vendorExtensions.x-sdk-modify-wrapper}}
    def {{wrapperId}}(self, {{#allParams}}{{#required}}{{paramName}}, {{/required}}{{/allParams}}**kwargs):
        """{{summary}}

        {{#allParams}}
        :param {{dataType}} {{paramName}}:{{#description}} {{{description}}}{{/description}}{{#required}} (required){{/required}}{{#optional}}(optional){{/optional}}
        {{/allParams}}
        :return: {{#returnType}}{{returnType}}{{/returnType}}{{^returnType}}None{{/returnType}}
        """
        body = { '{{key}}': body }
        return self.{{classVarName}}.{{operationId}}({{#allParams}}{{#required}}{{paramName}}, {{/required}}{{/allParams}}**kwargs)

    {{/vendorExtensions.x-sdk-modify-wrapper}}
    {{#vendorExtensions.x-sdk-download-file-param}}
    def {{operationId}}_as_data(self, {{#allParams}}{{#required}}{{paramName}}, {{/required}}{{/allParams}}**kwargs):
        """{{#summary}}{{.}}{{/summary}}{{^summary}}{{operationId}}{{/summary}}

        {{#notes}}
        {{{notes}}}
        {{/notes}}

        {{#allParams}}
        :param {{dataType}} {{paramName}}:{{#description}} {{{description}}}{{/description}}{{#required}} (required){{/required}}{{#optional}}(optional){{/optional}}
        {{/allParams}}
        :return: The binary file data
        """
        kwargs['_return_http_data_only'] = True
        kwargs['_preload_content'] = False
        (resp) = self.{{classVarName}}.{{operationId}}_with_http_info({{#allParams}}{{#required}}{{paramName}}, {{/required}}{{/allParams}}**kwargs)
        if resp:
            return resp.content
        return None

    {{/vendorExtensions.x-sdk-download-file-param}}
    {{/operation}}
    {{/operations}}
    {{/apis}}

    def View(self, **kwargs):
        """Short-hand for flywheel.ViewBuilder(\*\*kwargs).build()

        :param kwargs: The arguments to pass directly to ViewBuilder
        :return: The built data view
        """
        return ViewBuilder(**kwargs).build()

    def print_view_columns(self, file=sys.stdout):
        """Print a list of column aliases that can be used in data views.

        :param file-like file: The file to print to
        """
        for column in self.views_api.get_view_columns():
            if column.group:
                coltype = 'group'
            else:
                coltype = column.type
            six.print_('{} ({}): {}'.format(column.name, coltype, column.description), file=file)

    def read_view_data(self, view, container_id, decode=True, **kwargs):
        """Execute a data view against container, and return a file-like object that can be streamed.

        :param view: The view id or DataView object to execute.
        :type view: str or DataView
        :param str container_id: The id of the container to execute the view against
        :param bool decode: Whether or not to decode the stream to utf-8 (default is true)
        :param kwargs: Additional arguments to pass to the evaluate_view call. (e.g. format='csv')
        :return: A file-like object where the contents can be read
        """
        kwargs['_return_http_data_only'] = True
        kwargs['_preload_content'] = False
        if isinstance(view, six.string_types):
            resp = self.views_api.evaluate_view_with_http_info(view, container_id, **kwargs)
        else:
            resp = self.views_api.evaluate_view_adhoc_with_http_info(container_id, view, **kwargs)
        resp.raw.decode_content = True
        if decode:
            return codecs.getreader(resp.encoding)(resp.raw)
        return resp.raw

    def read_view_dataframe(self, view, container_id, opts=None, **kwargs):
        """Execute a data view against container, and return a DataFrame.

        NOTE: This requires that the pandas module be installed on the system.

        :param view: The view id or DataView object to execute.
        :type view: str or DataView
        :param str container_id: The id of the container to execute the view against
        :param object opts: Additional options to pass to the pandas read_json function
        :param kwargs: Additional arguments to pass to the evaluate_view call.
        :return: A pandas DataFrame
        """
        import pandas

        if opts is None:
            opts = {}

        kwargs['format'] = 'json-flat'
        resp = self.read_view_data(view, container_id, decode=False, **kwargs)
        if resp:
            try:
                df = pandas.read_json(resp, 'records', **opts)
                return df
            finally:
                resp.close()
        return None


    def save_view_data(self, view, container_id, dest_file, **kwargs):
        """Execute a data view against container, and save the results to disk.

        :param view: The view id or DataView object to execute.
        :type view: str or DataView
        :param str container_id: The id of the container to execute the view against
        :param str dest_file: The destination file path
        :param kwargs: Additional arguments to pass to the evaluate_view call. (e.g. format='csv')
        """
        kwargs['_return_http_data_only'] = True
        kwargs['_preload_content'] = False
        # Stream response to file
        with open(dest_file, 'wb') as out_file:
            if isinstance(view, six.string_types):
                resp = self.views_api.evaluate_view_with_http_info(view, container_id, **kwargs)
            else:
                resp = self.views_api.evaluate_view_adhoc_with_http_info(container_id, view, **kwargs)

            if resp:
                try:
                    for chunk in resp.iter_content(chunk_size=65536):
                        out_file.write(chunk)
                finally:
                    resp.close()
