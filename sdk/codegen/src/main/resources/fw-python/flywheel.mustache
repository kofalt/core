# coding: utf-8

# flake8: noqa

{{>partial_header}}

from __future__ import absolute_import

{{#apiInfo}}

import codecs
import os
import sys
import six
import platform
import logging

log = logging.getLogger('Flywheel')

from {{packageName}}.configuration import Configuration
from {{packageName}}.api_client import ApiClient
from {{packageName}}.view_builder import ViewBuilder
from {{packageName}}.finder import Finder
import {{apiPackage}}

SDK_VERSION = "{{packageVersion}}"

def config_from_api_key(api_key):
    parts = api_key.split(':')
    if len(parts) < 2:
        raise Exception('Invalid API key')

    host = parts[0]
    if len(parts) == 2:
        key = parts[1]
        port = '443'
    else:
        port = parts[1]
        key = parts[-1]

    if '__force_insecure' in parts:
        scheme = 'http'
    else:
        scheme = 'https'

    config = Configuration()
    config.host = '{}://{}:{}/api'.format(scheme, host, port)
    config.api_key = {'Authorization': key}
    config.api_key_prefix = {'Authorization': 'scitran-user'}
    return config


class Flywheel:
    def __init__(self, api_key, root=False, skip_version_check=True, subjects_in_resolver=None):
        # Init logging
        logging.basicConfig()

        # Parse API Key and configure api_client
        config = config_from_api_key(api_key)
        self.api_client = ApiClient(config, context=self)

        # Root mode (Deprecated)
        if root:
            log.warning('Root mode is deprecated')
            self.api_client.set_default_query_param('root', 'true')

        self.api_client.user_agent = 'Flywheel SDK/{} (Python {}; {})'.format(SDK_VERSION,
            platform.python_version(), platform.system())

        # Initialize Apis
        {{#apis}}
        self.{{classVarName}} = {{apiPackage}}.{{classname}}(self.api_client)
        {{/apis}}

        # Finder objects
        self.users = Finder(self, 'get_all_users')
        self.groups = Finder(self, 'get_all_groups')
        self.projects = Finder(self, 'get_all_projects')
        self.subjects = Finder(self, 'get_all_subjects')
        self.sessions = Finder(self, 'get_all_sessions')
        self.acquisitions = Finder(self, 'get_all_acquisitions')
        self.jobs = Finder(self, 'get_all_jobs')
        self.gears = Finder(self, 'get_all_gears')
        self.collections = Finder(self, 'get_all_collections')

        # Enable subjects in resolver by default
        if subjects_in_resolver is None:
            subjects_in_resolver = os.environ.get('FLYWHEEL_SDK_SUBJECTS_IN_RESOLVER', '').lower() not in ['0', 'false']

        if subjects_in_resolver:
            self.enable_feature('Subject-Container')

        # Perform version check
        self.check_version = not skip_version_check
        if not self.check_version:
            self.check_version = os.environ.get('FLYWHEEL_SDK_SKIP_VERSION_CHECK', '').lower() in ['0', 'false']
        self.api_client.set_version_check_fn(self.perform_version_check)

    {{#apis}}
    {{#operations}}
    {{#operation}}

    {{^vendorExtensions.x-sdk-download-url}}
    def {{operationId}}(self, {{#sortParamsByRequiredFlag}}{{#allParams}}{{#required}}{{paramName}}, {{/required}}{{/allParams}}{{/sortParamsByRequiredFlag}}{{#vendorExtensions.x-sdk-download-file-param}}{{.}}, {{/vendorExtensions.x-sdk-download-file-param}}**kwargs):  # noqa: E501
        """{{#summary}}{{.}}{{/summary}}{{^summary}}{{operationId}}{{/summary}}

        {{#notes}}
        {{{notes}}}
        {{/notes}}

        {{#allParams}}
        :param {{dataType}} {{paramName}}:{{#description}} {{{description}}}{{/description}}{{#required}} (required){{/required}}{{#optional}}(optional){{/optional}}
        {{/allParams}}
        {{#vendorExtensions.x-sdk-download-file-param}}
        :param str {{.}}: Destination file path
        {{/vendorExtensions.x-sdk-download-file-param}}
        :param bool async_: Perform the request asynchronously
        :return: {{#returnType}}{{returnType}}{{/returnType}}{{^returnType}}None{{/returnType}}
        """
        return self.{{classVarName}}.{{operationId}}({{#sortParamsByRequiredFlag}}{{#allParams}}{{#required}}{{paramName}}, {{/required}}{{/allParams}}{{/sortParamsByRequiredFlag}}{{#vendorExtensions.x-sdk-download-file-param}}{{.}}, {{/vendorExtensions.x-sdk-download-file-param}}**kwargs)

    {{/vendorExtensions.x-sdk-download-url}}
    {{! x-sdk-download-url is a special case where we need to construct and return a full url }}
    {{#vendorExtensions.x-sdk-download-url}}
    def {{.}}(self, {{#sortParamsByRequiredFlag}}{{#allParams}}{{#required}}{{paramName}}, {{/required}}{{/allParams}}{{/sortParamsByRequiredFlag}}{{#vendorExtensions.x-sdk-download-file-param}}{{.}}, {{/vendorExtensions.x-sdk-download-file-param}}**kwargs):  # noqa: E501
        """{{#summary}}{{.}}{{/summary}}{{^summary}}{{operationId}}{{/summary}}

        {{#notes}}
        {{{notes}}}
        {{/notes}}

        {{#allParams}}
        :param {{dataType}} {{paramName}}:{{#description}} {{{description}}}{{/description}}{{#required}} (required){{/required}}{{#optional}}(optional){{/optional}}
        {{/allParams}}
        {{#vendorExtensions.x-sdk-download-file-param}}
        :param str {{.}}: Destination file path
        {{/vendorExtensions.x-sdk-download-file-param}}
        :param bool async_: Perform the request asynchronously
        :return: {{#returnType}}{{returnType}}{{/returnType}}{{^returnType}}None{{/returnType}}
        """
        req_info = {}
        kwargs['_request_out'] = req_info
        kwargs['ticket'] = ''
        data = self.{{classVarName}}.{{operationId}}({{#sortParamsByRequiredFlag}}{{#allParams}}{{#required}}{{paramName}}, {{/required}}{{/allParams}}{{/sortParamsByRequiredFlag}}{{#vendorExtensions.x-sdk-download-file-param}}{{.}}, {{/vendorExtensions.x-sdk-download-file-param}}**kwargs)
        if data is not None:
            data = req_info['url'] + '?ticket=' + data.ticket
        return data
    {{/vendorExtensions.x-sdk-download-url}}
    {{/operation}}
    {{/operations}}
    {{/apis}}

    def enable_feature(self, value):
        """Enable feature named value, via the X-Accept-Feature header"""
        features = self.api_client.default_headers.get('X-Accept-Feature')
        features = features + ' ' + value if features else value
        self.api_client.set_default_header('X-Accept-Feature', features)

    def perform_version_check(self):
        import re
        import warnings

        VERSION_RE = re.compile(r'^(?P<semver>(?P<major>\d+)\.(?P<minor>\d+)(\.(?P<patch>\d+)))?.*')
        release_version = ''
        try:
            version_info = self.default_api.get_version()
            release_version = version_info.release
        except:
            pass

        # If not sdk version
        sdk_version_match = VERSION_RE.match(SDK_VERSION)
        if release_version:
            release_version_match = VERSION_RE.match(release_version)
        else:
            release_version_match = None

        # Log conditionals:
        # 1. Client or server version not set
        # 2. Major version mismatch
        # 3. SDK Minor version > Server Minor version (client features not available on server)
        # 4. SDK Minor version < Server Minor version (new features on server)

        show_pip_message = False
        if sdk_version_match and release_version_match:
            # Compare major/minor version
            sdk_major = int(sdk_version_match.group('major'))
            sdk_minor = int(sdk_version_match.group('minor'))

            release_major = int(release_version_match.group('major'))
            release_minor = int(release_version_match.group('minor'))

            if sdk_major != release_major:
                if SDK_VERSION.find('dev') == -1:
                    # Always print version mismatch
                    warnings.warn('Client version {} does not match server version {}. Please update your client version!'.format(SDK_VERSION, release_version))
                    show_pip_message = True

            elif self.check_version:
                if sdk_minor > release_minor:
                    log.warning('Client version {} is ahead of server version {}. '.format(SDK_VERSION, release_version) +
                        'Not all client functionality will be supported by the server.')
                    show_pip_message = True
                elif sdk_minor < release_minor:
                    log.warning('Client version {} is behind server version {}. '.format(SDK_VERSION, release_version) +
                        'Please consider upgrading your client to access all available functionality.')
                    show_pip_message = True
        elif self.check_version:
            warnings.warn('Client or server version not available! This is an unsupported configuration!')

        if show_pip_message:
            log.warning('Use "pip install flywheel-sdk~={}" '.format(release_version_match.group('semver')) +
                'to install a compatible version for this server')

{{>flywheel_methods}}

{{/apiInfo}}


