        function [returnData, resp] = addNodesToCollection(obj, collectionId, level, nodeIds, varargin)
            nodes = cellfun(@(id) flywheel.model.CollectionNode('id', id, 'level', level), ...
                nodeIds, 'UniformOutput', false);
            contents = flywheel.model.CollectionOperation('operation', 'add', 'nodes', nodes);
            update = flywheel.model.Collection('contents', contents);
            [returnData, resp] = obj.collectionsApi.modifyCollection(collectionId, update, varargin{:});
        end

        function [returnData, resp] = addSessionsToCollection(obj, collectionId, sessionIds, varargin)
            [returnData, resp] = obj.addNodesToCollection(collectionId, 'session', sessionIds, varargin{:});
        end

        function [returnData, resp] = addAcquisitionsToCollection(obj, collectionId, acquisitionIds, varargin)
            [returnData, resp] = obj.addNodesToCollection(collectionId, 'acquisition', acquisitionIds, varargin{:});
        end

        function [returnData, resp] = changeJobState(obj, jobId, state, varargin)
            [returnData, resp] = obj.modifyJob(jobId, struct('state', state), varargin{:});
        end

        function [returnData, resp] = get(obj, id, varargin)
            [returnData, resp] = obj.getContainer(id, varargin{:});
        end

        function [returnData, resp] = resolve(obj, path, varargin)
            [returnData, resp] = obj.resolvePath(flywheel.model.ResolverInput('path', strsplit(path, '/')), varargin{:});
        end

        function [returnData, resp] = lookup(obj, path, varargin)
            [returnData, resp] = obj.lookupPath(flywheel.model.ResolverInput('path', strsplit(path, '/')), varargin{:});
        end

        function url = fileUrl(obj, path)
            result = obj.resolve(path);
            tail = result.path{end};
            if ~isprop(tail, 'containerType') || ~strcmp(tail.containerType, 'file')
                throw(MException('ApiClient:apiException', 'Resolved path is not a file!'));
            end
            url = tail.url();
        end

        function summary = downloadTar(obj, varargin)
            % Download the given set of containers as a tarball to dest_file.
            %
            % Supports downloading Projects, Sessions, Acquisitions and/or Analyses.
            %
            % Parameters:
            % containers: (required) The container, or list of containers to download.
            % destFile: (required) The destination file on disk
            % includeTypes: The optional list of types to include in the download (e.g. ['nifti'])
            % excludeTypes: The optional list of types to exclude from the download (e.g. ['dicom'])

            p = inputParser;
            p.StructExpand = false;
            addRequired(p, 'containers');
            addRequired(p, 'destFile');
            addParameter(p, 'includeTypes', []);
            addParameter(p, 'excludeTypes', []);
            parse(p, varargin{:});

            if iscell(p.Results.containers)
                containers = p.Results.containers;
            else
                containers = {p.Results.containers};
            end

            % Extract the list of nodes
            nodes = [];
            for i = 1:numel(containers)
                container = containers{i};
                if ~isprop(container, 'containerType')
                    throw(MException('ApiClient:apiException', 'Unknown container specified!'));
                end
                nodes = horzcat(nodes, {flywheel.model.DownloadNode('level', container.containerType, 'id', container.id)});
            end

            % Setup filters
            typeFilter = [];
            if ~isempty(p.Results.includeTypes) || ~isempty(p.Results.excludeTypes)
                typeFilter = flywheel.model.DownloadFilterDefinition('plus', p.Results.includeTypes, ...
                    'minus', p.Results.excludeTypes);
            end

            downloadFilters = [];
            if ~isempty(typeFilter)
                downloadFilters = {flywheel.model.DownloadFilter('types', typeFilter)};
            end

            % Create download request
            request = flywheel.model.Download('nodes', nodes, 'filters', downloadFilters, 'optional', true);
            summary = obj.createDownloadTicket(request);

            % Perform download
            obj.downloadTicket(summary.ticket, p.Results.destFile);
        end

        function view = View(obj, varargin)
            % Create a new View object
            %
            % Parameters:
            %   public: Whether or not to make this data view public when saving it.
            %   match: The file match type, one of: first, last, newest, oldest, all
            %   zipFiles: The zip file filter, see the zip_member_filter function
            %   columns: The columns or column groups to add
            %   processFiles: Whether or not to process files, default is true
            %   includeIds: Whether or not to include id columns, default is true
            %   includeLabels: Whether or not to include label columns, default is true
            %   container: When matching files, the container to match on
            %   filename: When matching files, the filename pattern to match
            %   analysisLabel: When matching analysis files, the label match string
            %   analysisGearName: When matching analysis files, the gear name match string
            %   analysisGearVersion: When matching analysis files, the gear version match string
            builder = flywheel.ViewBuilder(varargin{:});
            view = builder.build();
        end

        function printViewColumns(obj)
            % Print the list of common View columns
            columns = obj.getViewColumns();
            for i = 1:numel(columns)
                column = columns{i};
                if ~isempty(column.group)
                    coltype = 'group';
                else
                    coltype = column.type;
                end
                fprintf('%s (%s): %s\n', column.name, coltype, column.description);
            end
        end

        function data = readViewData(obj, view, containerId, varargin)
            % Execute a data view against container, and return the view data
            %
            % Parameters:
            %   view: The view id or instance
            %   containerId: The id of the container to execute the view against
            data = obj.evalView(view, containerId, [], varargin{:});
        end

        function destFile = saveViewData(obj, view, containerId, destFile, varargin)
            % Execute a data view against container, and return the view data
            %
            % Parameters:
            %   view: The view id or instance
            %   containerId: The id of the container to execute the view against
            %   destFile: The destination file path
            destFile = obj.evalView(view, containerId, destFile, varargin{:});
        end

        function result = readViewStruct(obj, varargin)
            % Execute a data view against container, and return the view data as a struct array.
            % Requires Matlab 2016 or later
            %
            % Parameters:
            %   view: The view id or instance
            %   containerId: The id of the container to execute the view against
            %   filter: The filter to apply
            %   skip: The number of rows to skip
            %   limit: The maximum number of rows to return
            obj.requireVersion(9, 0);
            % webread/webwrite did not support Headers before 2016

            inp = inputParser;
            inp.StructExpand = false;
            addRequired(inp, 'view');
            addRequired(inp, 'containerId');

            addParameter(inp, 'filter', []);
            addParameter(inp, 'skip', []);
            addParameter(inp, 'limit', []);

            parse(inp, varargin{:});

            % Query parameters
            queryParams = { 'containerId', inp.Results.containerId, 'format', 'json-flat' };
            if ~isempty(inp.Results.filter)
                queryParams = [queryParams, 'filter', inp.Results.filter];
            end
            if ~isempty(inp.Results.skip)
                queryParams = [queryParams, 'skip', inp.Results.skip];
            end
            if ~isempty(inp.Results.limit)
                queryParams = [queryParams, 'limit', inp.Results.limit];
            end

            % Get default web options
            opts = obj.getWebOptions();
            opts.ContentType = 'json';

            if ischar(inp.Results.view)
                % Saved view execution
                path = '/views/{ViewId}/data';
                pathParams = { 'ViewId', inp.Results.view };

                opts.RequestMethod = 'GET';

                url = obj.buildUrl(path, pathParams, queryParams);
                result = webread(url, opts);
            else
                % Ad-hoc view execution
                path = '/views/data';
                pathParams = {};

                opts.RequestMethod = 'POST';
                opts.MediaType = 'application/json';

                url = obj.buildUrl(path, pathParams, queryParams);
                body = flywheel.model.DataView.ensureIsInstance(inp.Results.view);
                body = flywheel.ApiClient.encodeJson(body.toJson());
                result = webwrite(url, body, opts);
            end
        end

        function result = readViewTable(obj, varargin)
            % Execute a data view against container, and return the view data as a table.
            % Requires Matlab 2016 or later
            %
            % Parameters:
            %   view: The view id or instance
            %   containerId: The id of the container to execute the view against
            %   filter: The filter to apply
            %   skip: The number of rows to skip
            %   limit: The maximum number of rows to return
            s = obj.readViewStruct(varargin{:});
            result = struct2table(s);
        end

    {{#apiInfo}}
    {{#apis}}
    {{#operations}}
    {{#operation}}
    {{#vendorExtensions.x-sdk-modify-wrapper}}
        function [returnData, resp] = {{wrapperId}}(obj, {{#allParams}}{{#required}}{{paramName}}, {{/required}}{{/allParams}}varargin)
            body = struct( '{{key}}', body );
            [returnData, resp] = obj.{{classVarName}}.{{operationId}}({{#allParams}}{{#required}}{{paramName}}, {{/required}}{{/allParams}}varargin{:});
        end

    {{/vendorExtensions.x-sdk-modify-wrapper}}
    {{#vendorExtensions.x-sdk-download-file-param}}
        function [returnData, resp] = {{operationId}}AsData(obj, {{#allParams}}{{#required}}{{paramName}}, {{/required}}{{/allParams}}varargin)
            [returnData, resp] = obj.{{classVarName}}.{{operationId}}({{#allParams}}{{#required}}{{paramName}}, {{/required}}{{/allParams}}[], varargin{:});
        end

    {{/vendorExtensions.x-sdk-download-file-param}}
    {{/operation}}
    {{/operations}}
    {{/apis}}
    {{/apiInfo}}
