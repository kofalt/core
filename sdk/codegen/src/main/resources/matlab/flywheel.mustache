% Flywheel - Global namespace for API calls
%
% Flywheel Properties:
%    apiClient - The api client instance
{{#apiInfo}}
{{#apis}}
%    {{classVarName}}{{#operations}}{{#tag}} - {{description}}{{/tag}}{{/operations}}
{{/apis}}
{{/apiInfo}}
%
% Flywheel Methods:
{{#apiInfo}}
{{#apis}}
{{#operations}}
{{#operation}}
{{^vendorExtensions.x-sdk-download-url}}
%    {{operationId}}{{#summary}} - {{{.}}}{{/summary}}
{{/vendorExtensions.x-sdk-download-url}}
{{#vendorExtensions.x-sdk-download-url}}
%    {{.}}{{#summary}} - {{{.}}}{{/summary}}
{{/vendorExtensions.x-sdk-download-url}}
{{#description}}
%       {{{.}}}
{{/description}}
{{/operation}}
{{/operations}}
{{/apis}}
{{/apiInfo}}
classdef Flywheel < handle
    % NOTE: This file is auto generated by the swagger code generator program.
    % Do not edit the file manually.
    properties(Constant)
        SDK_VERSION = '{{packageVersion}}';
    end
    properties
        apiClient
        {{#apiInfo}}
        {{#apis}}
        {{classVarName}}
        {{/apis}}
        {{/apiInfo}}
        users
        groups
        projects
        sessions
        subjects
        acquisitions
        jobs
        gears
        collections
        checkVersion
    end
    methods
        function obj = Flywheel(apiKey, root, skipVersionCheck, subjectsInResolver)
            obj.apiClient = {{packageName}}.ApiClient(apiKey);

            % Set root mode
            if exist('root', 'var') && root
                fprintf('WARNING: Root mode is deprecated\n');
                obj.apiClient.restClient.addDefaultParameter('root', 'true');
            end

            if exist('skipVersionCheck', 'var') && ~skipVersionCheck
                obj.checkVersion = true;
            else
                skipEnv = getenv('FLYWHEEL_SDK_SKIP_VERSION_CHECK');
                obj.checkVersion = strcmp('0', skipEnv) || strcmpi('false', skipEnv);
            end

            userAgent = sprintf('Flywheel SDK/%s (Matlab %s; %s)', {{packageName}}.Flywheel.SDK_VERSION, version, computer);
            obj.apiClient.restClient.setDefaultHeader('User-Agent', userAgent);

            {{#apiInfo}}
            {{#apis}}
            obj.{{classVarName}} = {{apiPackage}}.{{classname}}(obj.apiClient, obj);
            {{/apis}}
            {{/apiInfo}}

            % Initialize finders
            obj.users = {{packageName}}.Finder(obj, 'getAllUsers');
            obj.groups = {{packageName}}.Finder(obj, 'getAllGroups');
            obj.projects = {{packageName}}.Finder(obj, 'getAllProjects');
            obj.subjects = {{packageName}}.Finder(obj, 'getAllSubjects');
            obj.sessions = {{packageName}}.Finder(obj, 'getAllSessions');
            obj.acquisitions = {{packageName}}.Finder(obj, 'getAllAcquisitions');
            obj.jobs = {{packageName}}.Finder(obj, 'getAllJobs');
            obj.gears = {{packageName}}.Finder(obj, 'getAllGears');
            obj.collections = {{packageName}}.Finder(obj, 'getAllCollections');

            % Perform version check
            obj.apiClient.setVersionCheckFn(@() obj.performVersionCheck());

            % Enable subjects in resolver by default
            if ~exist('subjectsInResolver', 'var')
                subjectsEnv = getenv('FLYWHEEL_SDK_SUBJECTS_IN_RESOLVER');
                subjectsInResolver = ~(strcmp('0', subjectsEnv) || strcmpi('false', subjectsEnv));
            end

            if subjectsInResolver
                obj.enableFeature('Subject-Container');
            end
        end
        {{#apiInfo}}
        {{#apis}}
        {{#operations}}
        {{#operation}}
        {{^vendorExtensions.x-sdk-download-url}}
        function [returnData, resp] = {{operationId}}(obj, varargin)
            [returnData, resp] = obj.{{classVarName}}.{{operationId}}(varargin{:});
        end
        {{/vendorExtensions.x-sdk-download-url}}
        {{! x-sdk-download-url is a special case where we need to construct and return a full url }}
        {{#vendorExtensions.x-sdk-download-url}}
        function [returnData, resp] = {{.}}(obj, varargin)
            [returnData, resp] = obj.{{classVarName}}.{{operationId}}(varargin{:}, 'ticket', true);
            if ~isempty(returnData)
                reqUrl = resp.getRequestUrl().toCharArray';
                {{! Url will look like: ".../files/filename.txt?ticket" so just append the equals. }}
                returnData = strcat(reqUrl, '=', returnData.ticket);
            end
        end
        {{/vendorExtensions.x-sdk-download-url}}
        {{/operation}}
        {{/operations}}
        {{/apis}}
        {{/apiInfo}}

{{>flywheel_methods}}

    end
    methods (Access=private)
{{>flywheel_private_methods}}
    end
end
